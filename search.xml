<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>欢迎</title>
    <url>/2019/08/19/%E6%AC%A2%E8%BF%8E/</url>
    <content><![CDATA[<p><img data-src="https://cdn.jsdelivr.net/gh/pmlrin/PicGo/new-welcome.jpg" /></p>
<p>欢迎来到 <pr>Pomelorin</pr> 和 <cb>Cool-breeze</cb>
的博客！希望我们能<cp>相互交流，共同进步</cp>～</p>
<span id="more"></span>
<h1 id="欢迎-dalao-来访">欢迎 Dalao 来访</h1>
<h2 id="why-blog">Why Blog</h2>
<div class="alert alert-info">
Why Blog“三段论”来自 yelog，并非原创。
</div>
<p>喜欢写 Blog 的人，会经历三个阶段。</p>
<blockquote>
<p>第一阶段，刚接触 Blog，觉得很新鲜，试着选择一个免费空间来写。</p>
</blockquote>
<blockquote>
<p>第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。</p>
</blockquote>
<blockquote>
<p>第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。</p>
</blockquote>
<p>我们每个人的在网络上产生的数据越来越多，这些信息是我们在互联网上存在过的痕迹，值得我们认真对待。但是它们被分散分布在各个网站上。很多时候我们很难将它们聚合在一起，而且各个网站的信息排布方式也没有办法自由控制，所以我们需要一个可以由自己主宰的空间——博客。</p>
<p>通过博客，我们可以记录自己的生活和成长的轨迹。它不像 Twitter
那样碎片化，也不像 Facebook 那样关系化，它是私人的空间。</p>
<h1 id="网站指南">网站指南</h1>
<h2 id="侧边栏">侧边栏</h2>
<ul>
<li>说说：一些简短的话，不至于发新文章，以说说形式发布。</li>
<li>留言：有什么想法、建议、吐槽、Bug 反馈，可以留言！</li>
<li>链接：一些友链，以及有用的网站。</li>
</ul>
<h2 id="已知-bug">已知 Bug</h2>
<ul>
<li>本主题或多或少有一些无法解决的 Bug。</li>
<li>题解的 CODE 会不可避免地被 HACK！Dalao 们若发现错误 /
不明确的地方请提出您宝贵的意见。</li>
</ul>
<h2 id="其他">其他</h2>
<p>本站域名不再更换。</p>
<p>更换记录：<code>yz-hs.github.io</code> -&gt; <code>orzyz.tk</code>
-&gt; <code>yz-hs.tk</code> -&gt; <code>cieu.tk</code> -&gt;
<code>yz-hs.github.io</code> -&gt; <code>Yurchiu.github.io</code> -&gt;
<code>pmlrin.github.io</code>。</p>
]]></content>
  </entry>
  <entry>
    <title>25暑期5</title>
    <url>/2025/08/21/25%E6%9A%91%E6%9C%9F5/</url>
    <content><![CDATA[<h1 id="problem-k"><pr>Problem K</pr></h1>
<p>给 <span class="math inline">\(n\)</span> 个节点的一棵树，上面有
<span class="math inline">\(m\)</span> 个特殊边。有 <span
class="math inline">\(k\)</span>
个路径（从某点到某点），选出最少数量的路径包含所有的 <span
class="math inline">\(m\)</span> 条特殊边。无解输出
-1；有解还要求方案数。</p>
<p><span class="math inline">\(2≤n≤2×10^5,  1\leq m\leq 22, 1\leq k\leq
2\times 10^5\)</span>。</p>
<span id="more"></span>
<details>
<summary>
点击查看题解
</summary>
<p>特殊边较少，设第 <span class="math inline">\(i\)</span>
条特殊边边权为 <span class="math inline">\(2^i\)</span>。可求 <span
class="math inline">\(k\)</span>
个路径上的边权状态（只需利用树上前缀或，直接取路径两端前缀和的异或即可）。断言边权和不同的路径数量较少（设有
<span class="math inline">\(k\)</span> 种），设 <span
class="math inline">\(f(i)\)</span> 表示边权状态为 <span
class="math inline">\(i\)</span>（状压）时所需最少路径数量，类似背包，可同时求方案数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PII pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200005</span>, M = <span class="number">25</span>, O = <span class="number">4500005</span>, mod = <span class="number">998244353</span>, inf = <span class="number">1145141919810</span>;</span><br><span class="line">vector&lt;PII &gt; e[N * <span class="number">2</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; val;</span><br><span class="line"><span class="type">int</span> n, m, k, spe[N], a[N];</span><br><span class="line"><span class="type">int</span> f[O], g[O], num[O];</span><br><span class="line"><span class="type">int</span> ans1 = <span class="number">-1</span>, ans2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> dad)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (PII i: e[now]) &#123;</span><br><span class="line">        <span class="type">int</span> to = i.first, v = spe[i.second];</span><br><span class="line">        <span class="keyword">if</span> (to == dad)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        a[to] = (a[now] | v);</span><br><span class="line">        <span class="built_in">init</span>(to, now);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">int</span> u, v;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        e[u].<span class="built_in">push_back</span>(&#123;v, i&#125;);</span><br><span class="line">        e[v].<span class="built_in">push_back</span>(&#123;u, i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        cin &gt;&gt; u;</span><br><span class="line">        spe[u] = (<span class="number">1ll</span> &lt;&lt; (i - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">init</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    val.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        <span class="type">int</span> tmp = (a[u] ^ a[v]);</span><br><span class="line">        <span class="keyword">if</span> (num[tmp] == <span class="number">0</span>) &#123;</span><br><span class="line">            val.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        num[tmp]++;</span><br><span class="line">    &#125;</span><br><span class="line">    g[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    k = val.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ((<span class="number">1ll</span> &lt;&lt; m) - <span class="number">1</span>); i++)</span><br><span class="line">        f[i] = inf;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = ((<span class="number">1ll</span> &lt;&lt; m) - <span class="number">1</span>); j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (f[j | val[i]] &gt; f[j] + <span class="number">1</span>) &#123;</span><br><span class="line">                f[j | val[i]] = f[j] + <span class="number">1</span>;</span><br><span class="line">                g[j | val[i]] = g[j] * num[val[i]] % mod;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (f[j | val[i]] == f[j] + <span class="number">1</span>) &#123;</span><br><span class="line">                g[j | val[i]] = (g[j | val[i]] + g[j] * num[val[i]]) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (f[(<span class="number">1ll</span> &lt;&lt; m) - <span class="number">1</span>] &gt;= inf)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        ans1 = f[(<span class="number">1ll</span> &lt;&lt; m) - <span class="number">1</span>];</span><br><span class="line">        ans2 = g[(<span class="number">1ll</span> &lt;&lt; m) - <span class="number">1</span>];</span><br><span class="line">        cout &lt;&lt; ans1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; ans2 &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <categories>
        <category>ACM</category>
        <category>题解</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
        <tag>树上前缀和</tag>
        <tag>树上路径和</tag>
        <tag>背包</tag>
      </tags>
  </entry>
  <entry>
    <title>【IDEA】选票统计</title>
    <url>/2025/08/20/%E3%80%90IDEA%E3%80%91%E9%80%89%E7%A5%A8%E7%BB%9F%E8%AE%A1/</url>
    <content><![CDATA[<p>原创题目。</p>
<h1 id="选票统计">选票统计</h1>
<p>G 国共 <span class="math inline">\(n\)</span> 个城市，<span
class="math inline">\(m\)</span>
个双向道路把它们连接起来，每个城市都可以通过某条路径到达其他任何一个城市。</p>
<p>G 国为了减少建设开支，希望将 <span class="math inline">\(n-1\)</span>
条道路建设为主干道使用，使得每个城市都可以通过这 <span
class="math inline">\(n-1\)</span> 条道路到达其他任何一个城市。G
国已经给出了一个建设方案。</p>
<p>居民们有拜访其他城市居民的需求，自然需要尽量少走路。如果对于一个城市，到达其他任何一个城市的最短距离和只走主干道到达此城市的最短距离均相等，那么这个城市内的居民就会同意这个建设方案。否则，他们就不会同意这个方案。</p>
<p>你作为 G
国的大臣，你提议通过民主投票来决定这个方案是否通过。于是，你需要找出哪些城市里的居民同意方案，哪些不同意方案。</p>
<span id="more"></span>
<hr />
<p>形式化题意：</p>
<p>给出一张共 <span class="math inline">\(n\)</span> 个点，<span
class="math inline">\(m\)</span> 条边的无向带权连通图 <span
class="math inline">\(G\)</span>，边权均为正整数。给定此图的一个生成树
<span class="math inline">\(T(G)\)</span>，它包含原图中所有的点。</p>
<p>定义 <span class="math inline">\(D(i,j)\)</span> 为 <span
class="math inline">\(G\)</span> 中结点 <span
class="math inline">\(i\)</span> 与结点 <span
class="math inline">\(j\)</span> 间的最短距离，<span
class="math inline">\(F(i,j)\)</span> 为 <span
class="math inline">\(T(G)\)</span> 中结点 <span
class="math inline">\(i\)</span> 与结点 <span
class="math inline">\(j\)</span> 间的最短距离。 特殊地，<span
class="math inline">\(D(i,i)=F(i,i)=0\)</span>。</p>
<p>设变量 <span class="math inline">\(Q_i\)</span>
的取值为：当且仅当满足 <span class="math inline">\(\forall j\in
[1,n],D(i,j)=F(i,j)\)</span> 时，<span
class="math inline">\(Q_i\)</span> 为 <span
class="math inline">\(1\)</span>；否则 <span
class="math inline">\(Q_i\)</span> 为 <span
class="math inline">\(0\)</span>。</p>
<p>求 <span class="math inline">\(Q_{1\sim n}\)</span> 的值。</p>
<h2 id="输入输出格式">输入输出格式</h2>
<h3 id="输入格式">输入格式</h3>
<p>输入的第一行为两个正整数 <span
class="math inline">\(n,m\)</span>。</p>
<p>接下来 <span class="math inline">\(m\)</span> 行，每行三个正整数
<span class="math inline">\(u_i,v_i,l_i\)</span>，表示一条边权为 <span
class="math inline">\(l_i\)</span> 的无向边 <span
class="math inline">\((u_i,v_i)\)</span>。其中，给出的前 <span
class="math inline">\(n-1\)</span> 条边为给定生成树上的边。</p>
<h3 id="输出格式">输出格式</h3>
<p>输出一行 <span class="math inline">\(n\)</span> 个数，第 <span
class="math inline">\(i\)</span> 个数为 <span
class="math inline">\(Q_i\)</span> 的值。</p>
<h2 id="数据范围">数据范围</h2>
<p><span class="math inline">\(1&lt;n&lt;m\le10^{5},1\le u_i,v_i\le
n,1\le l_i\le 10^9\)</span>，所有数均为正整数。</p>
]]></content>
      <categories>
        <category>ACM</category>
        <category>idea</category>
      </categories>
      <tags>
        <tag>最近公共祖先</tag>
        <tag>二分查找</tag>
      </tags>
  </entry>
  <entry>
    <title>CF R1019</title>
    <url>/2025/08/19/CF-R1019/</url>
    <content><![CDATA[<h1 id="problem-a"><pr>Problem A</pr></h1>
<p>正整数范围内，长度为 <span class="math inline">\(n\)</span>
的漂亮序列 <span class="math inline">\(x\)</span>
的定义：存在与之长度相等、元素互不相同的序列 <span
class="math inline">\(y\)</span>，使得 <span
class="math inline">\(\forall\text{
}i,j\in[1,n],x_iy_i=x_jy_j\)</span>。给一个长度为 <span
class="math inline">\(n\)</span> 的正整数序列 <span
class="math inline">\(a\)</span>，求最长的子序列 <span
class="math inline">\(a&#39;\)</span>，使 <span
class="math inline">\(a&#39;\)</span> 为漂亮序列。<span
class="math inline">\(t\)</span> 组数据。</p>
<p><span class="math inline">\(1≤t≤500,1≤n≤100,1≤a_i≤n\)</span>。</p>
<span id="more"></span>
<details>
<summary>
点击查看题解
</summary>
<p>显然，<span class="math inline">\(x\)</span> 是漂亮序列的必要条件为
<span class="math inline">\(x\)</span>
内的元素互不相等。下面是充分性证明：令 <span
class="math inline">\(M=\prod x_i\)</span>，则 <span
class="math inline">\(y_i=M/x_i\)</span>，符合题意。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PII pair<span class="string">&lt;ll,ll&gt;</span></span></span><br><span class="line"><span class="type">const</span> ll N = <span class="number">150</span> + <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">ll n, a[N], b[N], ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    ll T;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">            b[a[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (b[i])</span><br><span class="line">                ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h1 id="problem-b"><pr>Problem B</pr></h1>
<p>需要用一根手指以及只有 0 和 1 两个按钮的打字机打出一个长度为 <span
class="math inline">\(n\)</span> 的 01 字符串 <span
class="math inline">\(s\)</span>。有两种操作：把手指放在另一个按钮上，或者按按钮。刚开始手指在按钮
0 上。可以选择翻转 <span class="math inline">\(s\)</span>
内的任一个子区间，使得操作次数尽量少。求最少操作次数。</p>
<p><span class="math inline">\(1≤n≤2\times10^5\)</span>。</p>
<details>
<summary>
点击查看题解
</summary>
<p>减少操作次数的原理是翻转合并了一些数字相同区间，减少切换次数。由于翻转改变的是两头的数，内部和外部均不影响，所以最多减少
<span class="math inline">\(2\)</span> 步操作次数。由于刚开始在按钮
0，可以将 <span class="math inline">\(s\)</span> 开头插入一个
0，方便统计切换次数，以判断可以减少几步操作。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PII pair<span class="string">&lt;ll,ll&gt;</span></span></span><br><span class="line"><span class="type">const</span> ll N = <span class="number">150</span> + <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">ll n, b[N], ans, cur, cha;</span><br><span class="line">string s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    ll T;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; s;</span><br><span class="line">        s = <span class="string">&#x27;0&#x27;</span> + s;</span><br><span class="line">        ans = cha = <span class="number">0</span>;</span><br><span class="line">        cur = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            ans += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (s[i] != cur) &#123;</span><br><span class="line">                ans += <span class="number">1</span>;</span><br><span class="line">                cha += <span class="number">1</span>;</span><br><span class="line">                cur = s[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cha &gt;= <span class="number">3</span>)</span><br><span class="line">            ans -= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cha == <span class="number">2</span>) &#123;</span><br><span class="line">            ans -= <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ans -= <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans - <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h1 id="problem-c"><pr>Problem C</pr></h1>
<p>定义长度为 <span class="math inline">\(m\)</span>
的数列的中位数是数列中第 <span class="math inline">\(\lceil m/2
\rceil\)</span> 小的数。现在给一个长度为 <span
class="math inline">\(n\)</span> 的正整数数列 <span
class="math inline">\(a\)</span> 和正整数 <span
class="math inline">\(k\)</span>，询问能否将数列分成三个连续的子数列
<span class="math inline">\(a_{1\sim l-1},a_{l\sim r},a_{r+1\sim
n}\)</span>，这三个子数列的中位数分别为 <span
class="math inline">\(q_1,q_2,q_3\)</span>，组成数列 <span
class="math inline">\(q\)</span>，使得 <span
class="math inline">\(q\)</span> 的中位数小于等于 <span
class="math inline">\(k\)</span>。</p>
<p><span class="math inline">\(3≤n≤2\times10^5,
1≤k≤10^9,1≤a_i≤10^9\)</span>。</p>
<details>
<summary>
点击查看题解
</summary>
<p>此题不必使用对顶堆等求出具体的中位数。对于一段区间，只需满足小于等于
<span class="math inline">\(k\)</span> 的数字数量 <span
class="math inline">\(\ge\)</span> 大于 <span
class="math inline">\(k\)</span>
的数字数量，即可判断其中位数是否小于等于 <span
class="math inline">\(k\)</span>。令小于等于 <span
class="math inline">\(k\)</span> 的数字贡献为 <span
class="math inline">\(-1\)</span>，大于 <span
class="math inline">\(k\)</span> 的数字贡献为 <span
class="math inline">\(1\)</span>，利用前缀和或后缀和可以算出某个区间的中位数是否小于等于
<span class="math inline">\(k\)</span>（区间贡献和小于等于 <span
class="math inline">\(0\)</span>）。</p>
<p>只需要满足三个 <span class="math inline">\(q\)</span> 中有两个 <span
class="math inline">\(\le k\)</span>，即可满足题意。分类讨论：</p>
<ul>
<li>前缀、后缀均满足；</li>
<li>前缀、后缀只有一个满足；</li>
<li>前缀、后缀均不满足。</li>
</ul>
<p>第一种情况：只需找出一个前缀和一个后缀，贡献和小于等于 <span
class="math inline">\(0\)</span> 即可。可以利用取 min 前缀 /
后缀和解决。</p>
<p>第二种情况：例如前缀满足，需要找出一个后缀，减去这个后缀之后中段小于等于
<span class="math inline">\(0\)</span> 即可。可以利用后缀和减去取 max
后缀和解决。注意，企图使用“合法前缀 + 一个小于等于 <span
class="math inline">\(k\)</span> 的数字”的组合来判断是错误的。</p>
<p>第三种情况：不满足题意，输出 “NO”。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PII pair<span class="string">&lt;ll,ll&gt;</span></span></span><br><span class="line"><span class="type">const</span> ll N = <span class="number">200000</span> + <span class="number">50</span>, inf = <span class="number">1145141919810</span>;</span><br><span class="line"></span><br><span class="line">ll n, k, a[N];</span><br><span class="line">ll nump[N], numn[N], maxp[N], maxn[N], minp[N], minn[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    ll T;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        nump[<span class="number">0</span>] = numn[n + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        maxp[<span class="number">0</span>] = maxn[n + <span class="number">1</span>] = -inf;</span><br><span class="line">        minp[<span class="number">0</span>] = minn[n + <span class="number">1</span>] = inf;</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            nump[i] = nump[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; k)</span><br><span class="line">                nump[i]++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                nump[i]--;</span><br><span class="line">            maxp[i] = <span class="built_in">max</span>(maxp[i - <span class="number">1</span>], nump[i]);</span><br><span class="line">            minp[i] = <span class="built_in">min</span>(minp[i - <span class="number">1</span>], nump[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (ll i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            numn[i] = numn[i + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; k)</span><br><span class="line">                numn[i]++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                numn[i]--;</span><br><span class="line">            maxn[i] = <span class="built_in">max</span>(maxn[i + <span class="number">1</span>], numn[i]);</span><br><span class="line">            minn[i] = <span class="built_in">min</span>(minn[i + <span class="number">1</span>], numn[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n - <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (minp[i] &lt;= <span class="number">0</span> &amp;&amp; minn[i + <span class="number">2</span>] &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                ans = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nump[i] &lt;= <span class="number">0</span> &amp;&amp; numn[i + <span class="number">1</span>] - maxn[i + <span class="number">2</span>] &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                ans = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nump[i + <span class="number">1</span>] - maxp[i] &lt;= <span class="number">0</span> &amp;&amp; numn[i + <span class="number">2</span>] &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                ans = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ans == <span class="number">1</span>)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <categories>
        <category>ACM</category>
        <category>题解</category>
      </categories>
      <tags>
        <tag>思维题</tag>
        <tag>前缀和</tag>
      </tags>
  </entry>
  <entry>
    <title>24暑排位3</title>
    <url>/2025/08/18/24%E6%9A%91%E6%8E%92%E4%BD%8D3/</url>
    <content><![CDATA[<h1 id="problem-a"><pr>Problem A</pr></h1>
<p>给定一个包含 <span class="math inline">\(n\)</span> 个正整数的数组
<span
class="math inline">\(a_0,a_1,…,a_{n−1}\)</span>，你可以选择任意下标
<span class="math inline">\(x\)</span>（<span
class="math inline">\(0≤x&lt;n\)</span>）作为起始位置，并进行若干次操作：<span
class="math inline">\(a_x\gets a_x-1\)</span>，之后 <span
class="math inline">\(x\gets (x+1) \bmod n\)</span>。如果操作之前数字为
<span class="math inline">\(0\)</span>，终止操作。</p>
<p>请问如果选择合适的 <span
class="math inline">\(x\)</span>，最多可以进行多少次操作。</p>
<span id="more"></span>
<details>
<summary>
点击查看题解
</summary>
<p>寻找数组最小值，设为 <span
class="math inline">\(m\)</span>。则至少执行 <span
class="math inline">\(nm\)</span> 次。之后寻找最长不包含 <span
class="math inline">\(m\)</span> 的区间，设区间长度为 <span
class="math inline">\(l\)</span>。则答案是 <span
class="math inline">\(nm+l\)</span>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PII pair<span class="string">&lt;ll,ll&gt;</span></span></span><br><span class="line"><span class="type">const</span> ll N = <span class="number">400000</span> + <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">ll n, a[N], minn, maxx, cur = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    minn = a[<span class="number">1</span>];</span><br><span class="line">    maxx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        minn = <span class="built_in">min</span>(minn, a[i]);</span><br><span class="line">        a[n + i] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == minn) &#123;</span><br><span class="line">            maxx = <span class="built_in">max</span>(maxx, cur);</span><br><span class="line">            cur = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            cur++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; minn * n + maxx &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h1 id="problem-b"><pr>Problem B</pr></h1>
<p>给定一个大小为 <span class="math inline">\(n\times n\)</span>
的网格图，其中有 <span class="math inline">\(m\)</span>
个网格上设有障碍物。你需要在网格边界上的点（非边角点非障碍物）上放若干个棋子。之后，每个棋子单位时间向对边边界移动
<span class="math inline">\(1\)</span>
格。要求每个棋子不能移动到障碍物上，且不会有两个棋子在某时间重合，且棋子不能相互穿过。问最多可以放多少棋子。</p>
<details>
<summary>
点击查看题解
</summary>
<p>放四个棋子，使其相互之间连线为正方形。则这四个棋子不会相互干扰。对于对边，如果一个位置有棋子，则对边的相应位置就不能放棋子。所以，考虑正方形放法。如果
<span class="math inline">\(n\)</span>
为奇数，正中间的点最多放一个。如图（数字表示不同的正方形编号）。</p>
<table>
<thead>
<tr>
<th style="text-align: center;">0</th>
<th style="text-align: center;">0</th>
<th style="text-align: center;">0</th>
<th style="text-align: center;">0</th>
<th style="text-align: center;">0</th>
<th style="text-align: center;">0</th>
<th style="text-align: center;">0</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;"></td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">1</td>
</tr>
<tr>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">2</td>
</tr>
<tr>
<td style="text-align: center;">0</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">0</td>
</tr>
<tr>
<td style="text-align: center;">2</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr>
<td style="text-align: center;">1</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;"></td>
</tr>
</tbody>
</table>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PII pair<span class="string">&lt;ll,ll&gt;</span></span></span><br><span class="line"><span class="type">const</span> ll N = <span class="number">1000</span> + <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">ll n, m, a[<span class="number">5</span>][N], ans1 = <span class="number">0</span>, ans2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    ll tx, ty;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">2</span>; i &lt;= n - <span class="number">1</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (ll j = <span class="number">1</span>; j &lt;= <span class="number">4</span>; j++)</span><br><span class="line">            a[j][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        cin &gt;&gt; tx &gt;&gt; ty;</span><br><span class="line">        a[<span class="number">1</span>][tx] = a[<span class="number">3</span>][n - tx + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        a[<span class="number">2</span>][ty] = a[<span class="number">4</span>][n - ty + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">2</span>; i &lt;= n / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (ll j = <span class="number">1</span>; j &lt;= <span class="number">4</span>; j++)</span><br><span class="line">            ans1 += a[j][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (ll i = n - <span class="number">1</span>; i &gt;= n - n / <span class="number">2</span> + <span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (ll j = <span class="number">1</span>; j &lt;= <span class="number">4</span>; j++)</span><br><span class="line">            ans2 += a[j][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[<span class="number">1</span>][n / <span class="number">2</span> + <span class="number">1</span>] || a[<span class="number">2</span>][n / <span class="number">2</span> + <span class="number">1</span>] || a[<span class="number">3</span>][n / <span class="number">2</span> + <span class="number">1</span>] || a[<span class="number">4</span>][n / <span class="number">2</span> + <span class="number">1</span>]) &#123;</span><br><span class="line">            ans1++;</span><br><span class="line">            ans2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">max</span>(ans1, ans2) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h1 id="problem-c"><cb>Problem C</cb></h1>
<p>将给定字符串替换最少个字母，使他能重排成回文串，并且多种方案输出字典序最小的方案。</p>
<details>
<summary>
点击查看题解
</summary>
<p>分别统计 26 个字母的个数，双指针从 a 和 z
开始扫，扫到两个奇数个字母就把一个大的变成小的，直至只剩一个或零个奇数个数字母。然后按字典序，每个字母放一半，奇数个也要放一半，中间可以放唯一一个奇数个字母，然后反着放。</p>
<p>例如 acbbbca 需要重排成 abcbcba。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ios::sync_with_stdio(false);</span></span><br><span class="line">    <span class="comment">// cin.tie(0);</span></span><br><span class="line">    <span class="comment">// cout.tie(0);</span></span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="type">int</span> n = s.<span class="built_in">length</span>();</span><br><span class="line">    unordered_map&lt;<span class="type">char</span>,<span class="type">int</span>&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        m[s[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c = <span class="string">&#x27;a&#x27;</span>; c &lt;= <span class="string">&#x27;z&#x27;</span>; c++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (m[c] % <span class="number">2</span> == <span class="number">1</span>)num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> c1 = <span class="string">&#x27;a&#x27;</span>, c2 = <span class="string">&#x27;z&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span> (num &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (m[c1] % <span class="number">2</span> == <span class="number">0</span>)c1++;</span><br><span class="line">        <span class="keyword">while</span> (m[c2] % <span class="number">2</span> == <span class="number">0</span>)c2--;</span><br><span class="line">        num -= <span class="number">2</span>;</span><br><span class="line">        m[c1]++;</span><br><span class="line">        m[c2]--;</span><br><span class="line">    &#125;</span><br><span class="line">    string ans;</span><br><span class="line">    <span class="type">char</span> c3 = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c = <span class="string">&#x27;a&#x27;</span>; c &lt;= <span class="string">&#x27;z&#x27;</span>; c++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (m[c] % <span class="number">2</span> == <span class="number">1</span>) c3 = c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m[c] / <span class="number">2</span>; i++)ans.<span class="built_in">push_back</span>(c);</span><br><span class="line">        m[c] /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (c3 != <span class="string">&#x27;0&#x27;</span>) ans.<span class="built_in">push_back</span>(c3);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c = <span class="string">&#x27;z&#x27;</span>; c &gt;= <span class="string">&#x27;a&#x27;</span>; c--) &#123;</span><br><span class="line">        <span class="keyword">while</span> (m[c]--)ans.<span class="built_in">push_back</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h1 id="problem-d"><cb>Problem D</cb></h1>
<p>有一个长度为 <span class="math inline">\(n\)</span> 的隐藏排列。</p>
<p>对于每个索引 <span class="math inline">\(i\)</span>，给定 <span
class="math inline">\(s_i\)</span>，<span
class="math inline">\(s_i\)</span> 是第 <span
class="math inline">\(i\)</span> 个元素之前所有比第 <span
class="math inline">\(i\)</span> 个元素小的元素的和。</p>
<p>需要还原这个排列。</p>
<details>
<summary>
点击查看题解
</summary>
<p>反过来思考，如果给排列求 <span
class="math inline">\(s_i\)</span>，那每个数会对后面所有比它大的数贡献
<span class="math inline">\(a_i\)</span>。</p>
<p>然后再摸一摸样例会发现，<span class="math inline">\(s_i\)</span>
里最右侧的 0 对应的一定是 1，而填了 1 后，其他数都会比 1 大，所以 1
对右侧所有的 <span class="math inline">\(s_i\)</span> 贡献了
1，就可以把右侧的 <span class="math inline">\(s_i\)</span> 全部减去
1。这样下来最右侧的 0 必定是 2，以此类推。</p>
<p>所以用线段树维护区间加与区间求最小值：每次找到 0
后，把这个点变成正无穷，然后把右侧所有点的值减去 <span
class="math inline">\(i\)</span>，这样就能还原排列。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls (2*n)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs (2*n+1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"><span class="comment">//线段树</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SGT</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">        <span class="type">int</span> mmin, lz, index;</span><br><span class="line">    &#125; t[<span class="number">4</span> * N];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> l,<span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        t[ls].lz += t[n].lz;</span><br><span class="line">        t[rs].lz += t[n].lz;</span><br><span class="line">        t[ls].mmin += t[n].lz;</span><br><span class="line">        t[rs].mmin += t[n].lz;</span><br><span class="line">        t[n].lz = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        t[n].mmin = <span class="built_in">min</span>(t[ls].mmin, t[rs].mmin);</span><br><span class="line">        t[n].index = (t[ls].mmin &lt; t[rs].mmin) ? t[ls].index : t[rs].index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> l,<span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        t[n].lz = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            t[n].mmin = a[r];</span><br><span class="line">            t[n].index = l;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">build</span>(ls, l,mid);</span><br><span class="line">        <span class="built_in">build</span>(rs,mid + <span class="number">1</span>, r);</span><br><span class="line">        <span class="built_in">push_up</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= l &amp;&amp; y &gt;= r) &#123;</span><br><span class="line">            t[n].lz += k;</span><br><span class="line">            t[n].mmin += k;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">push_down</span>(n, l, r);</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= mid) &#123;</span><br><span class="line">            <span class="built_in">update</span>(ls, l,mid, x, y, k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (y &gt; mid) &#123;</span><br><span class="line">            <span class="built_in">update</span>(rs,mid + <span class="number">1</span>, r, x, y, k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">push_up</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= l &amp;&amp; y &gt;= r) &#123;</span><br><span class="line">            <span class="keyword">return</span> t[n].mmin;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">push_down</span>(n, l, r);</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">1000000000000000</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= mid) &#123;</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, <span class="built_in">search</span>(ls, l,mid, x, y));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (y &gt; mid) &#123;</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, <span class="built_in">search</span>(rs,mid + <span class="number">1</span>, r, x, y));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; t;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ios::sync_with_stdio(false);</span></span><br><span class="line">    <span class="comment">// cin.tie(0);</span></span><br><span class="line">    <span class="comment">// cout.tie(0);</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> ans[n + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    t.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> x = t.t[<span class="number">1</span>].index;</span><br><span class="line">        ans[x] = i;</span><br><span class="line">        t.<span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, n, x, x, <span class="number">1000000000000000</span>);</span><br><span class="line">        t.<span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, n, x + <span class="number">1</span>, n, -i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  4 0 1 4 1</span></span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <categories>
        <category>ACM</category>
        <category>题解</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>思维题</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>25暑期10</title>
    <url>/2025/08/17/25%E6%9A%91%E6%9C%9F10/</url>
    <content><![CDATA[<h1 id="problem-f"><cp>Problem F</cp></h1>
<p>把数组 <span class="math inline">\(\{a_n\}\)</span>
分为三段，使得在三段内同时出现的数字数量最大。输出最大值以及左右指针（即分割方法）。</p>
<p><span class="math inline">\(3\le n\le150000,1\le
a_i\le10^6\)</span>。</p>
<span id="more"></span>
<details>
<summary>
点击查看题解
</summary>
<p>对于每个出现次数大于等于 <span class="math inline">\(3\)</span>
的数字，都能保证存在将此数字分在三段上的左指针范围和右指针范围。问题转化为，有
<span class="math inline">\(m\)</span> 组条件，每组条件为 <span
class="math inline">\(l_{i1}\le a\le r_{i1}\)</span>（左区间）且 <span
class="math inline">\(l_{i2}\le b\le
r_{i2}\)</span>（右区间），求使得满足条件组数最多的 <span
class="math inline">\(a\)</span> 和 <span
class="math inline">\(b\)</span>。</p>
<p>从左到右枚举左指针位置，用线段树维护答案。当左指针进入一个左区间后，对应右区间
+1；退出一个左区间后，对应右区间
-1。每次移动后，查询区间最大值即可。</p>
<p>具体来说，先维护每一种数字出现的最右位置，以及每一个数字的后一个相同数字的位置（即每一个数字的后继）。</p>
<p>然后当左指针向右移动，一个新的数加入了第一个区间，就在线段树上将这个数的后继到最右位置全部
+1，因为这个数会使右端点在这个区间范围内贡献 +1。</p>
<p>如果一个数字不是第一个加入第一个区间，那就要在线段树上减去这个数到这个数的后继。</p>
<p>每次移动左指针，直接查询线段树 <span
class="math inline">\([1,n]\)</span> 最值即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">150005</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> mmax[<span class="number">4</span> * N]; </span><br><span class="line"><span class="type">int</span> iindex[<span class="number">4</span> * N]; </span><br><span class="line"><span class="type">int</span> lz[<span class="number">4</span> * N]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    mmax[n] = <span class="built_in">max</span>(mmax[<span class="number">2</span> * n], mmax[<span class="number">2</span> * n + <span class="number">1</span>]);</span><br><span class="line">    iindex[n] = (mmax[<span class="number">2</span> * n] &gt;= mmax[<span class="number">2</span> * n + <span class="number">1</span>]) ? iindex[<span class="number">2</span> * n] : iindex[<span class="number">2</span> * n + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> mid,<span class="type">int</span> l,<span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    lz[<span class="number">2</span> * n] += lz[n]; </span><br><span class="line">    lz[<span class="number">2</span> * n + <span class="number">1</span>] += lz[n];</span><br><span class="line">    mmax[<span class="number">2</span> * n] += lz[n];</span><br><span class="line">    mmax[<span class="number">2</span> * n + <span class="number">1</span>] += lz[n];</span><br><span class="line">    lz[n] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> l,<span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        mmax[n] = <span class="number">0</span>;</span><br><span class="line">        iindex[n] = l;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    lz[n]=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">2</span> * n, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">2</span> * n + <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">push_up</span>(n);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= l &amp;&amp; y &gt;= r) &#123;</span><br><span class="line">        lz[n] += k;</span><br><span class="line">        mmax[n] += k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">push_down</span>(n, mid, l, r);</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid) &#123;</span><br><span class="line">        <span class="built_in">update</span>(<span class="number">2</span> * n, l, mid, x, y, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (y &gt; mid) &#123;</span><br><span class="line">        <span class="built_in">update</span>(<span class="number">2</span> * n + <span class="number">1</span>, mid + <span class="number">1</span>, r, x, y, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">push_up</span>(n);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> rr[<span class="number">1000005</span>], nex[N], pos[<span class="number">1000005</span>];</span><br><span class="line"><span class="type">int</span> b[<span class="number">1000005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">        rr[i] = <span class="number">-1</span>, pos[i] = <span class="number">-1</span>;</span><br><span class="line">        b[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        rr[a[i]] = <span class="built_in">max</span>(rr[a[i]], i);</span><br><span class="line">        nex[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos[a[i]] != <span class="number">-1</span>) &#123;</span><br><span class="line">            nex[pos[a[i]]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        pos[a[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span> * n + <span class="number">3</span>; i++) &#123;</span><br><span class="line">        lz[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1ll</span>, <span class="number">1ll</span>, n);</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>, index1 = <span class="number">2</span>, index2 = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> x = a[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (b[x] == <span class="number">0</span>) &#123;</span><br><span class="line">            b[x] = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//first time</span></span><br><span class="line">            <span class="keyword">if</span> (nex[i - <span class="number">1</span>] != <span class="number">-1</span> &amp;&amp; rr[x] != nex[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="built_in">update</span>(<span class="number">1ll</span>, <span class="number">1ll</span>, n, nex[i - <span class="number">1</span>] + <span class="number">1</span>, rr[x], <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (nex[i - <span class="number">1</span>] != <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="built_in">update</span>(<span class="number">1ll</span>, <span class="number">1ll</span>, n, i, nex[i - <span class="number">1</span>], <span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mmax[<span class="number">1</span>] &gt; ans) &#123;</span><br><span class="line">            ans = mmax[<span class="number">1</span>], index1 = i, index2 = iindex[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl &lt;&lt; index1 &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; index2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <categories>
        <category>ACM</category>
        <category>题解</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>24暑排位2</title>
    <url>/2025/08/10/24%E6%9A%91%E6%8E%92%E4%BD%8D2/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/gym/542438">Dashboard - SDU
2024暑假排位 Round 2 - Codeforces</a></p>
<h1 id="problem-a"><pr>Problem A</pr></h1>
<p>一个圆形走廊由两个区域组成。内区域被均匀地分为 <span
class="math inline">\(n\)</span> 个扇区，外区域被均匀地分为 <span
class="math inline">\(m\)</span>
个扇区。每对相同区域（内或外）的扇区之间都有墙壁，但内区域和外区域之间没有墙壁。12
点钟位置总是有一堵墙。</p>
<p>内区域的扇区顺时针方向标记为 <span
class="math inline">\((1,1),(1,2),⋯,(1,n)\)</span>。外区域的扇区同样标记为
<span class="math inline">\((2,1),(2,2),⋯,(2,m)\)</span>。</p>
<p>有 <span class="math inline">\(q\)</span>
个询问，是否可以从一个扇区移动到另一个扇区。</p>
<p><span class="math inline">\(1≤n,m≤10^{18},1≤q≤10^4\)</span>。</p>
<span id="more"></span>
<p><img data-src="https://cdn.jsdelivr.net/gh/pmlrin/PicGo/6072b0bf04570fd72bf039db029596e05fd992a6.png" /></p>
<details>
<summary>
点击查看题解
</summary>
<p>取 <span class="math inline">\(n\)</span> 和 <span
class="math inline">\(m\)</span> 的最大公约数 <span
class="math inline">\(g\)</span>。则恰好有 <span
class="math inline">\(g\)</span> 个连通块。一个连通块中，<span
class="math inline">\(n\)</span> 有 <span
class="math inline">\(n/g\)</span> 个扇区，<span
class="math inline">\(m\)</span>
同理。对于每次询问计算两个扇区是否位于同一个连通块即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PII pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line"></span><br><span class="line">ll n, m, q;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a, ll b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b ? <span class="built_in">gcd</span>(b, a % b) : a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    ll sx, sy, ex, ey, g;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    g = <span class="built_in">gcd</span>(n, m);</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= q; i++) &#123;</span><br><span class="line">        ll sty = <span class="number">-1</span>, ety = <span class="number">-1</span>;</span><br><span class="line">        cin &gt;&gt; sx &gt;&gt; sy &gt;&gt; ex &gt;&gt; ey;</span><br><span class="line">        <span class="keyword">if</span> (sx == <span class="number">1</span>) &#123;</span><br><span class="line">            sty = (sy - <span class="number">1</span>) / (n / g);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sty = (sy - <span class="number">1</span>) / (m / g);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ex == <span class="number">1</span>) &#123;</span><br><span class="line">            ety = (ey - <span class="number">1</span>) / (n / g);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ety = (ey - <span class="number">1</span>) / (m / g);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sty == ety)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>
<h1 id="problem-b"><cp>Problem B</cp></h1>
<p>一天有 <span class="math inline">\(h\)</span> 个小时。从第 <span
class="math inline">\(0\)</span> 时（刚好醒来）开始，睡觉 <span
class="math inline">\(n\)</span> 次。第 <span
class="math inline">\(i\)</span> 次睡觉将会在醒来后 <span
class="math inline">\(a_i\)</span>
小时之后准确地再次入睡，睡觉用时<strong>正好一天</strong>（<span
class="math inline">\(h\)</span> 小时）。</p>
<p>在<strong>每天</strong>的第 <span class="math inline">\(l\)</span> 到
<span class="math inline">\(r\)</span>
小时之间<strong>入睡</strong>是<strong>很棒</strong>的。若第 <span
class="math inline">\(i\)</span>
次入睡<strong>很棒</strong>，称此次睡眠是<strong>好的</strong>。</p>
<p>为了获取更多<strong>好的</strong>睡眠，在每次睡觉之前都可以选择：在
<span class="math inline">\(a_i\)</span> 小时后入睡，或在 <span
class="math inline">\(a_i−1\)</span> 小时后入睡。</p>
<p>求可以获得的<strong>好的</strong>睡眠次数的最大值。</p>
<p><span class="math inline">\(1\le n\le 2000,3\le h\le 2000,0\le l \le
r&lt;h,1≤a_i&lt;h\)</span>。</p>
<details>
<summary>
点击查看题解
</summary>
<h2 id="解法一"><pr>解法一</pr></h2>
<p>可以发现，经过 <span class="math inline">\(i\)</span>
次睡眠后，只需要知道提前睡了几次就可以算出当前的时间，从而判断睡眠是否很棒。</p>
<p>设 <span class="math inline">\(f(i,j)\)</span> 代表前 <span
class="math inline">\(i\)</span> 次睡眠提前睡了 <span
class="math inline">\(j\)</span> 次的好的睡眠次数的最大值。限制：<span
class="math inline">\(1\le i\le n, 0\le j\le i\)</span>。</p>
<p>状态转移方程：</p>
<ul>
<li><p><span
class="math inline">\(f(i,j)=\max\{f(i-1,j-1),f(i-1,j)\}+\text{isgood}(i,j)\)</span>
。</p></li>
<li><p><span class="math inline">\(\text{isgood}(i,j)=[l\le p_i-j\le
r\pmod h]\)</span>。</p></li>
<li><p><span class="math inline">\(p_i\)</span> 表示 <span
class="math inline">\(a_i\)</span> 的前缀和。</p></li>
</ul>
<p>时间复杂度 <span class="math inline">\(O(n^2)\)</span>，适用于 <span
class="math inline">\(n\)</span> 比较小而 <span
class="math inline">\(h\)</span> 比较大的情况。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PII pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> ll N = <span class="number">2005</span>;</span><br><span class="line"><span class="type">const</span> ll M = N * N;</span><br><span class="line">ll n, h, l, r, a[N], p[N], f[N][N], ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; h &gt;&gt; l &gt;&gt; r;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        p[i] = p[i - <span class="number">1</span>] + a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (ll j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            ll cur = ((p[i] - j) % h + h) % h;</span><br><span class="line">            ll flag = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (l &lt;= cur &amp;&amp; cur &lt;= r)</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i &gt; j)</span><br><span class="line">                f[i][j] = <span class="built_in">max</span>(f[i - <span class="number">1</span>][j - <span class="number">1</span>], f[i - <span class="number">1</span>][j]) + flag;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                f[i][j] = f[i - <span class="number">1</span>][j - <span class="number">1</span>] + flag;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, f[n][i]);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="解法二"><cb>解法二</cb></h2>
<p>可以发现，只用记录睡觉的时间和好的次数，就可以判断睡眠是否很棒。</p>
<p>设 <span class="math inline">\(f(i,j)\)</span> 代表前 <span
class="math inline">\(i\)</span> 次睡眠后在 <span
class="math inline">\(j\)</span>
小时醒来时，好的睡眠次数的最大值。限制：<span class="math inline">\(1\le
i\le n, 0\le j&lt;h\)</span>。</p>
<p>状态转移方程：</p>
<ul>
<li><span class="math inline">\(f(i,j+a_i) = \max(f(i,j+a_i), f(i-1,j)
+\text{isgood}(i,j))\)</span>。</li>
<li><span class="math inline">\(f(i,j+a_i-1) = \max(f(i,j+a_i-1),
f(i-1,j) +\text{isgood}(i,j))\)</span>。</li>
</ul>
<p>时间复杂度 <span class="math inline">\(O(nh)\)</span>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n, h, l, r;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; h &gt;&gt; l &gt;&gt; r;</span><br><span class="line">    <span class="type">int</span> a[n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> dp[<span class="number">2005</span>] = &#123;&#125;;</span><br><span class="line">    <span class="type">int</span> temp[<span class="number">2005</span>] = &#123;&#125;;</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; h; j++) temp[j] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; h; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[j] &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">int</span> delta = <span class="number">0</span>, t1 = (j + a[i]) % h, t2 = (j + a[i] - <span class="number">1</span>) % h;</span><br><span class="line">                <span class="keyword">if</span> (t1 &gt;= l &amp;&amp; t1 &lt;= r)delta = <span class="number">1</span>;</span><br><span class="line">                temp[t1] = <span class="built_in">max</span>(temp[t1], dp[j] + delta);</span><br><span class="line">                delta = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (t2 &gt;= l &amp;&amp; t2 &lt;= r)delta = <span class="number">1</span>;</span><br><span class="line">                temp[t2] = <span class="built_in">max</span>(temp[t2], dp[j] + delta);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">swap</span>(dp, temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; h; j++) &#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, dp[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h1 id="problem-c"><pr>Problem C</pr></h1>
<p>给定 <span class="math inline">\(n\)</span> 个点 <span
class="math inline">\(m\)</span> 条边的有向图，边权为 <span
class="math inline">\(1\)</span>。从 <span
class="math inline">\(s\)</span> 出发到达 <span
class="math inline">\(t\)</span>，按照以下路径：<span
class="math inline">\(p_1, p_2, ..., p_k\)</span>，其中 <span
class="math inline">\(p_1=s, p_k=t,p_i\)</span> 两两不同，且保证 <span
class="math inline">\(\forall i\in[1,k-1]\)</span>，边 <span
class="math inline">\((p_i,p_{i+1})\)</span> 存在。</p>
<p>在 <span class="math inline">\(p_1\)</span>，导航事先生成一条 <span
class="math inline">\(p_1\)</span> 到 <span
class="math inline">\(t\)</span> 的最短路径。对于此路径的每个点 <span
class="math inline">\(p_i\)</span>，如果 <span
class="math inline">\(p_{i+1}\)</span>
恰好沿着导航路径行进，则导航<strong>无需重新构建最短路径</strong>，否则导航<strong>重新构建最短路径</strong>。
询问导航<strong>重新构建最短路径</strong>的可能的最小值和最大值。</p>
<p><span class="math inline">\(2≤n≤m≤2\times10^5,2≤k≤n\)</span>。</p>
<details>
<summary>
点击查看题解
</summary>
<p>在反图上跑最短路，同时统计每个点处是否存在多条最短路径<strong>在此点分叉</strong>的情况即可。</p>
<p>注意，不是统计每个点处的最短路径数量。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PII pair<span class="string">&lt;ll,ll&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> ll N = <span class="number">200005</span>;</span><br><span class="line"><span class="type">const</span> ll inf = <span class="number">1145141919810</span>;</span><br><span class="line">ll n, m, k, p[N], ans1 = <span class="number">0</span>, ans2 = <span class="number">0</span>;</span><br><span class="line">ll dis[N], cnt[N], vis[N], in[N];</span><br><span class="line">vector&lt;ll&gt; e[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CompareMin</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> PII &amp;a, <span class="type">const</span> PII &amp;b)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.second &gt; b.second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;PII, vector&lt;PII &gt;, CompareMin&gt; q;</span><br><span class="line">queue&lt;ll&gt; q2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(ll u, ll v)</span> </span>&#123;</span><br><span class="line">    e[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dij</span><span class="params">(ll st)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        dis[i] = inf;</span><br><span class="line">    dis[st] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;st, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        ll now = q.<span class="built_in">top</span>().first;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (vis[now])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        vis[now] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> to: e[now]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dis[to] &gt; dis[now] + <span class="number">1</span>) &#123;</span><br><span class="line">                dis[to] = dis[now] + <span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(&#123;to, dis[to]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(ll st)</span> </span>&#123;</span><br><span class="line">    in[st] = <span class="number">0</span>;</span><br><span class="line">    cnt[st] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        vis[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> j: e[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dis[j] == dis[i] + <span class="number">1</span>)</span><br><span class="line">                in[j]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    q<span class="number">2.</span><span class="built_in">push</span>(st);</span><br><span class="line">    <span class="keyword">while</span> (!q<span class="number">2.</span><span class="built_in">empty</span>()) &#123;</span><br><span class="line">        ll now = q<span class="number">2.f</span>ront();</span><br><span class="line">        q<span class="number">2.</span><span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (vis[now])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        vis[now] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> to: e[now]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dis[to] == dis[now] + <span class="number">1</span>) &#123;</span><br><span class="line">                cnt[to] += <span class="number">1</span>;</span><br><span class="line">                in[to]--;</span><br><span class="line">                <span class="keyword">if</span> (in[to] == <span class="number">0</span>)</span><br><span class="line">                    q<span class="number">2.</span><span class="built_in">push</span>(to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        ll u, v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        <span class="built_in">add</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    cin &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">        cin &gt;&gt; p[i];</span><br><span class="line">    <span class="built_in">dij</span>(p[k]);</span><br><span class="line">    <span class="built_in">bfs</span>(p[k]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= k; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dis[p[i - <span class="number">1</span>]] - <span class="number">1</span> == dis[p[i]]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cnt[p[i - <span class="number">1</span>]] &gt; <span class="number">1</span>)</span><br><span class="line">                ans2++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ans1++;</span><br><span class="line">            ans2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; ans2 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>
<h1 id="problem-d"><cb>Problem D</cb></h1>
<p><span class="math inline">\(t\)</span> 组数据，每一组给定一个数组
<span class="math inline">\(\{a_n\}\)</span>，问是否存在这样一个数组
<span class="math inline">\(\{b_n\}\)</span>，对于所有 <span
class="math inline">\(i∈[1,n]\)</span>，都存在一组 <span
class="math inline">\(j,k\in[1,n]\)</span>，满足 <span
class="math inline">\(a_i=b_j−b_k\)</span>。</p>
<details>
<summary>
点击查看题解
</summary>
<p>考虑将数组 <span class="math inline">\(\{b_n\}\)</span> 构造为 <span
class="math inline">\(0,±a_1,a_1±a_2,a_1±a_2±a_3,⋯,a_1±a_2±a_3±⋯±a_n\)</span>。很显然需要
<span class="math inline">\(n+1\)</span> 个数，于是只需要其中某个 <span
class="math inline">\(a_i\)</span> 能被节省下来，例如 <span
class="math inline">\(a_n=a_1±a_2±a_3±⋯±a_n-1\)</span>，这样就能节省掉一个数，使得数组
<span class="math inline">\(\{b_n\}\)</span> 的长度为 <span
class="math inline">\(n\)</span>。</p>
<p>因此，我们只需要判断某个 <span class="math inline">\(a_i\)</span>
能否表示成一系列的 <span class="math inline">\(a\)</span>
的和与差的形式，即 <span
class="math inline">\(a_i=a_{j1}±a_{j2}±a_{j3}±⋯±a_{jk}\)</span>。</p>
<p>我们只需要把式子右边的负项移到左边，式子就变成了一堆 <span
class="math inline">\(a\)</span> 加起来等于另一堆 <span
class="math inline">\(a\)</span>。</p>
<p>所以只需要二进制枚举所有可能的和，如果有相同的和，则说明存在这样的式子。
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> b[<span class="number">2000005</span>] = &#123;&#125;;</span><br><span class="line"><span class="comment">// int dp[200005] = &#123;&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> a[n + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> sum1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((i &amp; (<span class="number">1</span> &lt;&lt; j)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                sum1 += a[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        b[sum1 + <span class="number">1000000</span>]++;</span><br><span class="line">        <span class="keyword">if</span> (b[sum1 + <span class="number">1000000</span>] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;YES&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;NO&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">        cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">        cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> t;</span><br><span class="line">        cin &gt;&gt; t;</span><br><span class="line">        <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">            <span class="built_in">solve</span>();</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 时间复杂度 <span
class="math inline">\(O(2^n)\)</span>。</p>
</details>
<h1 id="problem-e"><pr>Problem E</pr></h1>
<p>你有一个长度为 <span class="math inline">\(n\)</span>
的字符串，字符集为小写英文字母 <span
class="math inline">\(C\)</span>。你可以选择它的任意一个子序列。对于一个长度为
<span class="math inline">\(m\)</span> 的子序列，选出它的花费是 <span
class="math inline">\(n−m\)</span>，也就是你需要删掉的字符数量。你的任务是选出来
<span class="math inline">\(k\)</span>
个<strong>不同</strong>的子序列，使得总花费最小。输出这个最小花费。如果选不出
<span class="math inline">\(k\)</span> 个，输出 <span
class="math inline">\(−1\)</span>。</p>
<p><span class="math inline">\(1≤n≤100,1≤k≤10^{12}\)</span>。</p>
<details>
<summary>
点击查看题解
</summary>
<p>设 <span class="math inline">\(f(i,j,k)\)</span> 表示考虑前 <span
class="math inline">\(i\)</span> 个字符，长度为 <span
class="math inline">\(j\)</span> 且最后一个字母为 <span
class="math inline">\(k\)</span> 的不同字符串数量。</p>
<p>设第 <span class="math inline">\(i\)</span> 个字符为 <span
class="math inline">\(a_i\)</span>。状态转移方程： <span
class="math display">\[
\forall l\in C,l\not=a_i, f(i,j,l)=f(i-1,j,l)
\]</span></p>
<p><span class="math display">\[
f(i,j,a_i)=\sum_{k\in C} f(i-1,j-1,k)
\]</span></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PII pair<span class="string">&lt;ll,ll&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> ll N = <span class="number">105</span>, M = <span class="number">30</span>;</span><br><span class="line">ll n, k, f[N][N][M], a[N], ans = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">string s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k &gt;&gt; s;</span><br><span class="line">    s = <span class="string">&#x27; &#x27;</span> + s;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        a[i] = s[i] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (ll j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">                f[i][j][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">1</span>) &#123;</span><br><span class="line">                f[i][j][a[i]] = <span class="number">1</span>; <span class="comment">//y</span></span><br><span class="line">                <span class="keyword">for</span> (ll k = <span class="number">1</span>; k &lt;= <span class="number">26</span>; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (k == a[i])</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    f[i][j][k] = f[i - <span class="number">1</span>][j][k]; <span class="comment">//n</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (ll k = <span class="number">1</span>; k &lt;= <span class="number">26</span>; k++) &#123;</span><br><span class="line">                    f[i][j][a[i]] += f[i - <span class="number">1</span>][j - <span class="number">1</span>][k]; <span class="comment">//y</span></span><br><span class="line">                    <span class="keyword">if</span> (k == a[i])</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    f[i][j][k] = f[i - <span class="number">1</span>][j][k]; <span class="comment">//n</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (ll i = n; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (ll j = <span class="number">1</span>; j &lt;= <span class="number">26</span>; j++) &#123;</span><br><span class="line">            f[n][i][<span class="number">0</span>] += f[n][i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt + f[n][i][<span class="number">0</span>] &gt;= k) &#123;</span><br><span class="line">            ans += (k - cnt) * (n - i);</span><br><span class="line">            cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt += f[n][i][<span class="number">0</span>];</span><br><span class="line">        ans += f[n][i][<span class="number">0</span>] * (n - i);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <categories>
        <category>ACM</category>
        <category>题解</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>最大公约数</tag>
        <tag>动态规划</tag>
        <tag>最短路</tag>
        <tag>思维题</tag>
      </tags>
  </entry>
  <entry>
    <title>25暑期1</title>
    <url>/2025/08/08/25%E6%9A%91%E6%9C%9F1/</url>
    <content><![CDATA[<h1 id="problem-e"><pr>Problem E</pr></h1>
<p><span class="math inline">\(T\)</span> 组询问，给两个数 <span
class="math inline">\(a,b\)</span>，询问 <span
class="math inline">\(|a^2-b^2|\)</span> 的值在集合 <span
class="math inline">\(C\)</span> 中为第几小，<span
class="math inline">\(C=\{|x^2-y^2|\mid x,y\in
N^*,x\not=y\}\)</span>。例如 <span class="math inline">\(3,5,7,8,9\in
C\)</span>，且为前五小。</p>
<p><span
class="math inline">\(1≤T≤10^4,1≤a,b≤10^9,a\not=b\)</span>。</p>
<details>
<summary>
点击查看题解
</summary>
<p>设 <span class="math inline">\(a&gt;b\)</span>。<span
class="math inline">\(a^2-b^2=(a+b)(a-b)\)</span>。则 <span
class="math inline">\(a+b\)</span> 和 <span
class="math inline">\(a-b\)</span> 同奇偶。可推出 <span
class="math inline">\(a^2-b^2\bmod 4 \not=2\)</span>。</p>
<p>又 <span class="math inline">\(\forall\text{ }m_1\ge 1,\exists\text{
}x_1,y_1\in N^*\)</span>，满足 <span
class="math inline">\(x_1-y_1=m_1\)</span>； <span
class="math inline">\(\forall\text{ }m_2\ge 3,\exists\text{ }x_2,y_2\in
N^*\)</span>，满足 <span
class="math inline">\(x_2+y_2=m_2\)</span>。</p>
<p>则 <span class="math inline">\(C=\{n\mid
n\ge3,n\not=4,n\bmod4\not=2\}\)</span>。据此可计算排名。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PII pair<span class="string">&lt;ll,ll&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    ll T, a, b;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        a = <span class="built_in">abs</span>(a * a - b * b);</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">3</span>)</span><br><span class="line">            cout &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">            cout &lt;&lt; (a / <span class="number">4</span> - <span class="number">1</span>) * <span class="number">3</span> + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a % <span class="number">4</span> == <span class="number">1</span>)</span><br><span class="line">            cout &lt;&lt; (a / <span class="number">4</span> - <span class="number">1</span>) * <span class="number">3</span> + <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a % <span class="number">4</span> == <span class="number">3</span>)</span><br><span class="line">            cout &lt;&lt; (a / <span class="number">4</span> - <span class="number">1</span>) * <span class="number">3</span> + <span class="number">3</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <categories>
        <category>ACM</category>
        <category>题解</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>同余</tag>
      </tags>
  </entry>
  <entry>
    <title>【解析几何】齐次化联立</title>
    <url>/2025/08/05/%E3%80%90%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95%E3%80%91%E9%BD%90%E6%AC%A1%E5%8C%96%E8%81%94%E7%AB%8B/</url>
    <content><![CDATA[<p>点击“阅读全文”以观看 PDF。</p>
<span id="more"></span>
<div class="pdf-container" data-target="/assets/【解析几何】齐次化联立.pdf" data-height="600px"></div>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>小功能展示</title>
    <url>/2025/08/02/%E5%B0%8F%E5%8A%9F%E8%83%BD%E5%B1%95%E7%A4%BA/</url>
    <content><![CDATA[<div class="chaffle" data-lang="zh">
“她好可爱啊！”
</div>
<details>
<summary>
请点击
</summary>
<p>
就算风吹散了冰雪，想念也会留存下来。<br />鼠标点击会展开此内容。
</p>
</details>
<span id="more"></span>
<hr>
<p>提示：<shady title="你知道的太多了">就算风吹散了冰雪，想念也会留存下来。鼠标移在此上会显示此内容</shady>。仿自：<a
href="https://zh.moegirl.org.cn/">萌娘百科</a>。</p>
<p>由于本句话被高度加密，即使使用小刀或者<black title="你不知道的太多了">除了被选中</black>也无法划开屏幕上的部分黑幕。</p>
<p>提示：<blur>没错，你近视了。</blur><invsb>以至于你都看不见这句话。</invsb></p>
<p><invsb>不用换眼镜了。你已经看不见了。</invsb></p>
<hr>
<fieldset>
<legend>温馨提示</legend>
<p>
提示点什么好呢？让我想想……
</p>
</fieldset>
<hr>
<p>就算<tag>风</tag>吹散了<tag>冰雪</tag>，<tag>想念</tag>也会<tag>留存</tag>下来。</p>
<p>你可以加<tag>不止三个</tag>标签。不过太长会<tag style="background: orange">溢出</tag>。</p>
<p>温馨提示：提示点什么好呢<tiny>真的没有可提示的,,,</tiny></p>
<hr>
<!--滚动方向 direction 4个值 up down left right  默认从右向左-->
<p><marquee direction="up">我向上滚动</marquee></p>
<!--3个值 scroll-循环滚动 slide-只滚动一次 alternate-来回滚动  默认循环滚动-->
<p><marquee behavior="slide">我只滚动一次</marquee></p>
<!--值越大，滚动速度越快 一般5-10比较适宜消息观看-->
<p><marquee scrollamount="20">我是速度为20的滚动</marquee></p>
<!--值越大，滚动速度越慢，通常不设置-->
<p><marquee scrolldelay="110">我延迟滚动</marquee></p>
<!-- 默认值-1或infinite 表示无限循环滚动 loop="数值" 表示滚动相应的次数-->
<p><marquee loop="2">我是loop循环滚动</marquee></p>
<!--宽100px 高90px 背景色为#f5f5f5的滚动区域-->
<marquee width="100" height="90" bgcolor="#f5f5f5" >
<p>
我是滚动1
</p>
<pre><code>&lt;p&gt;我是滚动2&lt;/p&gt;
&lt;p&gt;我是滚动3&lt;/p&gt;</code></pre>
<p></marquee></p>
<!--滚动空间 hspace-水平边距 vspace-垂直边距-->
<marquee width="50" hspace="20" vspace="10" >
<p>
我是滚动1
</p>
<pre><code>&lt;p&gt;我是滚动2&lt;/p&gt;
&lt;p&gt;我是滚动3&lt;/p&gt;</code></pre>
<p></marquee></p>
<!--鼠标悬停，滚动停止   鼠标离开，滚动继续-->
<p><marquee onmouseover="this.stop()" onmouseout="this.start()">
我是滚动 </marquee></p>
<hr>
<p><ruby> 那 <rt>n</rt> 没 <rt>m</rt> 事 <rt>s</rt> 了 <rt>l</rt>
</ruby></p>
<p><ruby> 那没事了 <rt>nmsl</rt> </ruby></p>
<br>
<hr>
<a class="btn" href="https://github.com/cooI-breeze" title="GitHub"><i class="fab fa-github fa-fw fa-lg"></i>GitHub</a>
<br>
<hr>
<iframe data-feature="fetch" src="https://caniuse.bitsofco.de/embed/index.html?feat=fetch&periods=current&accessible-colours=false" frameborder="0" width="100%" height="400px"></iframe>
<p><br></p>
<blockquote class="blockquote-center">
<p>就算风吹散了冰雪，想念也会留存下来。</p>

</blockquote>
<p><br></p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img data-src="https://cdn.jsdelivr.net/gh/pmlrin/PicGo/bg.jpg" /></div><div class="group-picture-column"><img data-src="/images/avatar.jpg" /></div><div class="group-picture-column"><img data-src="https://cdn.jsdelivr.net/gh/pmlrin/PicGo/a2.jpg" /></div></div><div class="group-picture-row"><div class="group-picture-column"><img data-src="/images/avatar2.jpg" /></div><div class="group-picture-column"><img data-src="https://cdn.jsdelivr.net/gh/pmlrin/PicGo/new-welcome.jpg" /></div></div></div>
<hr>
<p>Lorem <mark class="label ">ipsum</mark> <mark class="label primary">dolor sit</mark> amet, consectetur <mark class="label success">adipiscing elit,</mark> sed
<mark class="label info">do eiusmod</mark> tempor incididunt ut labore et dolore magna aliqua.</p>
<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/avatar.jpg"></object>
<p>Cool Pomelo</p><p>就算风吹散了冰雪，想念也会留存下来。</p>
<a href="https://pmlrin.github.io/"></a>
</div></div>
<hr>
<pre>
<code class="mermaid">
sequenceDiagram
Alice-&gt;&gt;John: Hello John, how are you?
loop Healthcheck
    John-&gt;&gt;John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John--&gt;&gt;Alice: Great!
John-&gt;&gt;Bob: How about you?
Bob--&gt;&gt;John: Jolly good!
</code>
</pre>
<div class="note info"><h4 id="欢迎">欢迎！</h4>
<p>就算风吹散了冰雪，想念也会留存下来。</p>
</div>
<hr>
<div class="pdf-container" data-target="/assets/【解析几何】齐次化联立.pdf" data-height="500px"></div>
<hr>
<div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><a href="#1-1">Tab 1</a></li><li class="tab"><a href="#1-2">Tab 2</a></li><li class="tab"><a href="#1-3">Tab 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="1-1"><p><strong>This is Tab 1.</strong></p>
<p>Lorem <mark class="label ">ipsum</mark>
<mark class="label primary">dolor sit</mark> amet, consectetur
<mark class="label success">adipiscing elit,</mark> sed
<mark class="label info">do eiusmod</mark> tempor incididunt ut labore
et dolore magna aliqua.</p></div><div class="tab-pane" id="1-2"><p><strong>This is Tab 2.</strong></p>
<p>就算风吹散了冰雪，想念也会留存下来。</p></div><div class="tab-pane" id="1-3"><p><strong>This is Tab 3.</strong></p>
<p>由于本句话被高度加密，即使使用小刀或者<black title="你不知道的太多了">除了被选中</black>也无法划开屏幕上的部分黑幕。</p></div></div></div>
<hr>
<video src="/assets/并猹集叉询.mp4" preload="metadata" controlslist="nodownload" controls playsinline poster=""></video>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>【解析几何】准线与焦点</title>
    <url>/2024/08/06/%E3%80%90%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95%E3%80%91%E5%87%86%E7%BA%BF%E4%B8%8E%E7%84%A6%E7%82%B9/</url>
    <content><![CDATA[<p>在学习圆锥曲线的过程中，我们必然会遇到诸多有关焦点这个特殊点的题目。比如下面这道：</p>
<p><span class="math display">\[
\text{设}F_1,F_2\text{分别为椭圆}\frac{x^2}{3}+y^2=1\text{的左、右焦点，点}A,B
\]</span> <span class="math display">\[
\text{在椭圆上，若}\overrightarrow{F_1A}=5\overrightarrow{F_2B},\text{则点A的坐标是}()
\]</span></p>
<span id="more"></span>
<p><img data-src="https://cdn.jsdelivr.net/gh/Yurchiu/PicGo/90e0c08c397e28f619fa0dcbc8bad280.png" /></p>
<p>看到这里，很多同学可能就会选择联立求解，如下。</p>
<p><strong>解法一：</strong> <span class="math display">\[
\text{由于对称性将}\overrightarrow{F_2B}\text{平移到左焦点，设}A(x_1,y_1),B(x_2,y_2)
\]</span></p>
<p><span class="math display">\[
\text{由于直线}AB_1\text{过左焦点，故设}\text{直线}AB_1:x=my-\sqrt{2}.
\]</span></p>
<p><span class="math display">\[
\text{联立}
\begin{cases}
x=my-\sqrt{2}\\
x^2+3y^2=3
\end{cases}
\Longrightarrow(my-\sqrt{2})^2+3y^2=3
\]</span></p>
<p><span class="math display">\[
\text{则}
\begin{cases}
y_1=-5y_2\\
y_1+y_2=-\frac{2\sqrt{2}m}{m^2+3}\\
y_1y_2=-\frac{1}{m^2+1}
\end{cases}
\Rightarrow
\]</span></p>
<p><span class="math display">\[
\left\{
    \begin{array}{c}
       y_1=-\frac{m}{\sqrt{2}(m^2+3)} \\
       y_2=\frac{5m}{\sqrt{2}(m^2+3)}\\
    \end{array}
\right.
\Rightarrow
\]</span></p>
<p><span class="math display">\[
\frac{5m^2}{2(m^2+3)}=1
\Rightarrow
\]</span></p>
<p><span class="math display">\[
m=\pm\sqrt{2}
\]</span></p>
<p><span class="math display">\[
\text{所以点}A(0,\pm1)
\]</span></p>
<p>在这里看起来很简单，但计算量还是不小的。</p>
<p>考虑到 <span class="math inline">\(AB_1\)</span>
是椭圆的焦点弦，我们可以利用焦半径公式。这里就不得不提到圆锥曲线的统一定义了。</p>
<p><strong>圆锥曲线的统一定义</strong>：到定点 <span
class="math inline">\(F\)</span> 的距离与到定直线 <span
class="math inline">\(l\)</span> 的距离（<span
class="math inline">\(F\)</span> 不在 <span
class="math inline">\(l\)</span> 上）的比 <span
class="math inline">\(e\)</span> 是常数的点的轨迹叫作圆锥曲线。 <span
class="math display">\[
\text{如图，椭圆}\frac{x^2}{a^2}+\frac{y^2}{b^2}=1,F_1,F_2\text{为其左右焦点，}
\]</span></p>
<p><span class="math display">\[
\text{直线}l:x=-\frac{a^2}{c}\text{为其左准线,}AC\bot l,\text{则有}\mid
AF_1\mid=e\mid AC\mid
\]</span></p>
<p>实际上这也很好“证明”<del>（证明一个“定义”有种儿子生爸爸矛盾了）</del></p>
<p><span class="math display">\[
\begin{aligned}
\text{设点}A(x_0,y_0),\text{则}|AF_1|&amp;=\sqrt{(x_0+c)^2+y_0^2}\\
&amp;=\sqrt{(1-\frac{b^2}{a^2})x_0^2+2cx_0+c^2+b^2}\\
&amp;=\frac{1}{a}\sqrt{c^2x_0^2+2ca^2x_0+a^4}\\
&amp;=\frac{1}{a}\sqrt{(cx_0+a^2)}=a+ex_0
\end{aligned}
\]</span></p>
<p><span class="math display">\[
\text{而}|AC|=x_0+\frac{a^2}{c}=\frac{ex_0+a}{e}=\frac{|AF_1|}{e}
\]</span></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Yurchiu/PicGo/3d233a1900a8ee269130546960088a14.png" /></p>
<p>一般来说课本内容或一些资料就到此为止了，而我们学习抛物线时会有这么一个结论：</p>
<p><span class="math display">\[
AB\text{是过抛物线}y^2=2px\text{的一条直线，F为抛物线焦点，}
\]</span></p>
<p><span class="math display">\[
\text{A在x轴上方，}\theta\text{为直线AB的倾斜角，则有}
\]</span></p>
<p><span class="math display">\[
|AF|=\frac{p}{1-\cos\theta}
\]</span></p>
<p><span class="math display">\[
|BF|=\frac{p}{1+\cos\theta}
\]</span></p>
<p><span class="math display">\[
|AB|=\frac{2p}{\sin^2\theta}
\]</span></p>
<p><span class="math display">\[
\frac{1}{|AF|}+\frac{1}{|BF|}=\frac{2}{p}
\]</span></p>
<p>那么是不是所有圆锥曲线都有类似性质呢，根据圆锥曲线统一定义我们推断这肯定是存在的。</p>
<p><span class="math display">\[
\text{如上图，对于一个椭圆，设AB的倾斜角为}\alpha,|AF_1|=m,\text{则}|AE|=m\cos\alpha
\]</span></p>
<p><span class="math display">\[
|AC|=\frac{a^2}{c}-c+m\cos\alpha=\frac{am}{c}\Longrightarrow
m=\frac{b^2}{a-c\cos\alpha}
\]</span></p>
<p><span class="math display">\[
\text{即}|AF_1|=\frac{b^2}{a-c\cos\alpha}
\]</span></p>
<p><span class="math display">\[
\text{同理可得}|BF_1|=\frac{b^2}{a+c\cos\alpha}
\]</span></p>
<p><span class="math display">\[
|AB|=\frac{2ab}{a^2-c^2\cos^2\alpha},\frac{1}{|AF_1|}+\frac{1}{|BF_1|}=\frac{2a}{b^2}
\]</span></p>
<p><span class="math display">\[
\text{同理，对于双曲线}\frac{x^2}{a^2}-\frac{y^2}{b^2}=1,\text{过其左焦点F的直线AB，有}
\]</span></p>
<p><span class="math display">\[
|AF|=\frac{b^2}{a+c\cos\alpha},|BF|=\frac{b^2}{a-c\cos\alpha},|AB|=\frac{2ab}{a^2-c^2\cos^2\alpha},\frac{1}{|AF_1|}+\frac{1}{|BF_1|}=\frac{2a}{b^2}
\]</span></p>
<p><span class="math display">\[
\text{注意AB交于双曲线左支，所以}|\cos\alpha|\leq\frac{a}{c}
\]</span></p>
<p>利用该结论，再看上面那道题：</p>
<p><span class="math display">\[
\text{设}F_1,F_2\text{分别为椭圆}\frac{x^2}{3}+y^2=1\text{的左、右焦点，点}A,B
\]</span></p>
<p><span class="math display">\[
\text{在椭圆上，若}\overrightarrow{F_1A}=5\overrightarrow{F_2B},\text{则点A的坐标是}()
\]</span></p>
<p><strong>解法二：</strong> <span class="math display">\[
\begin{aligned}
|F_1A|=5|F_1B_1|&amp;\Longrightarrow\frac{1}{\sqrt{3}-\sqrt{2}\cos\theta}=\frac{5}{\sqrt{3}+\sqrt{2}\cos\theta}\\
&amp;\Longrightarrow\cos\theta=\frac{\sqrt{6}}{3}=\frac{c}{a}\\
\end{aligned}
\]</span></p>
<p><span class="math display">\[
\therefore A(0,\pm1)
\]</span></p>
<p>这样计算甚至降到了口算量级，下面我们再来看这样一道题。</p>
<p><span class="math display">\[
\text{设点P为椭圆C：}\frac{x^2}{6}+\frac{y^2}2=1\text{上任意一点，过两焦点}F_1,F_2\text{的弦分别为PA,PB,设}
\]</span></p>
<p><span class="math display">\[
\overrightarrow{PF_1}=\lambda_1\overrightarrow{F_1A},\overrightarrow{PF_2}=\lambda_2\overrightarrow{F_2B},\text{问}\lambda_1+\lambda_2\text{是否是定值，并证明}
\]</span></p>
<p>这里我们直接利用焦点弦结论</p>
<p><span class="math display">\[
\because\frac{1}{|AF_1|}+\frac{1}{|PF_1|}=\frac{1+\lambda_1}{|PF_1|}=\frac{2a}{b^2}=\sqrt{6}\]</span></p>
<p><span class="math display">\[
\frac{1}{|AF_2|}+\frac{1}{|PF_2|}=\frac{1+\lambda_2}{|PF_2|}=\frac{2a}{b^2}=\sqrt{6}
\]</span></p>
<p><span class="math display">\[
\therefore\sqrt{6}(|PF_1|+|PF_2|)=2+\lambda_1+\lambda_2=2\times6=12
\]</span></p>
<p><span class="math display">\[
\therefore\lambda_1+\lambda_2=10
\]</span></p>
<p>几乎是“秒杀”，那么我们来看一道高考题。</p>
<p><span class="math display">\[
\text{已知椭圆}\frac{x^2}{3}+\frac{y^2}{2}=1\text{的左右焦点分别为}F_1，F_2\text{,过点}F_1\text{的直线交椭圆于B,D两点，过点}
\]</span></p>
<p><span class="math display">\[
F_2\text{的直线交椭圆于A,C两点，且}AC\bot
BD,\text{垂足为P,求四边形ABCD的面积最小值。}
\]</span></p>
<p><span class="math display">\[
\text{设AC,BD的倾斜角分别为}\alpha,\beta,\text{看到垂直的条件，我们不妨设}\alpha=\beta+\frac{\pi}{2}
\]</span></p>
<p><span class="math display">\[
\text{那么}\cos\alpha=-\sin\beta
\]</span></p>
<p>所以</p>
<p><span class="math display">\[
\begin{aligned}
S&amp;=\frac{1}{2}|AC||BD|\\
&amp;=\frac{2a^2b^4}{(a^2-c^2\cos^2\beta)(a^2-c^2\sin^2\beta)}\\
&amp;=\frac{24}{6+\frac{1}{4}sin^22\beta}\\
&amp;\leq\frac{96}{25}
\end{aligned}
\]</span></p>
<p>此外利用好点到焦点焦点和点到准线还能处理一些角的问题，如下。</p>
<p><span class="math display">\[
\text{已知抛物线}y^2=2px(p&gt;0)\text{的焦点为F，准线为l}
\]</span></p>
<p><span class="math display">\[
\text{l与x轴交点为M,过点F的直线AB交抛物线于AB两点}
\]</span></p>
<p><span class="math display">\[
A\text{在x轴上方,}∠AMB=\frac{\pi}{3},|AF|=\sqrt{2}+\sqrt{3}，\text{试求抛物线方程.}
\]</span></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Yurchiu/PicGo/fa46f26bbae76cecd00255dc64a2a596.png" /></p>
<p><span class="math display">\[
\text{如图设}\angle AMF=\varphi,\text{直线AB的倾斜角为}\beta
\]</span></p>
<p><span class="math display">\[
\text{则有}\sin\beta=\frac{CM}{AF}=\frac{CM}{AC}=\tan\varphi
\]</span></p>
<p><span class="math display">\[
\text{同理}\sin\beta=\tan\angle BMF,\text{所以}\angle AMF=\angle BMF
\]</span></p>
<p><span class="math display">\[
\therefore\sin\beta=\frac{\sqrt{3}}{3},|AF|=\frac{p}{1-\cos\beta}=\sqrt{2}+\sqrt{3}
\]</span></p>
<p><span class="math display">\[
\text{解得：}p=\frac{\sqrt{3}}{3},\text{所以抛物线方程为：}y^2=\frac{2\sqrt{3}}{3}x
\]</span></p>
<p>同样椭圆双曲线也有类似结论，证明也很简单，大家不妨自行尝试推导。</p>
<p>在圆锥曲线部分，有关焦点的问题可以说是俯拾即是，利用上述结论可以迅速解决大部分这类问题，节省大量时间，但同时不要忘记对于基础联立韦达的解法对一般情况进行求解，否则遇到非焦点问题可就是“提笔四顾心茫然”，感谢您的阅读，希望这篇文章能够帮助到你。</p>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>《幽默报 11》</title>
    <url>/2024/08/02/%E3%80%8A%E5%B9%BD%E9%BB%98%E6%8A%A5%2011%E3%80%8B/</url>
    <content><![CDATA[<p>这玩意出到第十一期，在座的各位都有责任。往期幽默报：<a
href="https://yz-hs.github.io/categories/%E6%B0%B4/%E5%B9%BD%E9%BB%98%E6%8A%A5/"
class="uri">https://yz-hs.github.io/categories/%E6%B0%B4/%E5%B9%BD%E9%BB%98%E6%8A%A5/</a>。</p>
<span id="more"></span>
<h1 id="section">1</h1>
<p>激进派和保守派，激进派语言和行动都很激进，保守派认为激进派太保守了。</p>
<p>蟹老板：你被开除了 海绵宝宝：蟹老板 蟹老板：不用谢[doge]</p>
<p>这是一种 积 极的创新态度 这是一种 你 不会懂的热爱 这是一种 太
过超前的艺术 这是一种 美 丽的人生意境</p>
<p>这可不是什么红石，这种东西叫做蓝莓，俗称苹果。生长在撒哈拉沙漠的雨林地带。因外形酷似企鹅，所以我们又喜欢叫他北极熊。你们这些人，连仙人掌都不知道，就不要乱说他是西瓜好吗？再说一遍这个橘子叫做猕猴桃</p>
<p>刚才去吃火锅，看见火锅店的墙上提醒，羊是自己养的，菜是自己种的油是自己榨的，提醒顾客放心使用。买单的时候我，悄悄告诉老板，钱是我自己印的，请放心使用，老板追了我好几条街没追上，真有意思，腿是我自己长的，想往哪里跑就往哪里跑</p>
<p>刚才去吃火锅，看见【火锅店老板】操纵提线，让它们作响：“我向【自己养的羊】祈求，向【自己种的菜】祈求，向【自己榨的油】祈求，怎么不推荐我的【三合一套餐】！只需要你那小小的【买单】！”买单的时候我，悄悄告诉老板：“我向【自己印的钱】祈求，多拿点！”，老板追了像我这样的【史莱姆】好几条【女王豪宅】走廊没追上，这个实验真有意思，老板向【皮皮斯】祈求，想往哪里扔就往哪里仍。【光之苠】，如果你下滑如【流水】，那我祝你现在有机会返回1997成为【【大人物】】！</p>
<p>□□□□，□□《□□》□□□□□□□□□□□□□□□□□□□□□□。□□□□□□□□□□「□□□」□□□□□，□□□，□□□□□□□□□□「□□□」，□□□□□□。□□□□□□□□「□□□」□□□□□，□□□□□□□□□□□□□、□□□□□□□□，□□□□□□□□□，□□□□□□□——□□，□□□□「□□」□□□。</p>
<p>正常人做饭： <code>(没放盐,放多了)</code> 初学者做饭：
<code>[没放盐,放多了]</code> 我做饭： <code>&#123;没放盐,放多了&#125;</code></p>
<h1 id="section-1">2</h1>
<p>1、曾经有教育家做了一个实验，给中国孩子和美国孩子一杯水，让他们不用火就让水沸腾起来。中国孩子拿水在太阳下晒了一天，没有如愿。而聪明的美国孩子拿来四杯25度的水混合到一起，轻松地把水温升到了沸腾的100度。僵化的思维，落后的体制永远无法培养有创新意识的大科学家。</p>
<p>2、曾经有教育家做了一个实验，给中国孩子和美国孩子一杯水，让他们不用火就让水沸腾起来。中国孩子拿来四杯25度的水混合到一起，轻松地把水温升到了沸腾的100度。而朴实的美国孩子拿着水在太阳下晒着，静静等待，最终水也升到了100度。虽然美国孩子输了，但是虽败犹荣，因为美国教育下的孩子诚实而有品质，从来不会耍小聪明。只有这样的孩子，以后才能成为正直的人。</p>
<p>3、
曾经有教育家做了一个实验，给一群中国孩子和一群美国孩子一人一杯水，让他们不用火就让水沸腾起来。中国孩子都把水放在太阳底下晒了一天也没到100度，而聪明的美国孩子们在一起经过商讨以后，把水混在了一块，刚好四杯25度的水混合成了100度。僵化的思维，落后的体制永远无法培养有创新意识的大科学家，也永远无法培养出有合作意识、互助精神的青年。</p>
<p>4、曾经有教育家做了一个实验，给一群中国孩子和一群美国孩子一人一杯水，让他们不用火就让水沸腾起来。中国孩子在一起经过商讨以后，把水混在了一块，刚好四杯25度的水混合成了100度。而美国孩子都把水放在太阳底下晒了一天，终于把水温升到了100度。中国的孩子永远学不会自己解决问题，而总是想依赖群体的力量，而美国孩子能够独立自主，自力更生，这样的民族才有希望。</p>
<p>5、
曾经有教育家做了一个实验，给中国孩子和美国孩子一杯水，让他们不用火就让水沸腾起来。中国孩子却在太阳下把水晒了一整天，非要把水温升到100度不可，不然就不回家吃饭。最终还是失败了。美国孩子从小就懂得知足与放弃，而中国的孩子在填鸭教育的影响下，依旧愚蠢地执着坚持不可能的事情。这样永远也培养不出大科学家。</p>
<p>6、曾经有教育家做了一个实验，给中国孩子和美国孩子一杯水，让他们不用火就让水沸腾起来。中国孩子直接认输了。而美国孩子偷来他爸爸的勃朗宁
一下子把教育家毙了，从此再也没有被教育家研究的烦恼了。从小培养反抗强权的意识，比任何教育都重要。</p>
<h1 id="section-2">3</h1>
<p>一位少女在旅途中意外发现了平行时空中基于无生源论诞生的另一个自己，短暂的初次见面后两人的分离使少女踏上了寻找自我和真相的旅途，重重苦寻和错会后两人终于再次相遇并发现了少女诞生的真相，两位少女在星空下许诺要永远陪伴对方不离不弃，少女的身世最终或许只有她“一人”知晓……</p>
<p>在废墟之中，我遇见了她。</p>
<p>四周毫无生机
，锈蚀的气息弥漫着，管道拐角处的水滴声是我唯一听见的声音。</p>
<p>我漫无目的地摸索。</p>
<p>在巨大的结构建筑中央，我发现一个若隐若现的身影。</p>
<p>水滴仍然不停歇地落下，宛如淅淅沥沥的春雨，给这终焉的世界增添了少许的生机。</p>
<p>在她的叙述中，我看见了无数被珍藏的记忆。</p>
<p>人们相遇，相知，再到别离。</p>
<p>无论是美好抑或悲伤，都是世界曾经的记忆与生命。</p>
<p>“或许我们可以这样一直走下去。”</p>
<p>“新生的世界，在此萌芽。”</p>
<h1 id="section-3">4</h1>
<p>那些想要自杀而犹豫不决的人，其实是在经受着一场地狱之火的烧灼。</p>
<p>人的本能就是生存，要么为何害怕高高的楼层呢？</p>
<p>凡事都需要动机，比如利益，比如快感，比如精神失常。</p>
<p>从自杀的念头，到自杀的事实，是一个动机积累和抗衡的过程。比如，对自己的经济状况、家庭、性别、地位不满等，可以作为自杀的理由。家人的牵挂、生活的不舍等，可以作为活下来的理由。它们积累，抗衡，把你来回拉拽。很痛苦，不是吗？</p>
<p>当你走向窗台，低头看着或车水马龙，或平静宁和的世界，恐惧就侵占了你的内心。所谓恐高症，其实来源于人类的本能。这是你的大敌，因为是它阻止了你自杀，让你卡在鬼门关，让你受地狱之火的烧灼。这是活下来的最大的理由，没有之一。</p>
<p>于是，你拼命寻找自杀的理由。药物滥用，摧毁自己的身体；乱交，败坏自己的人格；反社会行为，放弃自己的意义。</p>
<p>哦，不，你还是打败不了那生存的本能。那窗台已经被踏上了无数次，见证了你的无数次煎熬。似乎，那窗台是专门给你准备的历练之地。</p>
<p>你想，为什么要毁掉自己呢？我受不了一心想死却不敢了结自己所带来的煎熬。这就是那地狱之火。那并非常人之可胜受，它让你浑浑噩噩，让你乱麻一团，让你痛苦万分。为什么要毁掉自己呢？因为自杀的念头已然驱之不去，活下去的欲望与之共存。一山不容二虎，二虎会将你折磨至疯狂。助长吧，自杀吧。</p>
<p>一天晚上，你又来到窗台，依旧下不去决心。希望一阵风把你刮下高楼的念头，想必是有的吧。如果那样如果自杀成功，有什么意义呢？</p>
<p>呵呵，人类，真是精妙啊。</p>
<p>那些在窗台的人，正在接受地狱之火的烧灼。无论过后决定是生是死，他们都是勇士，绝非懦夫。</p>
<p>没人想悄无声息地死。那些寻死的人，其实是为了摆脱痛苦，否则他们也不会抗争人类的本能。他们想要留下存在的痕迹。遗书，聊天记录，事迹……
他们是要延缓第二次死亡和第三次死亡的来临。“死而不亡者寿”，就是这个道理吧。</p>
<p>所以，自杀又何尝不等同于寻求生存呢？</p>
<p>深夜发病，观点激进，勿在意。</p>
<h1 id="section-4">5</h1>
<p>分享一下治疗玉玉症的中药方子，个人总结出来的，非常有效，谨供参考</p>
<p>周一去麦邓劳中医馆，老字号中医馆，也有很多网友推荐，不多赘述 推荐
灀棘治湿汗煲150克，红篼槟80克，盅枢调110克，必要时辅以麦楦枫一剂</p>
<p>周二或者周三去打美乐中医理疗中心，这家是专门做脾飒的，属于是后起之秀，个人认为品质优于弼圣窠
推荐 孛茛多多肉橡粉松脾飒 12寸 喜瓣牙风晴香苌肉姜脾飒 12寸
辅以菠萝蒎2皿</p>
<p>周四去恳悳基中药房，这家的药材品质好是好，但是有些良方只能星期四拿到，每次去都人满为患，建议提前预定
推荐 蒲柿淡榙 6支 热蜡襄古棘 15支</p>
<h1 id="section-5">6</h1>
<p>你至少需要先填写《<strong>关于修改生死簿的申请表</strong>》、《<strong>关于修改生死簿的情况说明</strong>》、《<strong>关于修改生死簿具体问题的报告</strong>》，提交天庭秘书处并耐心等待10个工作日，收到一份《<strong>关于你府申请修改生死簿问题的批复</strong>》。</p>
<p>《批复》中明确要求：</p>
<p>一、高度重视此次生死簿修改问题；</p>
<p>二、统一思想、抓好落实，切实严把生死簿修改关，通过修改生死簿提高地府业务工作水平；</p>
<p>三、紧跟天庭党委工作指导思想，把握仙界年度发展蓬勃势头，把修改生死簿工作提高到仙界整体工作落实的高度上来；</p>
<p>四、落实责任、具体到人，对修改生死簿中各方面具体责任要落实到位；</p>
<p>五、整理汇总、请示汇报，在修改生死簿工作推进的全环节中，要与天庭党委随时保持沟通；</p>
<p>六、数字赋能、提高效率，重视数字化管理工作在生死簿修改中的作用，提高生死簿修改工作效能。</p>
<p>地府在接到《批复》后，要及时召开《<strong>关于修改生死簿工作任务部署会</strong>》，召集五方鬼帝、十殿阎罗、六案功曹、六司主事出席，东岳大帝、地藏王菩萨列席，各鬼差参加。</p>
<p><img data-src="https://pic1.zhimg.com/80/v2-28ec981e74851477be21b116c7e7969d_720w.webp?source=2c26e567" /></p>
<p><img data-src="https://picx.zhimg.com/80/v2-9657e88c97a985817a304da215b9c14a_720w.webp?source=2c26e567" /></p>
<p>会议在雄壮的《哀乐》中开幕。</p>
<p>首先由东方鬼帝主持会议并宣布会议议程，会议一共有八项议程：</p>
<p>一、奏《哀乐》；</p>
<p>二、由南方鬼帝宣读天庭《关于你府申请修改生死簿问题的批复》；</p>
<p>三、由西方鬼帝就《批复》精神进行宣讲教育；</p>
<p>四、由中央鬼帝安排部署生死簿修改工作；</p>
<p>五、由北方鬼帝对生死簿修改工作中的行政工作作指示；</p>
<p>六、由东方鬼帝对生死簿修改工作中的后勤保障工作作指示；</p>
<p>七、请酆都大帝作重要指示；</p>
<p>八、奏《葬礼进行曲》。</p>
<p>会后，根据酆都大帝重要指示精神，各部门开始就生死簿修改工作开始进行具体动作。</p>
<p>首先是中央鬼帝府根据会议精神下发《关于修改生死簿问题的通知》，通知下发到六案功曹、六司主事一级，通知中明确了本次生死簿修改工作的指导精神、安排部署、行动步骤、几点意见。</p>
<p>各司接到通知后，要按照通知精神拟定工作计划，按照时间节点对生死簿修改工作进行分工，并上报中央鬼帝府，抄送各鬼帝府备案。</p>
<p>为切实落实天庭党委年初《<strong>关于切实反对官僚主义、消除“文山会海”的通知</strong>》精神，各工作环节还必须要认真梳理总结，不走形式，避免过多占用日常工作时间，因此大家要充分利用下班时间补充、补写工作报告，填写各类表格，搞好调查走访，收集群众意见，以上内容全部以表格形式呈现，避免“八股文”、“四六句”。</p>
<p>最后由中央鬼帝府形成《<strong>关于修改生死簿问题的调查报告</strong>》、《<strong>关于修改生死簿问题的处理意见</strong>》，《报告》、《意见》中认为：</p>
<p>一、本次事件的主要责任人是地府查察司拘魂使黑白无常，主要责任是工作作风简单粗暴，对于修炼有成的孙悟空工作中过于死板、教条，不能灵活掌握生死簿的执行，是导致生死簿被非法修改的直接原因；</p>
<p>二、地府领导集体对生死簿修改负有领导责任，主要责任是对部属失管失控，不重视思想教育和行政能力培养，导致个别地府工作人员工作作风简单粗暴，灵活性不足，错误拘押修炼有成的孙悟空并导致生死簿被非法修改；</p>
<p>三、痛定思痛、加强整改，首先在地府中掀起“从严执法、灵活机动、请示汇报”的三项作风整顿行动，广泛教育地府工作人员在日常执法行政中切实落实天庭党委决议，紧跟天庭工作步伐，解决地府工作中长期存在的问题、矛盾；</p>
<p>四、建议给予具体责任人黑白无常记过处分一次，纪委诫勉谈话；</p>
<p>五、建议给予地府领导集体警告处分一次；</p>
<p>六、建议重新修订生死簿，划除孙悟空条目。</p>
<p>天庭接到《报告》、《意见》之后，呈玉帝审阅通过并在天庭行政工作会上进行了讨论形成决议，基本认可地府《意见》，对《报告》中的情况也给予了充分肯定，并指出三个问题：</p>
<p>一是地府工作力度偏软、偏散，要加强智慧赋能、数据共享，对于天庭掌握的修炼数据不能及时共享是造成本次事件的深层次原因；</p>
<p>二是地府领导集体不够团结统一，工作中通气不足、存在隔阂；</p>
<p>三是地府在工作人员外出作业期间存在跟踪问效不够的问题。</p>
<p>会议基本同意了地府的处理意见。</p>
<p>地府在接到《<strong>天庭关于地府修改生死簿问题的会议决议</strong>》之后，认真学习讨论了《决议》并拟定了整改计划，搞了整改“回头看”，并由酆都大帝在天庭党委扩大会上进行了深刻检查。</p>
<p>最后，一个阴律司办事员小鬼在生死簿上轻轻地勾了一下，“孙悟空”这个条目不复存在。</p>
<p>酆都大帝独自一人在自己屋子里的时候咬牙切齿的说：</p>
<p>“改，改，改，改你老木啊改！谁特么再改谁就是孙子！”</p>
]]></content>
      <categories>
        <category>幽默报</category>
      </categories>
      <tags>
        <tag>幽默报</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX-Test</title>
    <url>/2024/07/29/LaTeX-Test/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="207129af4328814201a6b1704f2b17007184483495eeeba54fd7da3f05cc6c08"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">Password here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/07/29/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very
first post. Check <a href="https://hexo.io/docs/">documentation</a> for
more info. If you get any problems when using Hexo, you can find the
answer in <a
href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or
you can ask me on <a
href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>P8819 [CSP-S 2022] 星战</title>
    <url>/2022/12/24/P8819%20%5BCSP-S%202022%5D%20%E6%98%9F%E6%88%98/</url>
    <content><![CDATA[<blockquote>
<p>注：上一次写题解是
<strong>2022-03-26</strong>，那是退役前的最后一篇题解。</p>
<p>虽然我已经退役了，但是我还是要把这个神奇的题搞一搞！</p>
</blockquote>
<p>CCF 用以造数据的脚恐怖如斯，如同加工老坛酸菜。</p>
<span id="more"></span>
<h1 id="题意">题意</h1>
<p>在这一轮的星际战争中，我方在宇宙中建立了 <span
class="math inline">\(n\)</span> 个据点，以 <span
class="math inline">\(m\)</span> 个单向虫洞连接。我们把终点为据点 <span
class="math inline">\(u\)</span> 的所有虫洞归为据点 <span
class="math inline">\(u\)</span> 的虫洞。</p>
<p>战火纷飞之中这些虫洞很难长久存在，敌人的打击随时可能到来。这些打击中的有效打击可以分为两类：</p>
<ol type="1">
<li>敌人会摧毁某个虫洞，这会使它连接的两个据点无法再通过这个虫洞直接到达，但这样的打击无法摧毁它连接的两个据点。</li>
<li>敌人会摧毁某个据点，由于虫洞的主要技术集中在出口处，这会导致该据点的所有还未被摧毁的虫洞被一同摧毁。而从这个据点出发的虫洞则<strong>不会摧毁</strong>。</li>
</ol>
<p>注意：摧毁只会导致虫洞不可用，而不会消除它的存在。</p>
<p>为了抗击敌人并维护各部队和各据点之间的联系，我方发展出了两种特种部队负责修复虫洞：</p>
<ul>
<li>A 型特种部队则可以将某个特定的虫洞修复。</li>
<li>B 型特种部队可以将某据点的所有损坏的虫洞修复。</li>
</ul>
<p>考虑到敌人打击的特点，我方并未在据点上储备过多的战略物资。因此只要这个据点的某一条虫洞被修复，处于可用状态，那么这个据点也是可用的。</p>
<p>我方掌握了一种苛刻的空间特性，利用这一特性我方战舰可以沿着虫洞瞬移到敌方阵营，实现精确打击。</p>
<p>为了把握发动反攻的最佳时机，指挥部必须关注战场上的所有变化，为了寻找一个能够进行反攻的时刻。总指挥认为：</p>
<ul>
<li>如果从我方的任何据点出发，在选择了合适的路线的前提下，可以进行无限次的虫洞穿梭（可以多次经过同一据点或同一虫洞），那么这个据点就可以<strong>实现反击</strong>。</li>
<li>为了使虫洞穿梭的过程连续，尽量减少战舰在据点切换虫洞时的质能损耗，当且仅当<strong>只有一个从该据点出发的虫洞可用</strong>时，这个据点可以<strong>实现连续穿梭</strong>。</li>
<li>如果我方所有据点都可以<strong>实现反击</strong>，也都可以<strong>实现连续穿梭</strong>，那么这个时刻就是一个绝佳的<strong>反攻</strong>时刻。</li>
</ul>
<p>总司令为你下达命令，要求你根据战场上实时反馈的信息，迅速告诉他当前的时刻是否能够进行一次<strong>反攻</strong>。</p>
<details>
<summary>
点击查看简略题面
</summary>
<p>给定 <span class="math inline">\(n\)</span> 个点 <span
class="math inline">\(m\)</span> 条边的有向图，以及四种操作，共 <span
class="math inline">\(q\)</span> 条：</p>
<ol type="1">
<li>删除某条边；</li>
<li>删除以某个点为终点的所有边；</li>
<li>恢复某条边；</li>
<li>恢复以某个点为终点的所有边。</li>
</ol>
<p>“恢复”指恢复原先删过的边，初始时就不存在的边当然不会恢复。</p>
<p>每次操作后，询问是否满足所有的点出度均为 <span
class="math inline">\(1\)</span>。</p>
<p><del>是不是很简略？</del></p>
</details>
<p>对于所有数据保证：<span class="math inline">\(1 \le n \le 5 \times
{10}^5\)</span>，<span class="math inline">\(1 \le m \le 5 \times
{10}^5\)</span>，<span class="math inline">\(1 \le q \le 5 \times
{10}^5\)</span>。</p>
<details>
<summary>
点击查看题解
</summary>
<h1 id="题解">题解</h1>
<h2 id="pts">45 pts</h2>
<p><del>不可以，总司令。</del></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> _yz</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">	ll n,m,q,u,v;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;q);</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=q;i++) <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	_yz::<span class="built_in">main</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="真的是部分分">真的是部分分</h2>
<p>最暴力的做法，对于每次 <span class="math inline">\(O(n)\)</span>
的修改后，<span class="math inline">\(O(n)\)</span>
扫一遍看是不是所有点出度都是 <span class="math inline">\(1\)</span>
，<span class="math inline">\(O(n^2)\)</span> 枚举所有点判环。</p>
<p>稍微思考之后，即可发现无需判环，因为第一个条件满足后，图即为基环内向树森林。非常详细地充满废话地证明一下：</p>
<p>先讨论图为连通图的情况。所有点出度都是 <span
class="math inline">\(1\)</span>，也就是一定有 <span
class="math inline">\(n\)</span> 条边（<span
class="math inline">\(n\)</span> 为点数）。考虑先分配 <span
class="math inline">\(n-1\)</span>
条无向边，这样形成的是一棵树。给边加方向，由于出度都是 <span
class="math inline">\(1\)</span>，所以只允许“多指向一”的结构。这样，必定剩下根的出度是零。再给根分配余下的一条有向边，无论这条边指向的是哪个点，一定形成了一个环。由于第一次分配确保所有点都可以到达根，保证了所有点一定能到达环，所以形成的图必定是一棵基环内向树。</p>
<p>如果图不连通，则必由连通子图组成。由于所有点出度都是 <span
class="math inline">\(1\)</span>，所以子图中有多少点就有多少边。故亦可按照上面的逻辑证明。</p>
<p>这样呢，由于免去了判环，我们就有了 <span
class="math inline">\(O(n^2)\)</span> 的做法。</p>
<h1 id="pts-1">100 pts</h1>
<details>
<summary>
旧版题解收折
</summary>
<blockquote>
<p>旧版题解表述不清。</p>
</blockquote>
<p>实际上，按照原题面，要让总司令可以的条件有两个：</p>
<ul>
<li>所有的点出度均为 <span class="math inline">\(1\)</span>。</li>
<li>从任意一个点出发，可以走到一个环中。</li>
</ul>
<p>但是，第一个条件可以推出第二个条件。证明：</p>
<p>所有点出度均为 <span class="math inline">\(1\)</span>
意味着图必是一个基环内向树森林，所以从任意一个点出发肯定会走到一个环。</p>
<p>从另一方面证明，所有点出度均为 <span class="math inline">\(1\)</span>
意味着你从任意一个点出发，存在一条路径，经过了至少 <span
class="math inline">\(n\)</span>
条边。那么路径中必然就存在重复经过的点了。</p>
<p>所以第二个条件是坑人的！根本不需要判环！我们只需判断何时所有的点出度均为
<span class="math inline">\(1\)</span>。</p>
<hr />
<p>首先想到直接按题意模拟，记录每个点出度个数。删掉一条边，前驱点出度减一。这样，操作
2 和 4 时间复杂度 <span
class="math inline">\(O(n)\)</span>。暴力判断，复杂度也是 <span
class="math inline">\(O(n)\)</span>，这样得到 <span
class="math inline">\(O(qn)\)</span> 的算法。</p>
<p>发现维护入度可以做到 <span class="math inline">\(O(1)\)</span>
维护，而可以同时维护所有点的出度之和（入度和=出度和）。</p>
<p>显然，所有的点出度均为 <span class="math inline">\(1\)</span>
可以推出出度和是 <span
class="math inline">\(n\)</span>，但是不能反推。</p>
<p>怎么办？哈希！</p>
<p>对每一个点随机一个权值。定义 <span
class="math inline">\(f(u)\)</span> 为结点 <span
class="math inline">\(u\)</span> 的前驱点权之和。<span
class="math inline">\(f(u)\)</span>
是可以被非常容易地维护的。另外定义变量 <span
class="math inline">\(sum\)</span> 为所有节点的前驱点权之和，也就是
<span class="math inline">\(\sum f(u)\)</span>。</p>
<p>显然，所有的点出度均为 <span class="math inline">\(1\)</span>
时，<span class="math inline">\(sum\)</span>
的值就等于所有点的点权之和。但是不能反推。</p>
<details>
<summary>
怎么就显然了？？？
</summary>
<p>此时，对于任意一个结点 <span
class="math inline">\(u\)</span>，有且只有一个结点 <span
class="math inline">\(v\)</span>，满足有向边 <span
class="math inline">\(&lt;u,v&gt;\)</span> 存在。这样，<span
class="math inline">\(u\)</span> 的点权会且只会贡献一次，贡献给 <span
class="math inline">\(f(v)\)</span>。这样，<span
class="math inline">\(sum\)</span>
的值自然就等于所有点的点权之和了。</p>
</details>
<p>虽然不能反推，但是当 <span class="math inline">\(sum\)</span>
的值等于所有点的点权之和时，很大概率满足所有的点出度均为 <span
class="math inline">\(1\)</span>。如果不放心，可以写多重哈希。</p>
<p>这样，这道题就解决了。</p>
<hr />
</details>
<p>我们不想每次操作完之后，都要进行一遍线性复杂度的判断。我们不想让维护操作的复杂度为线性。达到这两个目标之后，就会有线性的正解做法了。</p>
<p>一个自然的想法是，我们能不能记录出度和呢？所有点的出度都是 <span
class="math inline">\(1\)</span>，可以推出出度和为 <span
class="math inline">\(1\)</span>；但是反过来不一定对。但是，我们可以碰碰运气试一试。</p>
<p>记录出度和，就是记录有多少边。考虑所有点的出度不易维护，而入度很好维护，可以维护所有点的入度，进而维护边数。具体地，维护一个存储所有点目前入度的数组
<code>a[]</code>，以及一个变量
<code>cnt</code>，记录全局边数。对于边的操作，直接改就行；对于点的操作，删点就是对应的
<code>a[i]</code> 置为零，恢复点的操作就是让对应地的 <code>a[i]</code>
置为初始值。进行这些操作的同时，cnt
也可以一并维护。每次操作维护之后，判断 cnt 是不是等于
n。这样，时间复杂度就是线性的。</p>
<p>但是这样做，准确率太低了！怎么办？提高准确率！怎么提高？用哈希！</p>
<p>完了。这样你就可以 AC 了。</p>
<p>怎么哈？考虑到根据边数，显然无法判断这些边是不是有的是同一个点发出的。如何解决？给每一条边都赋予一个哈希值，使得同一个点发出的边的哈希值相等（实现时，是直接给点赋哈希值）。把上面数组、变量的意义都由原来的和改为哈希值和。每次操作维护之后，判断
cnt 是不是等于所有点的哈希值和。如果等于，那么表明什么呢？那就表明 cnt
大概率是 n 条由 n 个互不相同的点发出的边的哈希值和。那不就是表示这 n
个点的出度都是一嘛。</p>
<p>这样，这道题就做完了。本题是一个阅读理解+套路题，首先需要提炼信息；然后，给点赋哈希值的
trick，是我所从来没碰到过的，也是没有想出过的。所以此题虽然数据极水，价值还是有的。</p>
<hr />
<p>代码实现非常容易。</p>
<h1 id="代码">代码</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> _yz</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">	<span class="type">const</span> ll N=<span class="number">500000</span><span class="number">+10</span>;</span><br><span class="line">	ll n,m,q,a[N],in[N],tmp[N],jud=<span class="number">0</span>,now=<span class="number">0</span>;</span><br><span class="line">	<span class="function">mt19937 <span class="title">rnd</span><span class="params">(time(<span class="number">0</span>))</span></span>;</span><br><span class="line">	<span class="function">ll <span class="title">rand</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="built_in">rnd</span>()%N;&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ll u,v,t;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			a[i]=<span class="built_in">rand</span>();</span><br><span class="line">			jud+=a[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">			in[v]+=a[u]; tmp[v]+=a[u];</span><br><span class="line">			now+=a[u];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;q);</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;t);</span><br><span class="line">			<span class="keyword">if</span>(t==<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">				now-=a[u]; tmp[v]-=a[u];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(t==<span class="number">2</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;u);</span><br><span class="line">				now-=tmp[u]; tmp[u]=<span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(t==<span class="number">3</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">				now+=a[u]; tmp[v]+=a[u];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;u);</span><br><span class="line">				now+=in[u]-tmp[u]; tmp[u]=in[u];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(jud==now) <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	_yz::<span class="built_in">main</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<details>
<summary>
点击查看简略代码
</summary>
<p>本段代码来自于：<a href="https://www.luogu.com.cn/record/94328325"
class="uri">https://www.luogu.com.cn/record/94328325</a>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import<span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> t std::cin&gt;&gt;n</span></span><br><span class="line"><span class="type">int</span> n,m,r[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],w[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],s,k;<span class="built_in">main</span>()&#123;<span class="keyword">for</span>(t&gt;&gt;m,s=n*=n<span class="number">+3</span>;m--;w[k]=r[k]+=++n,s-=n*<span class="number">2</span>)t&gt;&gt;k;<span class="keyword">for</span>(t;t&gt;&gt;k;s+=m*<span class="number">2</span>,w[n]-=m,<span class="built_in">puts</span>(s?<span class="string">&quot;NO&quot;</span>:<span class="string">&quot;YES&quot;</span>))m=n&amp;<span class="number">1</span>?++k*=<span class="number">2</span>-n,t,k:w[k]-n/<span class="number">4</span>*r[n=k];&#125;</span><br></pre></td></tr></table></figure>
</details>
</details>
]]></content>
      <categories>
        <category>OI</category>
        <category>题解</category>
        <category>单题解</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>哈希</tag>
        <tag>推结论</tag>
      </tags>
  </entry>
  <entry>
    <title>P5659 [CSP-S2019] 树上的数</title>
    <url>/2021/08/12/P5659%20%5BCSP-S2019%5D%20%E6%A0%91%E4%B8%8A%E7%9A%84%E6%95%B0/</url>
    <content><![CDATA[<p>这是 Pomelorin 讲课用的讲义。因为是用 Markdown
写的，所以可以直接复制在这里。</p>
<h1 id="p5659-csp-s2019-树上的数">P5659 [CSP-S2019] 树上的数</h1>
<h2 id="闲话">闲话</h2>
<ul>
<li><p>既然我们又分到了一个黑题，自然要创新一下讲课形式——不用
PPT，而是用讲义！</p>
<p>或者说，因为这个题兼具思维难度性和代码复杂性，而 PPT
的形式不方便展示代码，所以就用了这个形式。</p></li>
<li><p>然后<del>除非大佬们开了防火墙</del>，“文件接收柜”里面应该已经有了今天讲课的资源包。</p></li>
<li><p>本讲义有很多提问环节，如果大佬们同步看的话，请不要偷看答案哦！</p></li>
<li><p>由于讲课的人水平所限，可能有不清楚或者错误的地方，欢迎指出！</p></li>
<li><p>插一嘴，Typora 这个 Markdown 编辑器真好用！</p></li>
</ul>
<span id="more"></span>
<h2 id="题意">题意</h2>
<p>给定一个大小为 <span class="math inline">\(n\)</span> 的树，它共有
<span class="math inline">\(n\)</span> 个结点与 <span
class="math inline">\(n - 1\)</span> 条边，结点从 <span
class="math inline">\(1 \sim n\)</span> 编号。初始时每个结点上都有一个
<span class="math inline">\(1 \sim n\)</span> 的数字，且每个 <span
class="math inline">\(1 \sim n\)</span>
的数字都只在<strong>恰好</strong>一个结点上出现。</p>
<p>接下来你需要进行<strong>恰好</strong> <span class="math inline">\(n -
1\)</span>
次删边操作，每次操作你需要选一条<strong>未被删去</strong>的边，此时这条边所连接的两个结点上的数字将会<strong>交换</strong>，然后这条边将被删去。</p>
<p><span class="math inline">\(n - 1\)</span>
次操作过后，所有的边都将被删去。此时，按数字从小到大的顺序，将数字 <span
class="math inline">\(1 \sim n\)</span>
所在的结点编号依次排列，就得到一个结点编号的排列 <span
class="math inline">\(P_i\)</span>。现在请你求出，在最优操作方案下能得到的<strong>字典序最小</strong>的
<span class="math inline">\(P_i\)</span>。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/yz-hs/PicGo/%E6%A0%91%E4%B8%8A%E7%9A%84%E6%95%B0%20(4).png" /></p>
<p>如上图，蓝圈中的数字 <span class="math inline">\(1 \sim 5\)</span>​​
一开始分别在结点 ②，①，③，⑤，④。按照 (1)，(4)，(3)，(2)
的顺序删去所有边，树变为下图。按数字顺序得到的结点编号排列为
①③④②⑤，该排列是所有可能的结果中字典序最小的。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/yz-hs/PicGo/%E6%A0%91%E4%B8%8A%E7%9A%84%E6%95%B0%20(1).png" /></p>
<h2 id="数据范围">数据范围</h2>
<table>
<thead>
<tr>
<th style="text-align: left;">测试点编号</th>
<th style="text-align: left;"><span class="math inline">\(n
\leq\)</span></th>
<th style="text-align: left;">特殊性质</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><span class="math inline">\(1 \sim
2\)</span></td>
<td style="text-align: left;"><span
class="math inline">\(10\)</span></td>
<td style="text-align: left;">无</td>
</tr>
<tr>
<td style="text-align: left;"><span class="math inline">\(3 \sim
4\)</span></td>
<td style="text-align: left;"><span
class="math inline">\(160\)</span></td>
<td style="text-align: left;">树的形态是一条链</td>
</tr>
<tr>
<td style="text-align: left;"><span class="math inline">\(5 \sim
7\)</span></td>
<td style="text-align: left;"><span
class="math inline">\(2000\)</span></td>
<td style="text-align: left;">同上</td>
</tr>
<tr>
<td style="text-align: left;"><span class="math inline">\(8 \sim
9\)</span></td>
<td style="text-align: left;"><span
class="math inline">\(160\)</span></td>
<td style="text-align: left;">存在度数为 <span class="math inline">\(n -
1\)</span> 的结点</td>
</tr>
<tr>
<td style="text-align: left;"><span class="math inline">\(10 \sim
12\)</span></td>
<td style="text-align: left;"><span
class="math inline">\(2000\)</span></td>
<td style="text-align: left;">同上</td>
</tr>
<tr>
<td style="text-align: left;"><span class="math inline">\(13 \sim
16\)</span></td>
<td style="text-align: left;"><span
class="math inline">\(160\)</span></td>
<td style="text-align: left;">无</td>
</tr>
<tr>
<td style="text-align: left;"><span class="math inline">\(17 \sim
20\)</span></td>
<td style="text-align: left;"><span
class="math inline">\(2000\)</span></td>
<td style="text-align: left;">无</td>
</tr>
</tbody>
</table>
<p>对于所有测试点：<span class="math inline">\(1 \leq T \leq
10\)</span>，保证给出的是一个树。</p>
<details>
<summary>
点击查看题解
</summary>
<h2 id="题解">题解</h2>
<p>本题解是把 luogu
的各个题解缝在一块，而形成的题解。<del>我是裁缝</del>。</p>
<h3 id="x00-前置知识">0x00 前置知识</h3>
<ul>
<li>生成全排列</li>
<li>并查集</li>
<li>链表</li>
<li>贪心</li>
</ul>
<h4 id="生成全排列">生成全排列</h4>
<p>这个我们不必多说吧，诸位大佬肯定都会。通俗来讲，就是通过 dfs
在每一位填数字。</p>
<h4 id="并查集">并查集</h4>
<p>建议看某菜鸡的 Blog。</p>
<ul>
<li><a href="/2a969ab32552/">link1</a>，以模板为主。</li>
<li><a href="/bcc33af415e1/">link2</a>，以例题为主。</li>
</ul>
<h4 id="链表">链表</h4>
<p>一般而言链表都是用指针写的，<del>用数组模拟有你好受的</del>。而指针是个神奇的东西，<del>对初学者极不友好</del>。<del>其实也没啥好说的，就问问你当年是怎么理解链式前向星的</del>。</p>
<p>主要有以下几点：</p>
<ul>
<li>存储每个节点的地址，且每个节点都有后继的地址；</li>
<li>必要时也可以储存指向自己前驱的地址；</li>
<li>用指针时要注意边界的判断。</li>
</ul>
<p><del>话说大家真的彻底明白链式前向星的工作原理了吗，当初为了理解这东西我费了九牛二虎之力</del>。</p>
<p>其实本题可以用链表做。由于时间有限，赶不出利用链表实现的代码。</p>
<h4 id="贪心">贪心</h4>
<p>可以当作进阶的 DP。然而，这需要严格证明。</p>
<h3 id="x01-暴搜">0x01 暴搜</h3>
<p>用 <span class="math inline">\(O(n!\times n)\)</span>​​​​​​
的时间复杂度，得到删边顺序的全排列，再进行模拟，更新答案。这样您就可以得到
10 分了（考场很少有能超过 10 分的人，可以认为是考场满分解）。</p>
<p>相信大家都会生成全排列吧（<del>不会吧不会吧，不会真有人不会吧</del>）。</p>
<p>想拿这 10 分，可不容易。一些注意事项：</p>
<ul>
<li><p>注意输入输出格式<strong>。做题不审题不是好习惯</strong>。</p>
<blockquote>
<p>第二行 <span class="math inline">\(n\)</span> 个整数，第 <span
class="math inline">\(i\)</span> （<span class="math inline">\(1 \leq i
\leq n\)</span>） 个整数表示<strong>数字</strong> <span
class="math inline">\(i\)</span>​​
初始时所在的<strong>结点编号</strong>。</p>
<p>将数字 <span class="math inline">\(1 \sim n\)</span>
<strong>所在的结点编号</strong>依次排列，就得到一个<strong>结点编号的排列</strong>
<span
class="math inline">\(P_i\)</span>。求出在最优操作方案下能得到的<strong>字典序最小</strong>的
<span class="math inline">\(P_i\)</span>。</p>
</blockquote></li>
<li><p>注意模拟时，交换的是一条边两端的数字，所以注意枚举的是 <span
class="math inline">\(n-1\)</span> 的全排列，交换也是枚举到 <span
class="math inline">\(n-1\)</span>。</p></li>
</ul>
<p>下面是代码。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Force<span class="comment">//暴力 </span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> ms(a) memset(a,0,sizeof(a))</span></span><br><span class="line">	<span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">	<span class="type">const</span> ll N=<span class="number">2000</span><span class="number">+10</span>,inf=<span class="number">2147483647</span>;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">edge</span>&#123;ll u,v;&#125;e[N*<span class="number">2</span>];</span><br><span class="line">	ll n,num[N],vis[N],a[N],ans[N],tmp[N],ump[N];</span><br><span class="line">	<span class="comment">//P 是排列 </span></span><br><span class="line">	<span class="comment">//点的个数 点上的数字 生成P要用到 P 最小的P 点上的数字 数字所在编号 </span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			tmp[i]=num[i];<span class="comment">//因为下面要用到 num，所以复制一遍防止出锅 </span></span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)<span class="comment">//注意是边的全排列 </span></span><br><span class="line">			<span class="built_in">swap</span>(tmp[e[a[i]].u],tmp[e[a[i]].v]);<span class="comment">//按照题意 ~~膜你~~ 模拟 </span></span><br><span class="line">		ll flag=<span class="number">1</span>;<span class="comment">//判断是否更新答案 </span></span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			ump[tmp[i]]=i;<span class="comment">//注意判断字典序是以数字为序，点的编号的排列 </span></span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//判断字典序的大小 </span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(ump[i]&gt;ans[i]) &#123;flag=<span class="number">0</span>;<span class="keyword">break</span>;&#125;<span class="comment">//这种特性启发了我们 </span></span><br><span class="line">			<span class="keyword">if</span>(ump[i]&lt;ans[i]) <span class="keyword">break</span>;<span class="comment">//在后面可以利用贪心求解 </span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(!flag) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) ans[i]=ump[i];<span class="comment">//更新答案 </span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(ll step)</span><span class="comment">//必会技能：生成全排列 </span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(step&gt;=n)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">solve</span>();</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;</span><br><span class="line">			vis[i]=<span class="number">1</span>;a[step]=i;</span><br><span class="line">			<span class="built_in">dfs</span>(step<span class="number">+1</span>);</span><br><span class="line">			vis[i]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ll T,a,b;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;T);</span><br><span class="line">		<span class="keyword">while</span>(T--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">			<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a);</span><br><span class="line">				num[a]=i;<span class="comment">//注意题目输入格式，对于正解来说比较方便 </span></span><br><span class="line">				ans[i]=inf;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">				e[i].u=a,e[i].v=b;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,ans[i]);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="x02-菊花图">0x02 菊花图</h3>
<p>菊花图有一些比较友好的特性。设菊花图的花心是 <span
class="math inline">\(u\)</span>​，与其相邻的点是 <span
class="math inline">\(x_i\)</span>。发现在删边时，<span
class="math inline">\(x_i\)</span> 固定了 <span
class="math inline">\(u\)</span> 的值（因为 <span
class="math inline">\(x_i\)</span> 除了 <span
class="math inline">\(u\)</span>，与其他的点没有任何关系，既然边 <span
class="math inline">\(&lt;u,x_i&gt;\)</span>
被删掉了，那么这个点的数值也就不会被改变了），而 <span
class="math inline">\(x_i\)</span> 原先的值到了 <span
class="math inline">\(u\)</span>​​，等待下一次被固定。</p>
<p>结合下面的动图进行理解。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/yz-hs/PicGo/%E6%A0%91%E4%B8%8A%E7%9A%84%E6%95%B0%20(1).gif" /></p>
<p>容易发现，这个过程有点像一个<strong>环</strong>。假如将拆边描述为一个排列
<span class="math inline">\(p_1,p_2,...,p_{n-1}\)</span>​（<span
class="math inline">\(\forall1\le i&lt;n
,p_i\not=u\)</span>​）​，也就是说，你按顺序拆掉了 <span
class="math inline">\((u,p_1),(u,p_2),..,(u,p_{n-1})\)</span>​，那么最后，原来根上的数字
<span class="math inline">\(a_u\)</span>​ 会去到 <span
class="math inline">\(p_1\)</span>​，原来 <span
class="math inline">\(p_{i}\)</span>​ 上的数字 <span
class="math inline">\(a_{p_i}\)</span>​ 会去到 <span
class="math inline">\(p_{i+1}\)</span>​，原来 <span
class="math inline">\(p_n\)</span>​ 上的数字 <span
class="math inline">\(a_{p_n}\)</span>​ 会去到 <span
class="math inline">\(u\)</span>​。如果我们将点按照 <span
class="math inline">\((u,p_1,p_2,\dots,p_n)\)</span>​​
的顺序排成一个环的话，整个操作就相当于将每个点上的数字向后移了一位。</p>
<p>而本题目标肯定是尽量把最小的数字给转移到最小的编号上，而且转移的方案（即转移路线）有且仅有一个。</p>
<p>于是很容易地想到一个<strong>贪心</strong>的构造环（构造拆边顺序）的方法。</p>
<p><strong>按照 <span class="math inline">\(1,2,3,...,n\)</span>​​​​​​（数字）​​​​​
的顺序，每个数字从自己所在的点选择在环上面的下一个点（就是说这个数字要搬运到哪里）。那么每次在合法的情况下选标号最小的节点即可</strong>。这个方法非常重要，因为后面的解都用到了这个思路。</p>
<p>那如何判断合法呢？</p>
<p>建一个新图。把“搬运点”的过程，当做是连边。就像动图一样，如果一个点
<span class="math inline">\(x\)</span> 上的数字要搬运到点 <span
class="math inline">\(y\)</span>，就在新图上连一条<strong>有向边</strong>
<span
class="math inline">\(&lt;x,y&gt;\)</span>。我们容易发现，一个点只能最多有一条入边，一条出边，这样才是合法的。比如，<span
class="math inline">\(x\rightarrow y\rightarrow z\)</span>
是合法的，因为点 <span class="math inline">\(x\)</span> 上的数字到达点
<span class="math inline">\(y\)</span> 时，<span
class="math inline">\(y\)</span> 上的数字又正好到达了 <span
class="math inline">\(u\)</span>，就可以到达 <span
class="math inline">\(z\)</span>
了。如果从一个点发出多个有向边，或多个有向边指向一个点，这很明显是不合法的。</p>
<p>相信各位大佬都已经看出来了，这样在新图中会出现许多链。并且，在最后还会形成一个大环。这样，就和我们前面所述的拆边过程契合了。</p>
<p>所以，在环还没有封闭的时候，请注意它们都还是一些链，所以不要出现提前成环<del>提前自闭</del>的情况，并保证最后会出现一个大环而不是若干个小环。</p>
<p>利用用并查集维护，方便地判断是否成环。</p>
<p>下面是代码。时间复杂度是 <span
class="math inline">\(O(n^2\alpha(n))\)</span>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Flower</span><br><span class="line">&#123;</span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> ms(a) memset(a,0,sizeof(a))</span></span><br><span class="line">	<span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">	<span class="type">const</span> ll N=<span class="number">2000</span><span class="number">+10</span>,inf=<span class="number">2147483647</span>;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">UFDS</span><span class="comment">//并查集 </span></span><br><span class="line">	&#123;</span><br><span class="line">  		ll dad[N],n;</span><br><span class="line">    	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(ll p)</span></span>&#123; n=p; <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) dad[i]=i; &#125;</span><br><span class="line">    	<span class="function">ll <span class="title">find</span><span class="params">(ll x)</span><span class="comment">//非递归写法，你值得拥有 </span></span></span><br><span class="line"><span class="function">    	</span>&#123;   </span><br><span class="line">           	<span class="keyword">while</span>(x!=dad[x])</span><br><span class="line">            	x=dad[x]=dad[dad[x]];<span class="comment">//路径压缩 </span></span><br><span class="line">         	<span class="keyword">return</span> x;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function">    	</span>&#123;</span><br><span class="line">           ll d1=<span class="built_in">find</span>(x),d2=<span class="built_in">find</span>(y);</span><br><span class="line">           dad[d1]=d2;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">    	&#125;	</span><br><span class="line">    	<span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function">    	</span>&#123;</span><br><span class="line">           ll d1=<span class="built_in">find</span>(x),d2=<span class="built_in">find</span>(y);</span><br><span class="line">           <span class="keyword">if</span>(d1==d2) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">	&#125;U;</span><br><span class="line">	ll n,num[N],id[N],vis[N],ans[N];</span><br><span class="line">	<span class="comment">//结点数 点上的数字 数字所在编号 是否访问过 </span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		U.<span class="built_in">init</span>(n);</span><br><span class="line">		<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">		<span class="comment">//对于新图来说，vis 数组防止出现一个点连到链的中间的情况 </span></span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//枚举数字 </span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(ll j=<span class="number">1</span>;j&lt;=n;j++)<span class="comment">//贪心地选编号小的点 </span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(vis[j]||(i!=n&amp;&amp;U.<span class="built_in">check</span>(id[i],j))) <span class="keyword">continue</span>;</span><br><span class="line">				<span class="comment">//首先保证不要破坏链，或者说重复搬运到一个点</span></span><br><span class="line">				<span class="comment">//其次不要使链提前自闭（当枚举到最后一个时就可以自闭了） </span></span><br><span class="line">				ans[i]=j;vis[j]=<span class="number">1</span>;U.<span class="built_in">merge</span>(j,id[i]);<span class="keyword">break</span>;</span><br><span class="line">				<span class="comment">//加入有向边 &lt;id[i],j&gt; 表示删边的先后与相邻关系</span></span><br><span class="line">				</span><br><span class="line">				<span class="comment">//由于并查集的特性（或者说我们已经用 vis 数组进行维护了），</span></span><br><span class="line">				<span class="comment">//实际上 merge 的两个参数并没有先后关系 </span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ll T,a,b;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;T);</span><br><span class="line">		<span class="keyword">while</span>(T--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">			<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,id+i);</span><br><span class="line">				num[id[i]]=i;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)<span class="comment">//好像连图都没用到 </span></span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">			<span class="built_in">solve</span>(); </span><br><span class="line">			<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,ans[i]);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		&#125; </span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>想必各位大佬已经发现了，读进来的图似乎压根没用到！<del>除了骗分</del>。</p>
<p>原因是，我们对于菊花图上的所有节点，都是一视同仁的。节点 <span
class="math inline">\(u\)</span>
也是符合“一个点只能最多有一条入边，一条出边”的限制的。</p>
<h3 id="x03-链">0x03 链</h3>
<p>链有一些比较友好的特性。它是一条类似于线的东西；除了两个端点之外，其他的点度都为
2。</p>
<p>由于特性 1，我们可以以数组的形式方便地进行处理。我们先找到链首（度为
1 的点），进行 dfs，利用 dfs 序来得到点在链中的先后次序，进行处理。</p>
<p>由于特性
2，先抛开特殊的端点不谈，每个点都有两条边相邻。可以保证的是，两条边的删除次序是有时间的先后的。所以我们可以想到，给每个点一个标记，标记左右两边的删除次序，或者说优先级（无限制或未知，左先右后，左后右先）。这里的优先级实际上就是一种拓扑序。</p>
<blockquote>
<p>提问一下：比如说左先右后，一定是左面的边删掉后接着就删右面的边吗？</p>
</blockquote>
<p>下面举个例子来说明这个优先级。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/yz-hs/PicGo/%E6%A0%91%E4%B8%8A%E7%9A%84%E6%95%B0%20(2).png" /></p>
<p>比如说在 2 上面的<strong>数字</strong>要去 5：</p>
<ul>
<li>它离开 2 时，需要保证边 <span
class="math inline">\(&lt;2,3&gt;\)</span> 在边 <span
class="math inline">\(&lt;1,2&gt;\)</span> 之前先被删，否则它就跑到 1
上面去了。</li>
<li>在它被运送途中，需要保证边 <span
class="math inline">\(&lt;2,3&gt;\)</span>，<span
class="math inline">\(&lt;3,4&gt;\)</span>，<span
class="math inline">\(&lt;4,5&gt;\)</span> 被先后删除，不能颠倒。</li>
<li>它到达 5 时，需要保证边 <span
class="math inline">\(&lt;5,6&gt;\)</span> 在边 <span
class="math inline">\(&lt;4,5&gt;\)</span>​ 之前先被删，否则它就跑到 6
上面去了。</li>
</ul>
<p>这是往右走的情况，往左的情况可自行推导，其实不难（这里要提问一下）。</p>
<p>而最后，我们判定一个方法是否可行，只需要判断它和前面的点的标记是否冲突即可。</p>
<p>下面是代码。时间复杂度是 <span
class="math inline">\(O(n^2)\)</span>​。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Chain</span><br><span class="line">&#123;</span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> ms(a) memset(a,0,sizeof(a))</span></span><br><span class="line">	<span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">	<span class="type">const</span> ll N=<span class="number">2000</span><span class="number">+10</span>,inf=<span class="number">2147483647</span>;</span><br><span class="line">	<span class="type">const</span> ll UnLim=<span class="number">0</span>,FirS=<span class="number">1</span>,SecF=<span class="number">2</span>;</span><br><span class="line">	ll n,id[N],ans[N],deg[N];</span><br><span class="line">	ll dfn[N],link[N],tag[N],cnt=<span class="number">0</span>;</span><br><span class="line">	<span class="comment">//结点数 数字所在编号 节点的度</span></span><br><span class="line">	<span class="comment">//节点的dfs序 按dfs序排列的节点 按dfs序排列的节点的标记 dfs序的戳 </span></span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">graph</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">struct</span> <span class="title class_">edge</span>&#123;ll nxt,to;&#125;e[N*<span class="number">2</span>];</span><br><span class="line">		ll head[N],cnt;</span><br><span class="line">		<span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			<span class="built_in">ms</span>(e);<span class="built_in">ms</span>(head);</span><br><span class="line">			cnt=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(ll a,ll b)</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			e[++cnt]=(edge)&#123;head[a],b&#125;;</span><br><span class="line">			head[a]=cnt;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;G;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(ll root,ll dad)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		dfn[root]=++cnt;</span><br><span class="line">		link[cnt]=root;</span><br><span class="line">		<span class="keyword">for</span>(ll i=G.head[root];i;i=G.e[i].nxt)</span><br><span class="line">		&#123;</span><br><span class="line">			ll son=G.e[i].to;</span><br><span class="line">			<span class="keyword">if</span>(son==dad) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="built_in">dfs</span>(son,root);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			<span class="keyword">if</span>(deg[i]==<span class="number">1</span>) &#123;<span class="built_in">dfs</span>(i,i);<span class="keyword">break</span>;&#125;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//枚举数字 </span></span><br><span class="line">		&#123;</span><br><span class="line">			ll now=dfn[id[i]],des=inf;</span><br><span class="line">			<span class="comment">//now 是起始点，des 是终止点</span></span><br><span class="line">			<span class="comment">//各个变量里面到底存的是什么，一定要分清 </span></span><br><span class="line">			<span class="comment">//有什么不明白的地方可以提问！ </span></span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">			   --0-- now --1-- q --2-- w --3-- e --4-- des --5--</span></span><br><span class="line"><span class="comment">			   0 一定是比 1 后删；1 2 3 4 一定先后删；5 一定比 4 先删。 </span></span><br><span class="line"><span class="comment">			*/</span></span><br><span class="line">			<span class="keyword">if</span>(tag[now]!=FirS)<span class="comment">//向后找目标 </span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span>(ll j=now<span class="number">+1</span>;j&lt;=n;j++)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(tag[j]!=FirS) des=<span class="built_in">min</span>(des,link[j]);<span class="comment">//符合 目的地 的条件，可选 </span></span><br><span class="line">					<span class="keyword">if</span>(tag[j]==SecF) <span class="keyword">break</span>;<span class="comment">//不符合 继续走 条件，返回 </span></span><br><span class="line">					<span class="comment">//这里，提一个问题：上面的两个语句能不能互换？为什么？ </span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">			   --0-- des --1-- q --2-- w --3-- e --4-- now --5--</span></span><br><span class="line"><span class="comment">			   5 一定是比 4 后删；4 3 2 1 一定先后删；0 一定比 1 先删。 </span></span><br><span class="line"><span class="comment">			*/</span></span><br><span class="line">			<span class="keyword">if</span>(tag[now]!=SecF)<span class="comment">//向前找目标 </span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span>(ll j=now<span class="number">-1</span>;j&gt;=<span class="number">1</span>;j--)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(tag[j]!=SecF) des=<span class="built_in">min</span>(des,link[j]);<span class="comment">//符合 目的地 的条件，可选 </span></span><br><span class="line">					<span class="keyword">if</span>(tag[j]==FirS) <span class="keyword">break</span>;<span class="comment">//不符合 继续走 条件，返回 </span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(dfn[des]&gt;now)<span class="comment">//目标在后面 </span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span>(ll j=dfn[des]<span class="number">-1</span>;j&gt;=now<span class="number">+1</span>;j--) tag[j]=FirS;<span class="comment">//一定先后删</span></span><br><span class="line">				tag[now]=tag[dfn[des]]=SecF;<span class="comment">//前面的后删 </span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(dfn[des]&lt;now)<span class="comment">//目标在前面 </span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span>(ll j=dfn[des]<span class="number">+1</span>;j&lt;=now<span class="number">-1</span>;j++) tag[j]=SecF;<span class="comment">//一定先后删</span></span><br><span class="line">				tag[now]=tag[dfn[des]]=FirS;<span class="comment">//后面的后删 </span></span><br><span class="line">			&#125;</span><br><span class="line">			tag[<span class="number">1</span>]=tag[n]=UnLim;<span class="comment">//只有一条边，自然就无所谓了 </span></span><br><span class="line">			ans[i]=des; </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ll T,a,b;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;T);</span><br><span class="line">		<span class="keyword">while</span>(T--)</span><br><span class="line">		&#123;</span><br><span class="line">			G.<span class="built_in">clear</span>();</span><br><span class="line">			<span class="built_in">ms</span>(deg);<span class="built_in">ms</span>(tag);</span><br><span class="line">			cnt=<span class="number">0</span>;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">			<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,id+i);</span><br><span class="line">			<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">				G.<span class="built_in">add</span>(a,b);G.<span class="built_in">add</span>(b,a);</span><br><span class="line">				deg[a]++;deg[b]++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">solve</span>();</span><br><span class="line">			<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,ans[i]);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="x04-正解">0x04 正解</h3>
<p><right><del>本人已死，有事烧纸。</del></right></p>
<blockquote>
<p>前方核能！由于难度有亿点大，我尝试把 zzy
的语言搬来，使得讲义语言风格更有趣点。</p>
</blockquote>
<p><del>想必各位巨佬已经不屑于停滞在部分解了</del> 。</p>
<p>想必各位巨佬已经发现了<strong>：一个点的邻接边抽象成点后，用有向边表示删除先后关系的话，形成的总是一堆链</strong>。这可以通过菊花图认识到这一点。</p>
<p>想必各位巨佬已经发现了<strong>：只有共用同一个顶点的边才有删除的先后关系</strong>。这可以通过链认识到这一点。</p>
<p>那么恭喜你，链和菊花的做法对我们硬刚正解有很大的启发（正解细节众多，一部分听不懂也没关系，上面加粗的两句话不明白为什么也没关系，后面会讲。建议结合<del>毒瘤的</del>代码来理解）。</p>
<hr />
<p>那么，我们由链维护边的删除次序想到：能否将这样的维护扩展到多条边的情况？其实是可以的<del>不然我为什么要问这个问题</del>。上面已经说了，只有共用同一个顶点的边才有删除的先后关系。</p>
<p>直接讲有点费事，下面结合图来理解。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/yz-hs/PicGo/%E6%A0%91%E4%B8%8A%E7%9A%84%E6%95%B0%20(3).png" /></p>
<p>我们要将 1 上的数字搬到 4。容易发现：</p>
<ul>
<li><ol type="1">
<li>的优先级是与 1
号点相邻的边中最大的。<del>要不你想搬个寂寞啊</del>。</li>
</ol></li>
<li><ol start="2" type="1">
<li>的优先级是与 3
号点相邻的边中最小的。<del>要不到手的鸭子飞了</del>。</li>
</ol></li>
</ul>
<p>这样对吗？</p>
<p>不对！</p>
<p>为什么不对？下面是提问环节！</p>
<p><span class="math display">\[ \quad \]</span></p>
<p>经过一番研讨，我们发现：</p>
<ul>
<li>删完 (1) 接着必须删 (2)。<del>要不它就被别人抢去了</del>。</li>
</ul>
<p>我们神奇地发现，这些条件限制，只需每个点都维护边的删除优先级就可以了！换句话说，<strong>只有共用同一个顶点的边才有删除的先后关系</strong>。严谨地说，这些限制都是应用在某一点的几条边中的，因此可以单独考虑每个点的情况。</p>
<hr />
<p>想必各位巨佬已经发现了：维护每个点，不就相当于每个点都是菊花图吗？<del>于是就形成了菊花树，一起来看菊花！</del></p>
<p>是的。我们在做菊花图时，开了个并查集来维护边的删除次序。想必各位巨佬已经知道了：我们要对于每一个点，都要开一个<del>冰茶几</del>并查集！</p>
<p>那么，对于多个删边的先后关系，我们将它们的边抽象成一个点，删边的先后、紧邻次序抽象成连边，发现它有点像链。</p>
<p>但是这里有个问题：如果一个点删除边的顺序不一定是连续的怎么办？</p>
<p>对于这种情况，我们只需要把它们看成有许多个链，但是它们没有接在一起即可。换句话说，<strong>一个点的邻接边抽象成点后，用有向边表示删除先后关系的话，形成的总是一堆链</strong>。</p>
<hr />
<p>情况与单链类似，对于一个数字 <span class="math inline">\(k\)</span>​
从起点移动至终点，在路径上有一下几个很重要的性质。有没有大佬总结一下？</p>
<p>别忘了说为什么。</p>
<p>可以根据前面所述，提炼一下。</p>
<p>当大家弄明白之后我们可以继续了。以上一定要明白，<del>下面的得靠自己的修为了</del>。</p>
<p>揭晓答案——几个很重要的性质：</p>
<ul>
<li><strong>对于起点，其出边一定是这一点第一条被删掉的边</strong>。
如果不是，则 k 会被换到其他点上。</li>
<li><strong>对于终点，其入边一定是这一点最后一条被删掉的边</strong>。
如果不是，则 k 也会被换到其他点上。</li>
<li><strong>对于中转点，其入边先于出边被删，且在该点的所有边里被删除的顺序是相邻的</strong>。
如果不满足，则在中间，数字 k 会被换到其他点上。</li>
</ul>
<hr />
<p>思路依然是暴力枚举每个数字，从这个数字的初始位置开始 dfs
，检查路径上的点是否可以作为中转点或终点即可。</p>
<p>这里是这个题的实现中最难的位置，即检查是否满足中转点或终点的条件。这里，使用了并查集来管理边的关系，存储某个点的边的限制连成的链式结构。</p>
<p>对于”几个很重要的性质“的前两个，我的做法是对每一个并查集建了一个虚点，如果一条边的优先级最大，那么由虚点向它连一条边，如果一条边优先级最小，则由它向虚点连一条边。这样就很好搞了。</p>
<p>必须上代码，结合代码讲一讲，否则真的难以理解。必要时画图。<del>理解确实得靠自己的修为了</del>。</p>
<p>时间复杂度是 <span
class="math inline">\(O(n^2\alpha(n))\)</span>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Perfect </span><br><span class="line">&#123;</span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> ms(a) memset(a,0,sizeof(a))</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> for(a) for(register a) </span></span><br><span class="line">	<span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">	<span class="type">const</span> ll N=<span class="number">20000</span><span class="number">+10</span>,inf=<span class="number">2147483647</span>;</span><br><span class="line">	ll n,id[N],ans[N],deg[N];</span><br><span class="line">	<span class="comment">//结点数 数字所在编号 答案 节点的度 </span></span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">UFDS</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//仍一样，并查集维护的是删边顺序，一条有向边 &lt;u,v&gt;</span></span><br><span class="line">		<span class="comment">//表示边 u 在边 v 之前删，且相邻 </span></span><br><span class="line">		<span class="comment">//可参考菊花图部分进行理解 </span></span><br><span class="line">		<span class="comment">//注意 u 和 v 都是原图中的边 </span></span><br><span class="line">  		ll dad[N],out[N],in[N],n;</span><br><span class="line">		<span class="comment">//out 是一个点有没有出边，in 同理 </span></span><br><span class="line">		<span class="comment">//size 是集合大小，即链的大小 </span></span><br><span class="line">  		ll size[N];</span><br><span class="line">    	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(ll p)</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			n=p;</span><br><span class="line">			<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			&#123;</span><br><span class="line">				dad[i]=i;</span><br><span class="line">				out[i]=in[i]=<span class="number">0</span>; </span><br><span class="line">				size[i]=<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">    	<span class="function">ll <span class="title">find</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">    	</span>&#123;</span><br><span class="line">           	<span class="keyword">while</span>(x!=dad[x])</span><br><span class="line">            	x=dad[x]=dad[dad[x]];</span><br><span class="line">         	<span class="keyword">return</span> x;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="comment">//这里不像菊花图的情况，参数不能颠倒 </span></span><br><span class="line">    	<span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function">    	</span>&#123;</span><br><span class="line">    		<span class="comment">//加有向边 &lt;x,y&gt; </span></span><br><span class="line">            ll d1=<span class="built_in">find</span>(x),d2=<span class="built_in">find</span>(y);</span><br><span class="line">            dad[d1]=d2;size[d2]+=size[d1];</span><br><span class="line">            out[x]=in[y]=<span class="number">1</span>;</span><br><span class="line">		    <span class="comment">//标记一个点有了入边或出边</span></span><br><span class="line">		    <span class="comment">//便于判断加入当前点是否会破坏环 </span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    	&#125;	</span><br><span class="line">    	<span class="function">ll <span class="title">check</span><span class="params">(ll x,ll y,ll jud)</span><span class="comment">//简单几行，充满玄机 </span></span></span><br><span class="line"><span class="function">    	</span>&#123;</span><br><span class="line">    		<span class="keyword">if</span>(in[y]||out[x]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    		<span class="comment">//保证 x 是链尾，y 是链首 </span></span><br><span class="line">            ll d1=<span class="built_in">find</span>(x),d2=<span class="built_in">find</span>(y);</span><br><span class="line">            <span class="keyword">if</span>(d1==d2&amp;&amp;size[d1]!=jud) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//用来判断亿些情况，下面会有大段话来解释 </span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">	&#125;U;<span class="comment">//实际上对于每个点都开了并查集 </span></span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">graph</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">struct</span> <span class="title class_">edge</span>&#123;ll nxt,to;&#125;e[N*<span class="number">2</span>];</span><br><span class="line">		ll head[N],cnt;</span><br><span class="line">		<span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			<span class="built_in">ms</span>(e);<span class="built_in">ms</span>(head);</span><br><span class="line">			cnt=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(ll a,ll b)</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			e[++cnt]=(edge)&#123;head[a],b&#125;;</span><br><span class="line">			head[a]=cnt;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;G;</span><br><span class="line">	<span class="function">ll <span class="title">dfs1</span><span class="params">(ll root,ll edge)</span><span class="comment">//寻径算法 </span></span></span><br><span class="line"><span class="function">	</span>&#123;<span class="comment">//短短 14 行代码，讲明白不容易啊 qwq</span></span><br><span class="line">	 <span class="comment">//欢迎观看注释比代码长系列 </span></span><br><span class="line">		ll ret=n<span class="number">+1</span>;<span class="comment">//要返回的目标 </span></span><br><span class="line">		<span class="keyword">if</span>(root!=edge&amp;&amp;U.<span class="built_in">check</span>(edge,root,deg[root]<span class="number">+1</span>))</span><br><span class="line">		<span class="comment">//接下来判断这个点能不能当作终点。 </span></span><br><span class="line">		<span class="comment">//首先，不是起点才有可能当作终点（废话） </span></span><br><span class="line">		<span class="comment">//其次。只有最后一个删边，才能保证这个数字不会跑掉。</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//这里，root 是个新图虚点，原图虚边，为了保证这个边是最后一个被删掉的。 </span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//分两种情况：</span></span><br><span class="line">		<span class="comment">//  - 终边未被指定。此时两者不属于同一链，可以连接，表示指定它最后删除。</span></span><br><span class="line">		<span class="comment">//    &gt; check 函数对于不同集合会直接返回 1，表示可行。 </span></span><br><span class="line">		<span class="comment">//  - 此边和起始边在同一链上。即它们先后顺序已确定。</span></span><br><span class="line">		<span class="comment">//    那么我们必须要保证这个删边顺序组成的链中，长度刚好为这个节点的边数。</span></span><br><span class="line">		<span class="comment">//    否则，边不可能删的完。 </span></span><br><span class="line">		<span class="comment">//    &gt; check 函数的参数 3 用来判断边数。</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//加 1 的原因，可以类比菊花图的花心。考虑每个点，其周围的边的删边顺序。</span></span><br><span class="line">		<span class="comment">//其删边关系正好是点的度数 +1（想想那个“吃豆人”的动图）。</span></span><br><span class="line">		<span class="comment">//实际上，由于虚点的存在，度数应该 +1。 </span></span><br><span class="line">			ret=<span class="built_in">min</span>(ret,root);</span><br><span class="line">		<span class="comment">//可以了，取个最小即可。 </span></span><br><span class="line">		<span class="keyword">for</span>(ll i=G.head[root];i;i=G.e[i].nxt)</span><br><span class="line">		&#123;</span><br><span class="line">			ll son=G.e[i].to;</span><br><span class="line">			<span class="keyword">if</span>(edge==i) <span class="keyword">continue</span>;<span class="comment">//别返祖了</span></span><br><span class="line">			<span class="comment">//我们习惯于记录一个点的父亲，其实判断边也行 </span></span><br><span class="line">			<span class="keyword">if</span>(U.<span class="built_in">check</span>(edge,i,deg[root]<span class="number">+1</span>))</span><br><span class="line">			<span class="comment">//接下来判断这个点能不能当作中转点。</span></span><br><span class="line">			</span><br><span class="line">			<span class="comment">//实际上也当作是找起始边，因为判断条件相同， </span></span><br><span class="line">			<span class="comment">//这也是我们 dfs1 传参数刚开始传两个 id[i] 所决定的 </span></span><br><span class="line">			</span><br><span class="line">			<span class="comment">//  - 首先保证不是同一链（我们本来就要连啊） </span></span><br><span class="line">			<span class="comment">//    &gt; check 函数对于同一链，返回 0。 </span></span><br><span class="line">			<span class="comment">//  - 特殊情况：这个边连接两条链，包含起始边和终边。</span></span><br><span class="line">			<span class="comment">//    这时一定连，防止提前自闭。 </span></span><br><span class="line">			<span class="comment">//    &gt; 由于虚点的存在，实际上 check 函数发现这两条边已经是</span></span><br><span class="line">			<span class="comment">//      同一链了，且恰好就是点的度数，也就返回 1 了。 </span></span><br><span class="line">			<span class="comment">//      不禁让我感慨：check 函数太妙了，直接解决了这么多情况！ </span></span><br><span class="line">				ret=<span class="built_in">min</span>(ret,<span class="built_in">dfs1</span>(son,i^<span class="number">1</span>));</span><br><span class="line">			<span class="comment">//为了方便，异或 1 表示反向边（这是我们连续添加两条有向边决定的）</span></span><br><span class="line">			<span class="comment">//也是奇怪的 cnt 从 (n+1)/2*2+1 开始决定的 </span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">ll <span class="title">dfs2</span><span class="params">(ll root,ll edge,ll des)</span><span class="comment">//更新删边条件（并查集） </span></span></span><br><span class="line"><span class="function">	</span>&#123;<span class="comment">//这些就很好理解了 </span></span><br><span class="line">		<span class="keyword">if</span>(root==des)</span><br><span class="line">		&#123;</span><br><span class="line">			U.<span class="built_in">merge</span>(edge,root);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//为了便于判断到底是要更新哪个路径 </span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(ll i=G.head[root];i;i=G.e[i].nxt)</span><br><span class="line">		&#123;</span><br><span class="line">			ll son=G.e[i].to;</span><br><span class="line">			<span class="keyword">if</span>(edge==i) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">dfs2</span>(son,i^<span class="number">1</span>,des))<span class="comment">//沿路径更新 </span></span><br><span class="line">			&#123;</span><br><span class="line">				U.<span class="built_in">merge</span>(edge,i);</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			ans[i]=<span class="built_in">dfs1</span>(id[i],id[i]);</span><br><span class="line">			<span class="built_in">dfs2</span>(id[i],id[i],ans[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ll T,a,b;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;T);</span><br><span class="line">		<span class="keyword">while</span>(T--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">			G.<span class="built_in">clear</span>();<span class="built_in">ms</span>(deg);</span><br><span class="line">			G.cnt=(n<span class="number">+1</span>)/<span class="number">2</span>*<span class="number">2</span><span class="number">+1</span>;</span><br><span class="line">			<span class="comment">//把它变成奇数，且比 n 大</span></span><br><span class="line">			<span class="comment">//便于虚边的建立（虚边都是 1~n 的） </span></span><br><span class="line">			</span><br><span class="line">			<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,id+i);</span><br><span class="line">			<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">				G.<span class="built_in">add</span>(a,b);G.<span class="built_in">add</span>(b,a);</span><br><span class="line">				deg[a]++;deg[b]++;</span><br><span class="line">			&#125;</span><br><span class="line">			U.<span class="built_in">init</span>(G.cnt);<span class="comment">//依据 cnt 来开并查集 </span></span><br><span class="line">			<span class="built_in">solve</span>();</span><br><span class="line">			<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,ans[i]);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Perfect::<span class="built_in">main</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">//433 行！ </span></span><br></pre></td></tr></table></figure>
<p><del>还活着的人举一下手</del>。</p>
<h3 id="x05-总结">0x05 总结</h3>
<p>通过这题大家可以发现，此题正解与部分分是紧密相连的，如果没有对部分分的思考，很难直接想到正解。</p>
<p>这启发我们当无法直接想到正解时，可以思考一些此题的部分分，找到部分分与正解之间的联系，进而以迂回的方式找到正解。一些人因过于追求正解，直接跳过部分分思考正解，结果反而无法得到正解。</p>
<p><del>对于我这种蒟蒻来说，只会 10 分的暴搜</del>。</p>
<h2 id="代码">代码</h2>
<p><del>实在不行就复制，粘贴！恭喜你 A 了此题！</del></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> Force</span><br><span class="line">&#123;</span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> ms(a) memset(a,0,sizeof(a))</span></span><br><span class="line">	<span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">	<span class="type">const</span> ll N=<span class="number">2000</span><span class="number">+10</span>,inf=<span class="number">2147483647</span>;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">edge</span>&#123;ll u,v;&#125;e[N*<span class="number">2</span>];</span><br><span class="line">	ll n,num[N],vis[N],a[N],ans[N],tmp[N],ump[N];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			tmp[i]=num[i];</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line">			<span class="built_in">swap</span>(tmp[e[a[i]].u],tmp[e[a[i]].v]);</span><br><span class="line">		ll flag=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			ump[tmp[i]]=i;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(ump[i]&gt;ans[i]) &#123;flag=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">			<span class="keyword">if</span>(ump[i]&lt;ans[i]) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(!flag) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) ans[i]=ump[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(ll step)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(step&gt;=n)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">solve</span>();</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;</span><br><span class="line">			vis[i]=<span class="number">1</span>;a[step]=i;</span><br><span class="line">			<span class="built_in">dfs</span>(step<span class="number">+1</span>);</span><br><span class="line">			vis[i]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ll T,a,b;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;T);</span><br><span class="line">		<span class="keyword">while</span>(T--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">			<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a);</span><br><span class="line">				num[a]=i;</span><br><span class="line">				ans[i]=inf;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">				e[i].u=a,e[i].v=b;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,ans[i]);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Flower</span><br><span class="line">&#123;</span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> ms(a) memset(a,0,sizeof(a))</span></span><br><span class="line">	<span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">	<span class="type">const</span> ll N=<span class="number">2000</span><span class="number">+10</span>,inf=<span class="number">2147483647</span>;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">UFDS</span> </span><br><span class="line">	&#123;</span><br><span class="line">  		ll dad[N],n;</span><br><span class="line">    	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(ll p)</span></span>&#123; n=p; <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) dad[i]=i; &#125;</span><br><span class="line">    	<span class="function">ll <span class="title">find</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">    	</span>&#123;   </span><br><span class="line">           	<span class="keyword">while</span>(x!=dad[x])</span><br><span class="line">            	x=dad[x]=dad[dad[x]];</span><br><span class="line">         	<span class="keyword">return</span> x;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function">    	</span>&#123;</span><br><span class="line">           ll d1=<span class="built_in">find</span>(x),d2=<span class="built_in">find</span>(y);</span><br><span class="line">           dad[d1]=d2;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">    	&#125;	</span><br><span class="line">    	<span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function">    	</span>&#123;</span><br><span class="line">           ll d1=<span class="built_in">find</span>(x),d2=<span class="built_in">find</span>(y);</span><br><span class="line">           <span class="keyword">if</span>(d1==d2) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">	&#125;U;</span><br><span class="line">	ll n,num[N],id[N],vis[N],ans[N];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		U.<span class="built_in">init</span>(n);</span><br><span class="line">		<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(ll j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(vis[j]||(i!=n&amp;&amp;U.<span class="built_in">check</span>(id[i],j))) <span class="keyword">continue</span>;</span><br><span class="line">				ans[i]=j;vis[j]=<span class="number">1</span>;U.<span class="built_in">merge</span>(j,id[i]);<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ll T,a,b;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;T);</span><br><span class="line">		<span class="keyword">while</span>(T--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">			<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,id+i);</span><br><span class="line">				num[id[i]]=i;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">			<span class="built_in">solve</span>(); </span><br><span class="line">			<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,ans[i]);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		&#125; </span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Chain</span><br><span class="line">&#123;</span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> ms(a) memset(a,0,sizeof(a))</span></span><br><span class="line">	<span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">	<span class="type">const</span> ll N=<span class="number">2000</span><span class="number">+10</span>,inf=<span class="number">2147483647</span>;</span><br><span class="line">	<span class="type">const</span> ll UnLim=<span class="number">0</span>,FirS=<span class="number">1</span>,SecF=<span class="number">2</span>;</span><br><span class="line">	ll n,id[N],ans[N],deg[N];</span><br><span class="line">	ll dfn[N],link[N],tag[N],cnt=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">graph</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">struct</span> <span class="title class_">edge</span>&#123;ll nxt,to;&#125;e[N*<span class="number">2</span>];</span><br><span class="line">		ll head[N],cnt;</span><br><span class="line">		<span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			<span class="built_in">ms</span>(e);<span class="built_in">ms</span>(head);</span><br><span class="line">			cnt=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(ll a,ll b)</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			e[++cnt]=(edge)&#123;head[a],b&#125;;</span><br><span class="line">			head[a]=cnt;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;G;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(ll root,ll dad)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		dfn[root]=++cnt;</span><br><span class="line">		link[cnt]=root;</span><br><span class="line">		<span class="keyword">for</span>(ll i=G.head[root];i;i=G.e[i].nxt)</span><br><span class="line">		&#123;</span><br><span class="line">			ll son=G.e[i].to;</span><br><span class="line">			<span class="keyword">if</span>(son==dad) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="built_in">dfs</span>(son,root);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			<span class="keyword">if</span>(deg[i]==<span class="number">1</span>) &#123;<span class="built_in">dfs</span>(i,i);<span class="keyword">break</span>;&#125;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			ll now=dfn[id[i]],des=inf;</span><br><span class="line">			<span class="keyword">if</span>(tag[now]!=FirS)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span>(ll j=now<span class="number">+1</span>;j&lt;=n;j++)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(tag[j]!=FirS) des=<span class="built_in">min</span>(des,link[j]);</span><br><span class="line">					<span class="keyword">if</span>(tag[j]==SecF) <span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(tag[now]!=SecF)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span>(ll j=now<span class="number">-1</span>;j&gt;=<span class="number">1</span>;j--)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(tag[j]!=SecF) des=<span class="built_in">min</span>(des,link[j]);</span><br><span class="line">					<span class="keyword">if</span>(tag[j]==FirS) <span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(dfn[des]&gt;now)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span>(ll j=dfn[des]<span class="number">-1</span>;j&gt;=now<span class="number">+1</span>;j--) tag[j]=FirS;</span><br><span class="line">				tag[now]=tag[dfn[des]]=SecF;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(dfn[des]&lt;now)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span>(ll j=dfn[des]<span class="number">+1</span>;j&lt;=now<span class="number">-1</span>;j++) tag[j]=SecF;</span><br><span class="line">				tag[now]=tag[dfn[des]]=FirS;</span><br><span class="line">			&#125;</span><br><span class="line">			tag[<span class="number">1</span>]=tag[n]=UnLim;</span><br><span class="line">			ans[i]=des; </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ll T,a,b;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;T);</span><br><span class="line">		<span class="keyword">while</span>(T--)</span><br><span class="line">		&#123;</span><br><span class="line">			G.<span class="built_in">clear</span>();</span><br><span class="line">			<span class="built_in">ms</span>(deg);<span class="built_in">ms</span>(tag);</span><br><span class="line">			cnt=<span class="number">0</span>;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">			<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,id+i);</span><br><span class="line">			<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">				G.<span class="built_in">add</span>(a,b);G.<span class="built_in">add</span>(b,a);</span><br><span class="line">				deg[a]++;deg[b]++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">solve</span>();</span><br><span class="line">			<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,ans[i]);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Perfect </span><br><span class="line">&#123;</span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> ms(a) memset(a,0,sizeof(a))</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> for(a) for(register a) </span></span><br><span class="line">	<span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">	<span class="type">const</span> ll N=<span class="number">20000</span><span class="number">+10</span>,inf=<span class="number">2147483647</span>;</span><br><span class="line">	ll n,id[N],ans[N],deg[N];</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">UFDS</span></span><br><span class="line">	&#123;</span><br><span class="line">  		ll dad[N],out[N],in[N],n;</span><br><span class="line">  		ll size[N];</span><br><span class="line">    	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(ll p)</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			n=p;</span><br><span class="line">			<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			&#123;</span><br><span class="line">				dad[i]=i;</span><br><span class="line">				out[i]=in[i]=<span class="number">0</span>; </span><br><span class="line">				size[i]=<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">    	<span class="function">ll <span class="title">find</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">    	</span>&#123;</span><br><span class="line">           	<span class="keyword">while</span>(x!=dad[x])</span><br><span class="line">            	x=dad[x]=dad[dad[x]];</span><br><span class="line">         	<span class="keyword">return</span> x;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function">    	</span>&#123;</span><br><span class="line">            ll d1=<span class="built_in">find</span>(x),d2=<span class="built_in">find</span>(y);</span><br><span class="line">            dad[d1]=d2;size[d2]+=size[d1];</span><br><span class="line">            out[x]=in[y]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    	&#125;	</span><br><span class="line">    	<span class="function">ll <span class="title">check</span><span class="params">(ll x,ll y,ll jud)</span></span></span><br><span class="line"><span class="function">    	</span>&#123;</span><br><span class="line">    		<span class="keyword">if</span>(in[y]||out[x]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            ll d1=<span class="built_in">find</span>(x),d2=<span class="built_in">find</span>(y);</span><br><span class="line">            <span class="keyword">if</span>(d1==d2&amp;&amp;size[d1]!=jud) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">	&#125;U;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">graph</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">struct</span> <span class="title class_">edge</span>&#123;ll nxt,to;&#125;e[N*<span class="number">2</span>];</span><br><span class="line">		ll head[N],cnt;</span><br><span class="line">		<span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			<span class="built_in">ms</span>(e);<span class="built_in">ms</span>(head);</span><br><span class="line">			cnt=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(ll a,ll b)</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			e[++cnt]=(edge)&#123;head[a],b&#125;;</span><br><span class="line">			head[a]=cnt;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;G;</span><br><span class="line">	<span class="function">ll <span class="title">dfs1</span><span class="params">(ll root,ll edge)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ll ret=n<span class="number">+1</span>;</span><br><span class="line">		<span class="keyword">if</span>(root!=edge&amp;&amp;U.<span class="built_in">check</span>(edge,root,deg[root]<span class="number">+1</span>))</span><br><span class="line">			ret=<span class="built_in">min</span>(ret,root);</span><br><span class="line">		<span class="keyword">for</span>(ll i=G.head[root];i;i=G.e[i].nxt)</span><br><span class="line">		&#123;</span><br><span class="line">			ll son=G.e[i].to;</span><br><span class="line">			<span class="keyword">if</span>(edge==i) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span>(U.<span class="built_in">check</span>(edge,i,deg[root]<span class="number">+1</span>))</span><br><span class="line">				ret=<span class="built_in">min</span>(ret,<span class="built_in">dfs1</span>(son,i^<span class="number">1</span>));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">ll <span class="title">dfs2</span><span class="params">(ll root,ll edge,ll des)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(root==des)</span><br><span class="line">		&#123;</span><br><span class="line">			U.<span class="built_in">merge</span>(edge,root);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(ll i=G.head[root];i;i=G.e[i].nxt)</span><br><span class="line">		&#123;</span><br><span class="line">			ll son=G.e[i].to;</span><br><span class="line">			<span class="keyword">if</span>(edge==i) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">dfs2</span>(son,i^<span class="number">1</span>,des))</span><br><span class="line">			&#123;</span><br><span class="line">				U.<span class="built_in">merge</span>(edge,i);</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			ans[i]=<span class="built_in">dfs1</span>(id[i],id[i]);</span><br><span class="line">			<span class="built_in">dfs2</span>(id[i],id[i],ans[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ll T,a,b;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;T);</span><br><span class="line">		<span class="keyword">while</span>(T--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">			G.<span class="built_in">clear</span>();<span class="built_in">ms</span>(deg);</span><br><span class="line">			G.cnt=(n<span class="number">+1</span>)/<span class="number">2</span>*<span class="number">2</span><span class="number">+1</span>;</span><br><span class="line">			<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,id+i);</span><br><span class="line">			<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">				G.<span class="built_in">add</span>(a,b);G.<span class="built_in">add</span>(b,a);</span><br><span class="line">				deg[a]++;deg[b]++;</span><br><span class="line">			&#125;</span><br><span class="line">			U.<span class="built_in">init</span>(G.cnt);</span><br><span class="line">			<span class="built_in">solve</span>();</span><br><span class="line">			<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,ans[i]);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Perfect::<span class="built_in">main</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <categories>
        <category>OI</category>
        <category>题解</category>
        <category>社团讲评</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>暴搜</tag>
        <tag>并查集</tag>
        <tag>链表</tag>
        <tag>贪心</tag>
        <tag>毒瘤题</tag>
      </tags>
  </entry>
  <entry>
    <title>P7078 [CSP-S2020] 贪吃蛇</title>
    <url>/2021/07/28/P7078%20%5BCSP-S2020%5D%20%E8%B4%AA%E5%90%83%E8%9B%87/</url>
    <content><![CDATA[<p>这里，先放一个我做的 PPT：<a
href="https://cdn.jsdelivr.net/gh/yz-hs/PicGo/%E8%B4%AA%E5%90%83%E8%9B%87%5BCSP-S2020%5D-%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A.pps">link</a>。如果有补充，放在下面。</p>
<span id="more"></span>
<h1 id="完整代码">完整代码</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> _yz</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">	<span class="type">const</span> ll N=<span class="number">1000000</span><span class="number">+10</span>;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">Snakes</span><span class="comment">//使用运算符重载，可以方便地进行“蛇”运算。 </span></span><br><span class="line">	&#123;			 <span class="comment">//有题解使用 pair。这种东西是将两个数据合并到一块，两者数据类型不必相同。</span></span><br><span class="line">		ll id,hp;<span class="comment">//蛇的体力，编号。 </span></span><br><span class="line">		<span class="type">bool</span> <span class="keyword">operator</span>&gt;(Snakes b)<span class="comment">//定义蛇的大小。 </span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">this</span>-&gt;hp==b.hp) <span class="keyword">return</span> <span class="keyword">this</span>-&gt;id&gt;b.id;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>-&gt;hp&gt;b.hp;<span class="comment">//this 是一个结构体指针，指向左值的地址。访问结构体成员的值使用 -&gt; 运算符。 </span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">bool</span> <span class="keyword">operator</span>&lt;(Snakes b)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">this</span>-&gt;hp==b.hp) <span class="keyword">return</span> <span class="keyword">this</span>-&gt;id&lt;b.id;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>-&gt;hp&lt;b.hp;</span><br><span class="line">		&#125;</span><br><span class="line">		Snakes <span class="keyword">operator</span>-(Snakes b)<span class="comment">//定义蛇的“吃”运算。 </span></span><br><span class="line">		&#123;</span><br><span class="line">			Snakes <span class="type">_t</span>=*<span class="keyword">this</span>;<span class="comment">//!!! 40-&gt;100 qwq</span></span><br><span class="line">			<span class="type">_t</span>.hp=<span class="keyword">this</span>-&gt;hp-b.hp;</span><br><span class="line">			<span class="keyword">return</span> <span class="type">_t</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;s[N];</span><br><span class="line">	ll n,ans=<span class="number">0</span>;</span><br><span class="line">	deque&lt;Snakes&gt;q1,q2;<span class="comment">//q1 是初始队列，q2 是吃了之后的队列（单调不升） </span></span><br><span class="line">	<span class="comment">/*  deque 的用法</span></span><br><span class="line"><span class="comment">	q.front() 返回队首元素。</span></span><br><span class="line"><span class="comment">	q.back() 返回队尾元素。</span></span><br><span class="line"><span class="comment">	q.pop_front() 返回队首元素。</span></span><br><span class="line"><span class="comment">	q.pop_back() 返回队尾元素。</span></span><br><span class="line"><span class="comment">	q.push_front(x) 从队首压入元素 x。</span></span><br><span class="line"><span class="comment">	q.push_back(x) 从队尾压入元素 x。 </span></span><br><span class="line"><span class="comment">	q.size() 返回队列大小。</span></span><br><span class="line"><span class="comment">	q.clear() 清空队列。 </span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		q<span class="number">1.</span><span class="built_in">clear</span>();q<span class="number">2.</span><span class="built_in">clear</span>();</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			q<span class="number">1.</span><span class="built_in">push_front</span>(s[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">Snakes <span class="title">getF</span><span class="params">()</span><span class="comment">//取最大。 </span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Snakes S;</span><br><span class="line">		<span class="keyword">if</span>(q<span class="number">2.</span><span class="built_in">empty</span>() ||<span class="comment">//最开始，q2 为空，此时 q1 一定不为空。所以只能选择 q1. </span></span><br><span class="line">		   (!q<span class="number">1.</span><span class="built_in">empty</span>()&amp;&amp;<span class="comment">//首先保证 q1 不为空。 </span></span><br><span class="line">		   q<span class="number">1.f</span>ront()&gt;q<span class="number">2.f</span>ront()))<span class="comment">//再保证 q1 比 q2 大。 </span></span><br><span class="line">		     S=q<span class="number">1.f</span>ront(),q<span class="number">1.</span><span class="built_in">pop_front</span>();</span><br><span class="line">		<span class="keyword">else</span> S=q<span class="number">2.f</span>ront(),q<span class="number">2.</span><span class="built_in">pop_front</span>();<span class="comment">//否则是 q2。 </span></span><br><span class="line">		<span class="keyword">return</span> S;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">Snakes <span class="title">getB</span><span class="params">()</span><span class="comment">//取 q1 最小。 </span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Snakes S=q<span class="number">1.</span><span class="built_in">back</span>();</span><br><span class="line">		q<span class="number">1.</span><span class="built_in">pop_back</span>();</span><br><span class="line">		<span class="keyword">return</span> S;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">Snakes <span class="title">Check</span><span class="params">()</span><span class="comment">//检查是否为最弱蛇。 </span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Snakes S;</span><br><span class="line">		<span class="keyword">if</span>(!q<span class="number">1.</span><span class="built_in">empty</span>()) S=q<span class="number">1.</span><span class="built_in">back</span>();</span><br><span class="line">		<span class="keyword">if</span>(!q<span class="number">2.</span><span class="built_in">empty</span>()&amp;&amp;S&gt;q<span class="number">2.</span><span class="built_in">back</span>()) S=q<span class="number">2.</span><span class="built_in">back</span>();</span><br><span class="line">		<span class="keyword">return</span> S; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">/*  思路： </span></span><br><span class="line"><span class="comment">		将整场决斗分为两个阶段。</span></span><br><span class="line"><span class="comment">		 </span></span><br><span class="line"><span class="comment">		有一个显然的结论：当前最强的蛇如果吃了最弱的蛇之后，没有变成最弱的蛇，它一定会选择吃。</span></span><br><span class="line"><span class="comment">		引理 1：如果蛇们按照规则一直吃，则吃完后的蛇是越来越弱的。</span></span><br><span class="line"><span class="comment">			    即，若 a_i 比 a_j 先吃，则 a_i &gt; a_j。</span></span><br><span class="line"><span class="comment">		证明 引理 1：最强蛇一定不如以前强，最弱蛇一定不如以前弱。 </span></span><br><span class="line"><span class="comment">		证明 显然的结论：它如果吃了，仍最强，不吃白不吃；</span></span><br><span class="line"><span class="comment">						 它如果吃了，不是最强的，则根据引理 1，之后的蛇吃后，一定比它要弱，一定会想尽办法不死。</span></span><br><span class="line"><span class="comment">						 因此不管如何，它一定死不了。</span></span><br><span class="line"><span class="comment">		把 当前最强的蛇吃了最弱的蛇之后没有变成最弱的蛇 这个阶段，定为第一阶段。 </span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">		然而，可能当前最强的蛇吃了最弱的蛇之后，变成了最弱的蛇！这时候，它吃不吃，取决于后面的蛇是否吃。</span></span><br><span class="line"><span class="comment">		推理一下： </span></span><br><span class="line"><span class="comment">		- 如果 a_i 吃了，变成最弱蛇，而 a_j 再吃 a_i 后不是最弱蛇，则 a_j 一定吃，那 a_i 就死了，所以 a_i 不能吃。</span></span><br><span class="line"><span class="comment">		- 如果 a_i 吃了，变成最弱蛇，而 a_j 再吃 a_i 后是最弱蛇，而 a_k 吃了 a_j 不是最弱蛇，则 a_k 一定吃，</span></span><br><span class="line"><span class="comment">		  那 a_j 就死了，所以 a_j 不能吃。所以 a_i 能吃。</span></span><br><span class="line"><span class="comment">		- 吃吃吃，如果最后场上只有两条蛇，则 a_i 无论如何都要吃。</span></span><br><span class="line"><span class="comment">		把 当前最强的蛇吃了最弱的蛇之后都变成最弱的蛇 这个阶段，定为第二阶段。 </span></span><br><span class="line"><span class="comment">		所以这个问题就变成了一个递归的问题，边界是一条蛇打破了第二阶段或场上只有两条蛇了。</span></span><br><span class="line"><span class="comment">		实际上，在程序设计时，不用写递归，因为注意到 a_i 能不能吃和递归层数的奇偶性有关。所以只需一个 while 即可解决。 </span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">/*  程序设计：</span></span><br><span class="line"><span class="comment">		定义双端队列 q1，q2。我们根据引理 1 找到了单调性，所以不用带 log 的数据结构维护。 </span></span><br><span class="line"><span class="comment">		第一阶段： </span></span><br><span class="line"><span class="comment">			设 G 要吃 L，变成 T。之后把 T 压入 q2 尾部。 </span></span><br><span class="line"><span class="comment">		    q2 队列中的蛇在第一阶段一定不会被吃（如果被吃，则说明上一个 G 变成了最弱蛇，进入第二阶段）。</span></span><br><span class="line"><span class="comment">		第二阶段：</span></span><br><span class="line"><span class="comment">			只需维护一个最弱蛇，不用再压入队列，因为第二阶段结束后整个决斗就停止了。并统计吃的次数。 </span></span><br><span class="line"><span class="comment">			这个阶段用来看能不能再吃一次。 </span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		<span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			ll cnt=<span class="number">0</span>;<span class="comment">//吃的次数 </span></span><br><span class="line">			<span class="keyword">if</span>(q<span class="number">1.</span><span class="built_in">size</span>()+q<span class="number">2.</span><span class="built_in">size</span>()&lt;=<span class="number">2</span>) &#123;ans=<span class="number">1</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">			Snakes L=<span class="built_in">getB</span>(),G=<span class="built_in">getF</span>();</span><br><span class="line">			Snakes T=(G-L);</span><br><span class="line">			<span class="keyword">if</span>(T&lt;q<span class="number">1.</span><span class="built_in">back</span>() || q<span class="number">1.</span><span class="built_in">empty</span>())<span class="comment">//T == L</span></span><br><span class="line">			&#123;</span><br><span class="line">				ans=q<span class="number">1.</span><span class="built_in">size</span>()+q<span class="number">2.</span><span class="built_in">size</span>()<span class="number">+2</span>;<span class="comment">//答案不必动态统计。 </span></span><br><span class="line">				<span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					cnt++;</span><br><span class="line">					<span class="keyword">if</span>(q<span class="number">1.</span><span class="built_in">size</span>()+q<span class="number">2.</span><span class="built_in">size</span>()<span class="number">+1</span>&lt;=<span class="number">2</span>)&#123;ans-=(cnt%<span class="number">2</span>==<span class="number">0</span>);<span class="comment">/*奇偶性*/</span><span class="keyword">return</span>;&#125;</span><br><span class="line">					G=<span class="built_in">getF</span>();T=(G-T);</span><br><span class="line">					<span class="keyword">if</span>(T&gt;<span class="built_in">Check</span>())&#123;ans-=(cnt%<span class="number">2</span>==<span class="number">0</span>);<span class="keyword">return</span>;&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;<span class="keyword">else</span> q<span class="number">2.</span><span class="built_in">push_back</span>(T);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">yzmain</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ll T,t1,t2,k;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;T);</span><br><span class="line">		<span class="keyword">for</span>(ll qwq=<span class="number">1</span>;qwq&lt;=T;qwq++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(qwq==<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">				<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;s[i].hp);</span><br><span class="line">					s[i].id=i;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;k);</span><br><span class="line">				<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;t1,&amp;t2);</span><br><span class="line">					s[t1].hp=t2;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">init</span>();</span><br><span class="line">			<span class="built_in">solve</span>();</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//freopen(&quot;snakes.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">	<span class="comment">//freopen(&quot;out.txt&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">	_yz::<span class="built_in">yzmain</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="无注释版">无注释版</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> _yz</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">	<span class="type">const</span> ll N=<span class="number">1000000</span><span class="number">+10</span>;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">Snakes</span></span><br><span class="line">	&#123;</span><br><span class="line">		ll id,hp;</span><br><span class="line">		<span class="type">bool</span> <span class="keyword">operator</span>&gt;(Snakes b)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">this</span>-&gt;hp==b.hp) <span class="keyword">return</span> <span class="keyword">this</span>-&gt;id&gt;b.id;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>-&gt;hp&gt;b.hp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">bool</span> <span class="keyword">operator</span>&lt;(Snakes b)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">this</span>-&gt;hp==b.hp) <span class="keyword">return</span> <span class="keyword">this</span>-&gt;id&lt;b.id;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>-&gt;hp&lt;b.hp;</span><br><span class="line">		&#125;</span><br><span class="line">		Snakes <span class="keyword">operator</span>-(Snakes b)</span><br><span class="line">		&#123;</span><br><span class="line">			Snakes <span class="type">_t</span>=*<span class="keyword">this</span>;</span><br><span class="line">			<span class="type">_t</span>.hp=<span class="keyword">this</span>-&gt;hp-b.hp;</span><br><span class="line">			<span class="keyword">return</span> <span class="type">_t</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;s[N];</span><br><span class="line">	ll n,ans=<span class="number">0</span>;</span><br><span class="line">	deque&lt;Snakes&gt;q1,q2;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		q<span class="number">1.</span><span class="built_in">clear</span>();q<span class="number">2.</span><span class="built_in">clear</span>();</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			q<span class="number">1.</span><span class="built_in">push_front</span>(s[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">Snakes <span class="title">getF</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Snakes S;</span><br><span class="line">		<span class="keyword">if</span>(q<span class="number">2.</span><span class="built_in">empty</span>() || (!q<span class="number">1.</span><span class="built_in">empty</span>()&amp;&amp;q<span class="number">1.f</span>ront()&gt;q<span class="number">2.f</span>ront()))</span><br><span class="line">		     S=q<span class="number">1.f</span>ront(),q<span class="number">1.</span><span class="built_in">pop_front</span>();</span><br><span class="line">		<span class="keyword">else</span> S=q<span class="number">2.f</span>ront(),q<span class="number">2.</span><span class="built_in">pop_front</span>(); </span><br><span class="line">		<span class="keyword">return</span> S;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">Snakes <span class="title">getB</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Snakes S=q<span class="number">1.</span><span class="built_in">back</span>();</span><br><span class="line">		q<span class="number">1.</span><span class="built_in">pop_back</span>();</span><br><span class="line">		<span class="keyword">return</span> S;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">Snakes <span class="title">Check</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Snakes S;</span><br><span class="line">		<span class="keyword">if</span>(!q<span class="number">1.</span><span class="built_in">empty</span>()) S=q<span class="number">1.</span><span class="built_in">back</span>();</span><br><span class="line">		<span class="keyword">if</span>(!q<span class="number">2.</span><span class="built_in">empty</span>()&amp;&amp;S&gt;q<span class="number">2.</span><span class="built_in">back</span>()) S=q<span class="number">2.</span><span class="built_in">back</span>();</span><br><span class="line">		<span class="keyword">return</span> S; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			ll cnt=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(q<span class="number">1.</span><span class="built_in">size</span>()+q<span class="number">2.</span><span class="built_in">size</span>()&lt;=<span class="number">2</span>) &#123;ans=<span class="number">1</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">			Snakes L=<span class="built_in">getB</span>(),G=<span class="built_in">getF</span>();</span><br><span class="line">			Snakes T=(G-L);</span><br><span class="line">			<span class="keyword">if</span>(T&lt;q<span class="number">1.</span><span class="built_in">back</span>() || q<span class="number">1.</span><span class="built_in">empty</span>())</span><br><span class="line">			&#123;</span><br><span class="line">				ans=q<span class="number">1.</span><span class="built_in">size</span>()+q<span class="number">2.</span><span class="built_in">size</span>()<span class="number">+2</span>; </span><br><span class="line">				<span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					cnt++;</span><br><span class="line">					<span class="keyword">if</span>(q<span class="number">1.</span><span class="built_in">size</span>()+q<span class="number">2.</span><span class="built_in">size</span>()<span class="number">+1</span>&lt;=<span class="number">2</span>)&#123;ans-=(cnt%<span class="number">2</span>==<span class="number">0</span>);<span class="keyword">return</span>;&#125;</span><br><span class="line">					G=<span class="built_in">getF</span>();T=(G-T);</span><br><span class="line">					<span class="keyword">if</span>(T&gt;<span class="built_in">Check</span>())&#123;ans-=(cnt%<span class="number">2</span>==<span class="number">0</span>);<span class="keyword">return</span>;&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;<span class="keyword">else</span> q<span class="number">2.</span><span class="built_in">push_back</span>(T);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">yzmain</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ll T,t1,t2,k;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;T);</span><br><span class="line">		<span class="keyword">for</span>(ll qwq=<span class="number">1</span>;qwq&lt;=T;qwq++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(qwq==<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">				<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;s[i].hp);</span><br><span class="line">					s[i].id=i;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;k);</span><br><span class="line">				<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;t1,&amp;t2);</span><br><span class="line">					s[t1].hp=t2;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">init</span>();</span><br><span class="line">			<span class="built_in">solve</span>();</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	_yz::<span class="built_in">yzmain</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>OI</category>
        <category>题解</category>
        <category>社团讲评</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>模拟</tag>
        <tag>毒瘤题</tag>
        <tag>队列</tag>
        <tag>博弈论</tag>
      </tags>
  </entry>
  <entry>
    <title>P3960 [NOIP2017 提高组] 列队</title>
    <url>/2021/06/27/P3960%20%5BNOIP2017%20%E6%8F%90%E9%AB%98%E7%BB%84%5D%20%E5%88%97%E9%98%9F/</url>
    <content><![CDATA[<h1 id="题意">题意</h1>
<p>《<span class="math inline">\(900\)</span> 亿 人 一 起 军 训》</p>
<p>Pomelorin 所在的方阵中有 <span class="math inline">\(n \times
m\)</span> 名学生（<span class="math inline">\(n\)</span> 行 <span
class="math inline">\(m\)</span> 列）。初始时，第 <span
class="math inline">\(i\)</span> 行第 <span
class="math inline">\(j\)</span> 列 的学生的编号是 <span
class="math inline">\((i-1)\times m + j\)</span>。</p>
<span id="more"></span>
<p>一共发生了 <span class="math inline">\(q\)</span>
件离队事件。每一次离队事件可以用数对 <span
class="math inline">\((x,y)\)</span>（满足 <span class="math inline">\(1
\le x \le n\)</span>，<span class="math inline">\(1 \le y \le
m\)</span>）描述，表示第 <span class="math inline">\(x\)</span> 行第
<span class="math inline">\(y\)</span>
列的学生离队。在有学生离队后，队伍中出现了一个空位。之后方阵开始：</p>
<ul>
<li><p>向左看齐。这时第一列保持不动，所有学生向左填补空缺。之后空位在第
<span class="math inline">\(x\)</span> 行第 <span
class="math inline">\(m\)</span> 列。</p></li>
<li><p>向前看齐。这时第一行保持不动，所有学生向前填补空缺。之后空位在第
<span class="math inline">\(n\)</span> 行第 <span
class="math inline">\(m\)</span> 列。</p></li>
</ul>
<p>不能有两个或更多学生同时离队。离队的学生会自然地填补到第 <span
class="math inline">\(n\)</span> 行第 <span
class="math inline">\(m\)</span> 列。</p>
<p>计算每一次离队事件中，离队的同学的编号是多少。每一个同学的编号不会随着离队事件的发生而改变，在发生离队事件后方阵中同学的编号可能是乱序的。</p>
<h1 id="数据规模与约定">数据规模与约定</h1>
<table>
<colgroup>
<col style="width: 13%" />
<col style="width: 22%" />
<col style="width: 22%" />
<col style="width: 22%" />
<col style="width: 17%" />
</colgroup>
<thead>
<tr>
<th style="text-align: center;">测试点编号</th>
<th style="text-align: center;"><span
class="math inline">\(n\)</span></th>
<th style="text-align: center;"><span
class="math inline">\(m\)</span></th>
<th style="text-align: center;"><span
class="math inline">\(q\)</span></th>
<th style="text-align: center;">其他约定</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;"><span class="math inline">\(1\sim
6\)</span></td>
<td style="text-align: center;"><span class="math inline">\(\le
10^3\)</span></td>
<td style="text-align: center;"><span class="math inline">\(\le
10^3\)</span></td>
<td style="text-align: center;"><span class="math inline">\(\le
500\)</span></td>
<td style="text-align: center;">无</td>
</tr>
<tr>
<td style="text-align: center;"><span class="math inline">\(7\sim
10\)</span></td>
<td style="text-align: center;"><span class="math inline">\(\le 5\times
10^4\)</span></td>
<td style="text-align: center;"><span class="math inline">\(\le 5\times
10^4\)</span></td>
<td style="text-align: center;"><span class="math inline">\(\le
500\)</span></td>
<td style="text-align: center;">无</td>
</tr>
<tr>
<td style="text-align: center;"><span class="math inline">\(11\sim
12\)</span></td>
<td style="text-align: center;"><span
class="math inline">\(=1\)</span></td>
<td style="text-align: center;"><span class="math inline">\(\le
10^5\)</span></td>
<td style="text-align: center;"><span class="math inline">\(\le
10^5\)</span></td>
<td style="text-align: center;">所有事件 <span
class="math inline">\(x=1\)</span></td>
</tr>
<tr>
<td style="text-align: center;"><span class="math inline">\(13\sim
14\)</span></td>
<td style="text-align: center;"><span
class="math inline">\(=1\)</span></td>
<td style="text-align: center;"><span class="math inline">\(\le 3\times
10^5\)</span></td>
<td style="text-align: center;"><span class="math inline">\(\le 3\times
10^5\)</span></td>
<td style="text-align: center;">所有事件 <span
class="math inline">\(x=1\)</span></td>
</tr>
<tr>
<td style="text-align: center;"><span class="math inline">\(15\sim
16\)</span></td>
<td style="text-align: center;"><span class="math inline">\(\le 3\times
10^5\)</span></td>
<td style="text-align: center;"><span class="math inline">\(\le 3\times
10^5\)</span></td>
<td style="text-align: center;"><span class="math inline">\(\le 3\times
10^5\)</span></td>
<td style="text-align: center;">所有事件 <span
class="math inline">\(x=1\)</span></td>
</tr>
<tr>
<td style="text-align: center;"><span class="math inline">\(17\sim
18\)</span></td>
<td style="text-align: center;"><span class="math inline">\(\le
10^5\)</span></td>
<td style="text-align: center;"><span class="math inline">\(\le
10^5\)</span></td>
<td style="text-align: center;"><span class="math inline">\(\le
10^5\)</span></td>
<td style="text-align: center;">无</td>
</tr>
<tr>
<td style="text-align: center;"><span class="math inline">\(19\sim
20\)</span></td>
<td style="text-align: center;"><span class="math inline">\(\le 3\times
10^5\)</span></td>
<td style="text-align: center;"><span class="math inline">\(\le 3\times
10^5\)</span></td>
<td style="text-align: center;"><span class="math inline">\(\le 3\times
10^5\)</span></td>
<td style="text-align: center;">无</td>
</tr>
</tbody>
</table>
<p>数据保证每一个事件满足 <span class="math inline">\(1 \le x \le
n\)</span>，<span class="math inline">\(1 \le y \le m\)</span>。</p>
<details>
<summary>
点击查看题解
</summary>
<h1 id="题解">题解</h1>
<h2 id="模拟">1-6 模拟</h2>
<p>直接按照题意模拟。时间复杂度：<span
class="math inline">\(O(nm)\)</span>。可以获得 <span
class="math inline">\(30\)</span> 分。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> x,y;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">			g[i][j]=i*m-m+j;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,g[x][y]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j=y;j&lt;=m<span class="number">-1</span>;j++) <span class="built_in">swap</span>(g[x][j],g[x][j<span class="number">+1</span>]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j=x;j&lt;=n<span class="number">-1</span>;j++) <span class="built_in">swap</span>(g[j][m],g[j<span class="number">+1</span>][m]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="离散化">7-10 离散化</h2>
<p>我们发现，虽然 <span class="math inline">\(n\)</span> 和 <span
class="math inline">\(m\)</span> 的范围很大，但 <span
class="math inline">\(q\)</span>
很小；换言之，这个方阵中大部分行都用不到。所以我们对行进行离散。由于除了最后一列，其它列对方阵变换没有实质性影响；换言之，如果采用模拟的方式，其他列是不参与模拟过程的，所以我们只保留最后一列即可。</p>
<p>经过离散化，形成如下结构（<del>有图片，显得这篇题解完整</del>）：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/yz-hs/PicGo/%E5%88%97%E9%98%9F.png" /></p>
<p>然后直接按照题意模拟即可。</p>
<details>
<summary>
一个错误的离散化方法
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve2</span><span class="params">()</span><span class="comment">//错误做法 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//离散化后结构：网格形 </span></span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> px=<span class="number">0</span>,py=<span class="number">0</span>;<span class="comment">//离散化之后的矩阵的 m n </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,x+i,y+i);<span class="comment">//Query </span></span><br><span class="line">		bx[i]=x[i];by[i]=y[i];<span class="comment">//b 数组作为 tmp </span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(bx<span class="number">+1</span>,bx<span class="number">+1</span>+q);<span class="built_in">sort</span>(by<span class="number">+1</span>,by<span class="number">+1</span>+q);<span class="comment">//Begin of 离散化 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(bx[i<span class="number">-1</span>]!=bx[i]) px++;</span><br><span class="line">		<span class="keyword">if</span>(by[i<span class="number">-1</span>]!=by[i]) py++;</span><br><span class="line">		fx[bx[i]]=px;fy[by[i]]=py;<span class="comment">//f 数组用来根据原数找到相对位置 </span></span><br><span class="line">		ax[px]=bx[i];ay[py]=by[i];<span class="comment">//a 数组用来根据相对位置还原原数 </span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(ay[py]!=m) by[++py]=m,fy[m]=py,ay[py]=m; </span><br><span class="line">	<span class="comment">//End of 离散化 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">1</span>;i&lt;=px;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j=<span class="number">1</span>;j&lt;=py;j++)</span><br><span class="line">			g[i][j]=ax[i]*m-m+ay[j];<span class="comment">//g 数组下标是相对位置 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,g[fx[x[i]]][fy[y[i]]]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j=fy[y[i]];j&lt;=py<span class="number">-1</span>;j++) <span class="built_in">swap</span>(g[fx[x[i]]][j],g[fx[x[i]]][j<span class="number">+1</span>]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j=fx[x[i]];j&lt;=px<span class="number">-1</span>;j++) <span class="built_in">swap</span>(g[j][py],g[j<span class="number">+1</span>][py]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>错误原因：把列也离散化，其实只保留最后一列即可；将每行破坏，不能得出正确答案。</p>
<p>在行离散过程中，将最后一列破坏，不能得出正确答案。</p>
</details>
<details>
<summary>
一个繁琐的离散化方法
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> px=<span class="number">0</span>;<span class="comment">//离散化之后的行数 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,x+i,y+i);<span class="comment">//Query </span></span><br><span class="line">		bx[i]=x[i];<span class="comment">//b 数组作为 tmp </span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(bx<span class="number">+1</span>,bx<span class="number">+1</span>+q);<span class="comment">//Begin of 离散化 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(bx[i<span class="number">-1</span>]!=bx[i]) px++;</span><br><span class="line">		fx[bx[i]]=px;<span class="comment">//f 数组用来根据原数找到相对位置 </span></span><br><span class="line">		ax[px]=bx[i];<span class="comment">//a 数组用来根据相对位置还原原数 </span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">1</span>;i&lt;=px;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j=<span class="number">1</span>;j&lt;=m<span class="number">-1</span>;j++)</span><br><span class="line">			G[i][j]=ax[i]*m-m+j;<span class="comment">//G 数组下标是相对位置 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">1</span>;i&lt;=n;i++) L[i]=i*m;<span class="comment">//L 数组是最后一列 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(y[i]!=m) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,G[fx[x[i]]][y[i]]);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,L[x[i]]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j=y[i];j&lt;=m<span class="number">-2</span>;j++) <span class="built_in">swap</span>(G[fx[x[i]]][j],G[fx[x[i]]][j<span class="number">+1</span>]);</span><br><span class="line">		<span class="built_in">swap</span>(G[fx[x[i]]][m<span class="number">-1</span>],L[x[i]]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j=x[i];j&lt;=n<span class="number">-1</span>;j++) <span class="built_in">swap</span>(L[j],L[j<span class="number">+1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<p>另外，我们考虑到，行与行直接不会互相影响。所以，我们不用考虑离散化后各行在数组中的位置。由此，可以得到下面的优化版代码。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve5</span><span class="params">()</span><span class="comment">//对 solve3 的优化 行与行之间互不影响 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> px=<span class="number">0</span>,x,y;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">1</span>;i&lt;=n;i++) L[i]=i*m; </span><br><span class="line">	<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">		<span class="keyword">if</span>(bx[x]==<span class="number">0</span>) </span><br><span class="line">		&#123;</span><br><span class="line">			px++;bx[x]=px,h[px]=x;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">				G[px][j]=x*m-m+j;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(y!=m) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,G[bx[x]][y]);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,L[x]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j=y;j&lt;=m<span class="number">-2</span>;j++) <span class="built_in">swap</span>(G[bx[x]][j],G[bx[x]][j<span class="number">+1</span>]);</span><br><span class="line">		<span class="built_in">swap</span>(G[bx[x]][m<span class="number">-1</span>],L[x]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j=x;j&lt;=n<span class="number">-1</span>;j++) <span class="built_in">swap</span>(L[j],L[j<span class="number">+1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>时间复杂度是 <span class="math inline">\(O(qm)\)</span>，结合算法 1
可以得到 <span class="math inline">\(50\)</span> 分。</p>
<h2 id="树状数组-二分">11-16 树状数组 + 二分</h2>
<p>注意到此时的数据范围，对于所有询问，<span
class="math inline">\(x=1\)</span>。也就是说，只有第一行和最后一列有用（11-14
数据点本质上和 15-16 一样，故划归到 11-16）。</p>
<p>此时，我们可以将弯折的序列“掰直”，用一个数组维护。即，把第一行和最后一列压成一维数组。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">  |   =&gt;   ----- (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>)</span><br><span class="line">  |</span><br></pre></td></tr></table></figure>
<p>也就是说，维护的数列要支持两个操作：</p>
<ul>
<li>查询第 <span class="math inline">\(x\)</span> 个元素。</li>
<li>将元素移到数列最后面。</li>
</ul>
<p>这里使用一个巧妙的方法：开一个标记数组，初始时 <span
class="math inline">\(1\sim n+m-1\)</span>（末尾）都为 <span
class="math inline">\(1\)</span>，表示这个位置上有数；在发生离队事件后，相应的位置变为
<span class="math inline">\(0\)</span>，而当前数组末尾的下一个标记变为
<span class="math inline">\(1\)</span>，表示这个数移到末尾。</p>
<p>对这个数组求前缀和，其前缀和数组中的值正对应查询中的 <span
class="math inline">\(y\)</span>（<span class="math inline">\(y\)</span>
意义同题意所述），下标正对应现数列中第 <span
class="math inline">\(y\)</span> 个数所在位置。</p>
<p>树状数组维护标记数组的前缀和；利用二分，根据标记数组前缀和，来寻找数列中第
<span class="math inline">\(y\)</span> 个数所在位置。</p>
<p>时间复杂度是 <span class="math inline">\(O(N(\log
N)^2)\)</span>，结合前面的算法可得到 <span
class="math inline">\(80\)</span> 分。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve4</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> l,r,mid,Y,pos;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">1</span>;i&lt;=m;i++) a[i]=i,<span class="built_in">update</span>(i,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=m<span class="number">+1</span>;i&lt;=m+n<span class="number">-1</span>;i++) a[i]=(i-m<span class="number">+1</span>)*m,<span class="built_in">update</span>(i,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		l=<span class="number">1</span>,r=N2*<span class="number">4</span>;pos=n+m<span class="number">-1</span>+i;</span><br><span class="line">		<span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">		&#123;</span><br><span class="line">            mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">query</span>(mid)&gt;=y[i]) Y=mid,r=mid<span class="number">-1</span>;</span><br><span class="line">			<span class="keyword">else</span> l=mid<span class="number">+1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,a[Y]);</span><br><span class="line">		<span class="built_in">update</span>(Y,<span class="number">-1</span>);<span class="built_in">update</span>(pos,<span class="number">1</span>);a[pos]=a[Y];a[Y]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="动态开点线段树">1-20 动态开点线段树</h2>
<p>经过动态开点，可以节省一些空间，来足以通过本题。</p>
<p>我们要开 <span class="math inline">\(q+1\)</span>
棵线段树：为每个询问开一个（好理解的话是每行），为最后一列开一个。</p>
<p>线段树中，只有叶子节点维护
data（题目中人的编号）；各节点维护的信息还有
num（这个节点维护的元素个数）。</p>
<ul>
<li>update 操作：单点修改，修改叶子节点的 data
值。沿途中节点维护元素数加一；在行（或最后一列）的末尾插入即可。</li>
<li>query 操作：单点查询，查询线段树中存储的第 rank
个值。沿途中节点维护元素数减一（根据题意，询问完后接着删除）。如果递归进入左子树，仍在左子树查询第
rank 个值；如果进入右子树，则在右子树查询第 (rank <span
class="math inline">\(-\)</span> 左子树元素个数) 个值。</li>
</ul>
<p>对于每个询问，分两类讨论：</p>
<ul>
<li><p>如果 <span class="math inline">\(y=m\)</span>：</p>
<p>只在最后一列修改。找到第 <span class="math inline">\(x\)</span>
个数，输出并放到末尾。</p></li>
<li><p>否则：</p>
<p>先从第 <span class="math inline">\(x\)</span> 行中找到第 <span
class="math inline">\(y\)</span>
个数，输出并放到最后一列末尾；把最后一列中第 <span
class="math inline">\(x\)</span> 个数放到第 <span
class="math inline">\(x\)</span> 行末尾。</p></li>
</ul>
<p>时间复杂度是 <span class="math inline">\(O(n\log
n)\)</span>。本算法可得到 <span class="math inline">\(100\)</span>
分。</p>
<h1 id="代码">代码</h1>
<p>完整代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/* 易错点：行列对应关系 </span></span><br><span class="line"><span class="comment">   行    列 </span></span><br><span class="line"><span class="comment">   n     m</span></span><br><span class="line"><span class="comment">   x     y</span></span><br><span class="line"><span class="comment">   i     j</span></span><br><span class="line"><span class="comment"> g[i]   [j]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">namespace</span> _FullMarks</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">/* !!注意!!</span></span><br><span class="line"><span class="comment">	在每次 query 以及 update 操作之后，不要忘记将“地址”赋给 root！</span></span><br><span class="line"><span class="comment">	因为这个，调了将近一个小时（本来可以一遍过） ！ </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">	<span class="type">const</span> ll N=<span class="number">300000</span><span class="number">+10</span>,M=<span class="number">1000000000</span>;</span><br><span class="line">	ll cnt=<span class="number">0</span>,n,m,q,root[N],last[N],end,nowAsk,nowAns;</span><br><span class="line">	<span class="comment">//对于每个询问，都开一个线段树；为最后一列专门开线段树维护。</span></span><br><span class="line">	<span class="comment">//last 是下一步移到队尾的位置。</span></span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">SGT</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//线段树中叶子节点 data 是题目所述，人的编号。</span></span><br><span class="line">		<span class="comment">//num 指节点管理的元素个数。</span></span><br><span class="line">		<span class="keyword">struct</span> <span class="title class_">node</span>&#123;<span class="type">int</span> lson,rson,num;ll data; <span class="built_in">node</span>()&#123;num=data=<span class="number">0</span>;&#125;&#125;t[N*<span class="number">30</span>];</span><br><span class="line">		<span class="meta">#<span class="keyword">define</span> lson t[root].lson</span></span><br><span class="line">		<span class="meta">#<span class="keyword">define</span> rson t[root].rson</span></span><br><span class="line">		<span class="meta">#<span class="keyword">define</span> mid ((l+r)/2)</span></span><br><span class="line">		<span class="function">ll <span class="title">getNum</span><span class="params">(ll l,ll r)</span><span class="comment">//得到初始管理元素个数。</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			<span class="comment">/* 管理区间情况（横竖皆可）。</span></span><br><span class="line"><span class="comment">			|----------|---------|--------|---------|</span></span><br><span class="line"><span class="comment">			1          l        r_1     m-1/n      r_2  */</span></span><br><span class="line">			ll ret=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(nowAsk==<span class="number">0</span>) ret=<span class="built_in">min</span>(r,n)-l<span class="number">+1</span>;</span><br><span class="line">			<span class="keyword">else</span> ret=<span class="built_in">min</span>(r,m<span class="number">-1</span>)-l<span class="number">+1</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">max</span>(ret,<span class="number">0ll</span>);<span class="comment">//最少管理 0 个元素。</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">ll <span class="title">update</span><span class="params">(ll root,ll l,ll r,ll pos,ll data)</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(root==<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">//刚刚开辟的节点，其管理元素分布必定连续。 </span></span><br><span class="line">				root=++cnt;</span><br><span class="line">				t[root].num+=<span class="built_in">getNum</span>(l,r); </span><br><span class="line">			&#125;</span><br><span class="line">			t[root].num++;<span class="comment">//根据题意，更新后维护元素个数加一。 </span></span><br><span class="line">			<span class="comment">//并且，update 的位置一定大于 m-1 或 n，这是 getNum 函数覆盖不到的。 </span></span><br><span class="line">			<span class="keyword">if</span>(l==r)</span><br><span class="line">			&#123;</span><br><span class="line">				t[root].data=data;</span><br><span class="line">				<span class="keyword">return</span> root;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(pos&lt;=mid) lson=<span class="built_in">update</span>(lson,l,mid,pos,data);</span><br><span class="line">			<span class="keyword">else</span> rson=<span class="built_in">update</span>(rson,mid<span class="number">+1</span>,r,pos,data);</span><br><span class="line">			<span class="keyword">return</span> root;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">ll <span class="title">query</span><span class="params">(ll root,ll l,ll r,ll rank)</span><span class="comment">//rank 是指查询数列第几个。</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(root==<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">//虽然有些点未创建，但根据题意，</span></span><br><span class="line">				<span class="comment">//仍然不能返回，因为初始返回值可以计算。 </span></span><br><span class="line">				root=++cnt;</span><br><span class="line">				t[root].num+=<span class="built_in">getNum</span>(l,r);</span><br><span class="line">				<span class="keyword">if</span>(l==r)<span class="comment">//这个点刚被创建，直接计算值。</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(nowAsk==<span class="number">0</span>) t[root].data=l*m;</span><br><span class="line">					<span class="keyword">else</span> t[root].data=nowAsk*m-m+l;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			t[root].num--;<span class="comment">//根据题意，查询后直接删除，维护数减一。 </span></span><br><span class="line">			<span class="keyword">if</span>(l==r)</span><br><span class="line">			&#123;</span><br><span class="line">				nowAns=t[root].data;<span class="comment">//使用它来承载答案。</span></span><br><span class="line">				<span class="keyword">return</span> root;<span class="comment">//由于 query 函数可能创建节点，所以与 update 类似。 </span></span><br><span class="line">			&#125;</span><br><span class="line">			ll Lnum;</span><br><span class="line">			<span class="keyword">if</span>(lson==<span class="number">0</span>) Lnum=<span class="built_in">getNum</span>(l,mid);<span class="comment">//为空就现算。</span></span><br><span class="line">			<span class="keyword">else</span> Lnum=t[lson].num;</span><br><span class="line">			<span class="keyword">if</span>(rank&lt;=Lnum) lson=<span class="built_in">query</span>(lson,l,mid,rank);</span><br><span class="line">			<span class="keyword">else</span> rson=<span class="built_in">query</span>(rson,mid<span class="number">+1</span>,r,rank-Lnum);</span><br><span class="line">			<span class="keyword">return</span> root; </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;Tree;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">yzmain</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ll x,y;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;n,&amp;m,&amp;q);</span><br><span class="line">		end=<span class="built_in">max</span>(m,n)+q<span class="number">+10</span>;</span><br><span class="line">		<span class="built_in">memset</span>(last,<span class="number">0</span>,<span class="built_in">sizeof</span>(last));</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">			<span class="keyword">if</span>(y==m)<span class="comment">//直接维护最后一列 </span></span><br><span class="line">			&#123;</span><br><span class="line">				nowAsk=<span class="number">0</span>;</span><br><span class="line">				root[nowAsk]=Tree.<span class="built_in">query</span>(root[nowAsk],<span class="number">1</span>,end,x);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,nowAns);last[nowAsk]++;</span><br><span class="line">				root[nowAsk]=Tree.<span class="built_in">update</span>(root[nowAsk],<span class="number">1</span>,end,last[nowAsk]+n,nowAns);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				nowAsk=x;<span class="comment">//先查询行。</span></span><br><span class="line">				root[nowAsk]=Tree.<span class="built_in">query</span>(root[nowAsk],<span class="number">1</span>,end,y);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,nowAns);</span><br><span class="line">				nowAsk=<span class="number">0</span>;last[nowAsk]++;<span class="comment">//再塞到最后一列。</span></span><br><span class="line">				root[nowAsk]=Tree.<span class="built_in">update</span>(root[nowAsk],<span class="number">1</span>,end,last[nowAsk]+n,nowAns);</span><br><span class="line">				root[nowAsk]=Tree.<span class="built_in">query</span>(root[nowAsk],<span class="number">1</span>,end,x);<span class="comment">//再把最后一列属于那一行的摘出来。</span></span><br><span class="line">				nowAsk=x;last[nowAsk]++;<span class="comment">//最后塞到那一行。 </span></span><br><span class="line">				root[nowAsk]=Tree.<span class="built_in">update</span>(root[nowAsk],<span class="number">1</span>,end,last[nowAsk]+m<span class="number">-1</span>,nowAns);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> _yz</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">long</span> <span class="type">long</span> N1=<span class="number">1000</span><span class="number">+10</span>,N2=<span class="number">300000</span><span class="number">+10</span>,Q1=<span class="number">500</span><span class="number">+10</span>,N3=<span class="number">50000</span><span class="number">+10</span>,Q2=<span class="number">300000</span><span class="number">+10</span>;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> n,m,q;<span class="comment">//基本变量定义</span></span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> g[N1][N1];<span class="comment">//solve1 2 共用 </span></span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> a[N2*<span class="number">4</span>],t[N2*<span class="number">4</span>];<span class="comment">//solve4 使用 </span></span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> bx[Q1],fx[N3],ax[Q1];<span class="comment">//solve2 3 共用 </span></span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> x[Q2],y[Q2];<span class="comment">//solve2 3 共用，判断特殊点 </span></span><br><span class="line">	<span class="comment">//long long by[Q1],fy[N3],ay[Q1]; //solve2 错误做法 </span></span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> G[Q1][N3],L[N3];<span class="comment">//solve3 使用</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">lb</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span></span>&#123;<span class="keyword">return</span> x&amp;-x;&#125;</span><br><span class="line">	<span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">query</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span></span>&#123;<span class="type">long</span> <span class="type">long</span> ret=<span class="number">0</span>;<span class="keyword">while</span>(x&gt;=<span class="number">1</span>)ret+=t[x],x-=<span class="built_in">lb</span>(x);<span class="keyword">return</span> ret;&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x,<span class="type">long</span> <span class="type">long</span> y)</span></span>&#123;<span class="keyword">while</span>(x&lt;=N2*<span class="number">4</span>)t[x]+=y,x+=<span class="built_in">lb</span>(x);&#125;<span class="comment">//solve4 使用 </span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">solve1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">long</span> <span class="type">long</span> x,y;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">				g[i][j]=i*m-m+j;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,g[x][y]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j=y;j&lt;=m<span class="number">-1</span>;j++) <span class="built_in">swap</span>(g[x][j],g[x][j<span class="number">+1</span>]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j=x;j&lt;=n<span class="number">-1</span>;j++) <span class="built_in">swap</span>(g[j][m],g[j<span class="number">+1</span>][m]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">solve2</span><span class="params">()</span><span class="comment">//错误做法 </span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">/*//离散化后结构：网格形 </span></span><br><span class="line"><span class="comment">		long long px=0,py=0;//离散化之后的矩阵的 m n </span></span><br><span class="line"><span class="comment">		for(long long i=1;i&lt;=q;i++)</span></span><br><span class="line"><span class="comment">		&#123;</span></span><br><span class="line"><span class="comment">			scanf(&quot;%lld%lld&quot;,x+i,y+i);//Query </span></span><br><span class="line"><span class="comment">			bx[i]=x[i];by[i]=y[i];//b 数组作为 tmp </span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">		sort(bx+1,bx+1+q);sort(by+1,by+1+q);//Begin of 离散化 </span></span><br><span class="line"><span class="comment">		for(long long i=1;i&lt;=q;i++)</span></span><br><span class="line"><span class="comment">		&#123;</span></span><br><span class="line"><span class="comment">			if(bx[i-1]!=bx[i]) px++;</span></span><br><span class="line"><span class="comment">			if(by[i-1]!=by[i]) py++;</span></span><br><span class="line"><span class="comment">			fx[bx[i]]=px;fy[by[i]]=py;//f 数组用来根据原数找到相对位置 </span></span><br><span class="line"><span class="comment">			ax[px]=bx[i];ay[py]=by[i];//a 数组用来根据相对位置还原原数 </span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">		if(ay[py]!=m) by[++py]=m,fy[m]=py,ay[py]=m; </span></span><br><span class="line"><span class="comment">		//End of 离散化 </span></span><br><span class="line"><span class="comment">		for(long long i=1;i&lt;=px;i++)</span></span><br><span class="line"><span class="comment">			for(long long j=1;j&lt;=py;j++)</span></span><br><span class="line"><span class="comment">				g[i][j]=ax[i]*m-m+ay[j];//g 数组下标是相对位置 </span></span><br><span class="line"><span class="comment">		for(long long i=1;i&lt;=q;i++)</span></span><br><span class="line"><span class="comment">		&#123;</span></span><br><span class="line"><span class="comment">			printf(&quot;%lld\n&quot;,g[fx[x[i]]][fy[y[i]]]);</span></span><br><span class="line"><span class="comment">			for(long long j=fy[y[i]];j&lt;=py-1;j++) swap(g[fx[x[i]]][j],g[fx[x[i]]][j+1]);</span></span><br><span class="line"><span class="comment">			for(long long j=fx[x[i]];j&lt;=px-1;j++) swap(g[j][py],g[j+1][py]);</span></span><br><span class="line"><span class="comment">		&#125;*/</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">solve3</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">/* 离散化后结构：</span></span><br><span class="line"><span class="comment">		    -------------- |</span></span><br><span class="line"><span class="comment">		                   |</span></span><br><span class="line"><span class="comment">			-------------- |</span></span><br><span class="line"><span class="comment">			-------------- |</span></span><br><span class="line"><span class="comment">		*/</span> </span><br><span class="line">		<span class="type">long</span> <span class="type">long</span> px=<span class="number">0</span>;<span class="comment">//离散化之后的行数 </span></span><br><span class="line">		<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,x+i,y+i);<span class="comment">//Query </span></span><br><span class="line">			bx[i]=x[i];<span class="comment">//b 数组作为 tmp </span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">sort</span>(bx<span class="number">+1</span>,bx<span class="number">+1</span>+q);<span class="comment">//Begin of 离散化 </span></span><br><span class="line">		<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(bx[i<span class="number">-1</span>]!=bx[i]) px++;</span><br><span class="line">			fx[bx[i]]=px;<span class="comment">//f 数组用来根据原数找到相对位置 </span></span><br><span class="line">			ax[px]=bx[i];<span class="comment">//a 数组用来根据相对位置还原原数 </span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">1</span>;i&lt;=px;i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j=<span class="number">1</span>;j&lt;=m<span class="number">-1</span>;j++)</span><br><span class="line">				G[i][j]=ax[i]*m-m+j;<span class="comment">//G 数组下标是相对位置 </span></span><br><span class="line">		<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">1</span>;i&lt;=n;i++) L[i]=i*m;<span class="comment">//L 数组是最后一列 </span></span><br><span class="line">		<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(y[i]!=m) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,G[fx[x[i]]][y[i]]);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,L[x[i]]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j=y[i];j&lt;=m<span class="number">-2</span>;j++) <span class="built_in">swap</span>(G[fx[x[i]]][j],G[fx[x[i]]][j<span class="number">+1</span>]);</span><br><span class="line">			<span class="built_in">swap</span>(G[fx[x[i]]][m<span class="number">-1</span>],L[x[i]]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j=x[i];j&lt;=n<span class="number">-1</span>;j++) <span class="built_in">swap</span>(L[j],L[j<span class="number">+1</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">solve4</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">long</span> <span class="type">long</span> l,r,mid,Y,pos;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">1</span>;i&lt;=m;i++) a[i]=i,<span class="built_in">update</span>(i,<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=m<span class="number">+1</span>;i&lt;=m+n<span class="number">-1</span>;i++) a[i]=(i-m<span class="number">+1</span>)*m,<span class="built_in">update</span>(i,<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			l=<span class="number">1</span>,r=N2*<span class="number">4</span>;pos=n+m<span class="number">-1</span>+i;</span><br><span class="line">			<span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">			&#123;</span><br><span class="line">                mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">query</span>(mid)&gt;=y[i]) Y=mid,r=mid<span class="number">-1</span>;</span><br><span class="line">				<span class="keyword">else</span> l=mid<span class="number">+1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,a[Y]);</span><br><span class="line">			<span class="built_in">update</span>(Y,<span class="number">-1</span>);<span class="built_in">update</span>(pos,<span class="number">1</span>);a[pos]=a[Y];a[Y]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">yzmain</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">long</span> <span class="type">long</span> cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;n,&amp;m,&amp;q);</span><br><span class="line">		<span class="keyword">if</span>(n&lt;=<span class="number">1000</span>&amp;&amp;m&lt;=<span class="number">1000</span>&amp;&amp;q&lt;=<span class="number">500</span>) <span class="built_in">solve1</span>();</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(n&lt;=<span class="number">50000</span>&amp;&amp;m&lt;=<span class="number">50000</span>&amp;&amp;q&lt;=<span class="number">500</span>) <span class="built_in">solve3</span>();</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,x+i,y+i);</span><br><span class="line">				<span class="keyword">if</span>(x[i]==<span class="number">1</span>) cnt++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(cnt==q) <span class="built_in">solve4</span>();</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;zzy AK IOI!&quot;</span>);<span class="comment">//zzy 这个大佬非常强！</span></span><br><span class="line">		&#125;</span><br><span class="line">   		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">	<span class="comment">//freopen(&quot;out.txt&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">	_FullMarks::<span class="built_in">yzmain</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <categories>
        <category>OI</category>
        <category>题解</category>
        <category>社团讲评</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>OI</tag>
        <tag>模拟</tag>
        <tag>离散化</tag>
        <tag>树状数组</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>差分约束</title>
    <url>/2021/06/17/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F/</url>
    <content><![CDATA[<h1 id="差分约束系统">差分约束系统</h1>
<p>如果一个不等式组由 <span class="math inline">\(n\)</span> 个变量和
<span class="math inline">\(m\)</span> 个约束条件组成，形成 <span
class="math inline">\(m\)</span> 个形如 <span
class="math inline">\(x_j-x_i\leq k\)</span>（<span
class="math inline">\(i,j\in[1,n]\)</span> 且 <span
class="math inline">\(k\)</span> 为常数）的不等式，则称其为
<strong>差分约束系统</strong>。换句话说，解决差分约束问题就是求解一组变量的不等式组。</p>
<span id="more"></span>
<h1 id="问题转化">问题转化</h1>
<p>对于 <span class="math inline">\(x_j-x_i\le
k\)</span>，我们会发现它类似最短路网络中的三角不等式 <span
class="math inline">\(d_v-d_u\le
w_{&lt;u,v&gt;}\)</span>，那是否可以通过最短路的形式解决呢？显然是可以的。</p>
<p>我们首先把这个不等式化一下，成 <span class="math inline">\(x_j\le
x_i+k\)</span>。可以推出，<span class="math inline">\(x_j\)</span>
的最大值只可能是 <span
class="math inline">\(x_i+k\)</span>，最小不限。</p>
<p>那我们再次假设如果 <span class="math inline">\(x_j\)</span> 跟 <span
class="math inline">\(x_{i&#39;}\)</span>，<span
class="math inline">\(x_{i&#39;&#39;}\)</span>，<span
class="math inline">\(x_{i&#39;&#39;&#39;}\)</span>
都有关，我们就可以得到三个不等式，即一个不等式组：</p>
<p><span class="math display">\[\begin{cases} x_j\le x_{i&#39;}+b \\\
x_j\le x_{i&#39;&#39;}+b \\\ x_j\le x_{i&#39;&#39;&#39;}+b
\end{cases}\]</span></p>
<p>那么 <span class="math inline">\(x_j\)</span>
满足所有不等式下的最大值应该是：</p>
<p><span
class="math display">\[\min\{x_{i&#39;}+b,x_{i&#39;&#39;}+b,x_{i&#39;&#39;&#39;}+b\}\]</span></p>
<p>因为要满足所有不等式，所以必须要取最小值来满足所有的不等式。不等式解集应该是范围更小的那一个。</p>
<p>注意，我们上面提到的 <span class="math inline">\(i\)</span>
都可以模拟成 <span class="math inline">\(j\)</span> 的
<strong>前继</strong>。</p>
<p>那么我们可以再次简化模型。</p>
<p>假设有多个 <span class="math inline">\(x_i\)</span> 是 <span
class="math inline">\(x_j\)</span>
的前继，那么我们就可以得到一个式子，满足原不等式组的求解：</p>
<p><span class="math display">\[x_j=\min\{x_i+b\}\]</span></p>
<p>这不就是最短路嘛！</p>
<p>此时，可将每个变量看成一个顶点，并设一个超级源点 <span
class="math inline">\(x_0\)</span>，它连向每个顶点（除了自身）且边权为
<span class="math inline">\(0\)</span>，这时再对每一个不等式 <span
class="math inline">\(x_j-x_i\le k\)</span> 连一条边权为 <span
class="math inline">\(k\)</span> 的有向边 <span
class="math inline">\(&lt;i,j&gt;\)</span>，此时用 <span
class="math inline">\(x_j\)</span> 表示超级源点到 <span
class="math inline">\(j\)</span> 的最短路，用 <span
class="math inline">\(x_i\)</span> 表示超级源点到 <span
class="math inline">\(i\)</span> 的最短路，由于有边 <span
class="math inline">\(&lt;i,j&gt;\)</span> 存在，从而有 <span
class="math inline">\(x_j\le x_i+k\)</span>，即为原不等式的变形。</p>
<p>在有解的情况下，跑一遍最短路，最短路的答案 <span
class="math inline">\(d_i\)</span> 正是原不等式组的一个解 <span
class="math inline">\(x_i\)</span>。</p>
<p>使用“最长路”求解也是可以的。</p>
<h1 id="连边方法">连边方法</h1>
<p>差分约束问题可以转化为最短路或最长路问题，所以两种转化也就形成了两种不同的连边方法。</p>
<ol type="1">
<li>连边后求最短路 将 <span class="math inline">\(x_j-x_i\le k\)</span>
变形为 <span class="math inline">\(x_j\le x_i+k\)</span>，即从 <span
class="math inline">\(i\)</span> 到 <span
class="math inline">\(j\)</span> 连一条边权为 <span
class="math inline">\(k\)</span> 的边。加入超级源点后求最短路，得到
<span class="math inline">\(x_i\le 0\)</span> 所有 <span
class="math inline">\(x\)</span> 最大解。</li>
<li>连边后求最长路 将 <span class="math inline">\(x_j-x_i\le k\)</span>
变形为 <span class="math inline">\(x_i\ge x_j-k\)</span>，即从 <span
class="math inline">\(i\)</span> 到 <span
class="math inline">\(j\)</span> 连一条边权为 <span
class="math inline">\(-k\)</span> 的边。加入超级源点后求最长路，得到
<span class="math inline">\(x_i\ge 0\)</span> 所有 <span
class="math inline">\(x\)</span> 最小解。</li>
</ol>
<p>显而易见地，两种方法求出来的解大概率是不同的。</p>
<h1 id="判断无解">判断无解</h1>
<p>若求最短路，图中存在负环，则该不等式组无解。</p>
<p>此时，即可放心大胆地 SPFA，只需在 SPFA
的同时用一个数组来记录每个顶点<strong>入队</strong>次数，如果一个顶点入队次数大于
<span class="math inline">\(n\)</span>，说明该图存在负环。对于
DFS_SPFA，只需看当前顶点如果访问过，说明该图存在负环。</p>
<h1 id="模板">模板</h1>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P5960"
class="uri">https://www.luogu.com.cn/problem/P5960</a>。</li>
<li><a href="https://www.luogu.com.cn/problem/P1260"
class="uri">https://www.luogu.com.cn/problem/P1260</a>。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> _yz</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> nxt,end,len;</span><br><span class="line">	&#125;e[<span class="number">1000000</span><span class="number">+5</span>];</span><br><span class="line">	<span class="type">int</span> n,m,cnt=<span class="number">0</span>,head[<span class="number">100000</span><span class="number">+5</span>],vis[<span class="number">100000</span><span class="number">+5</span>],dis[<span class="number">100000</span><span class="number">+5</span>],in[<span class="number">100000</span><span class="number">+5</span>];</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> ans=<span class="number">0</span>;</span><br><span class="line">	queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		e[++cnt]=(edge)&#123;head[a],b,len&#125;;</span><br><span class="line">		head[a]=cnt;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">dfs_spfa</span><span class="params">(<span class="type">int</span> now)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		vis[now]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=e[i].nxt)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> to=e[i].end;</span><br><span class="line">			<span class="keyword">if</span>(dis[to]&lt;dis[now]+e[i].len)</span><br><span class="line">			&#123;</span><br><span class="line">				dis[to]=dis[now]+e[i].len;</span><br><span class="line">				<span class="keyword">if</span>(vis[to]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">dfs_spfa</span>(to)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		vis[now]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">bfs_spfa</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		q.<span class="built_in">push</span>(x);</span><br><span class="line">		<span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> now=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">			vis[now]=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=e[i].nxt) </span><br><span class="line">			&#123;</span><br><span class="line">				<span class="type">int</span> to=e[i].end;</span><br><span class="line">	          	<span class="keyword">if</span>(dis[to]&lt;dis[now]+e[i].len)</span><br><span class="line">	          	&#123;</span><br><span class="line">	          		dis[to]=dis[now]+e[i].len;</span><br><span class="line">					<span class="keyword">if</span>(!vis[to])</span><br><span class="line">						q.<span class="built_in">push</span>(to),vis[to]=<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">yzmain</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> a,b,c;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) </span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">			<span class="built_in">add</span>(a,b,-c);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			<span class="built_in">add</span>(<span class="number">0</span>,i,<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">dfs_spfa</span>(i)) &#123;<span class="built_in">printf</span>(<span class="string">&quot;NO&quot;</span>);<span class="keyword">return</span>;&#125;</span><br><span class="line">		<span class="built_in">bfs_spfa</span>(<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,dis[i]);</span><br><span class="line">   		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">	<span class="comment">//freopen(&quot;out.txt&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">	_yz::<span class="built_in">yzmain</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="例题">例题</h1>
<h2 id="p6145-usaco20febtimeline-g">P6145 [USACO20FEB]Timeline G</h2>
<p><a href="https://www.luogu.com.cn/problem/P6145"
class="uri">https://www.luogu.com.cn/problem/P6145</a>。</p>
<p>连边方式：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i from <span class="number">1</span> to n</span><br><span class="line">    add &lt; <span class="number">0</span>,i &gt; = Si</span><br><span class="line"><span class="keyword">for</span> i from <span class="number">1</span> to c</span><br><span class="line">	add &lt; ai,bi &gt; = xi</span><br></pre></td></tr></table></figure>
<p>之后求最长路。</p>
<h2 id="p4878-usaco05declayout-g">P4878 [USACO05DEC]Layout G</h2>
<p><a href="https://www.luogu.com.cn/problem/P4878"
class="uri">https://www.luogu.com.cn/problem/P4878</a>。</p>
<p>连边方式：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i from <span class="number">1</span> to ML</span><br><span class="line">    add &lt; Ai,Bi &gt; = Di</span><br><span class="line"><span class="keyword">for</span> i from <span class="number">1</span> to MD</span><br><span class="line">    add &lt; Bi,Ai &gt; = -Di</span><br><span class="line"><span class="keyword">for</span> i from <span class="number">1</span> to n</span><br><span class="line">    add &lt; <span class="number">0</span>,i &gt; = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i from <span class="number">2</span> to n</span><br><span class="line">	add &lt; i,i<span class="number">-1</span> &gt; = <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>之后求最短路。差分约束题还是有很多条件在里面的，仔细看题是正道。</p>
]]></content>
      <categories>
        <category>OI</category>
        <category>模板</category>
      </categories>
      <tags>
        <tag>最短路</tag>
        <tag>OI</tag>
        <tag>差分约束</tag>
      </tags>
  </entry>
  <entry>
    <title>小技巧和一些代码</title>
    <url>/2020/04/28/%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>一些实用的小技巧。比较杂。</p>
<h1 id="调试程序">调试程序</h1>
<ul>
<li>二分调试法</li>
<li>使用宏
<code>#define debug fprintf(stderr,"Passed [%s] in line %d\n",__FUNCTION__,__LINE__)</code></li>
</ul>
<span id="more"></span>
<h1 id="网易云歌曲下载">网易云歌曲下载</h1>
<p>注：在网易云网页版操作。</p>
<p>进入一个单曲的页面时，网址上会有这首歌的ID，像这样：</p>
<p><code>https://music.163.com/#/song?id=XXX</code>。这里的<code>id=XXX</code>即是。</p>
<hr />
<p>将以下网址中的<code>XXX</code>改为这首歌的ID，访问之，即可下载（可能质量不佳）。</p>
<p><code>http://music.163.com/song/media/outer/url?id=XXX.mp3</code></p>
<h1 id="博客备份">博客备份</h1>
<p>为了保证我们写的文章不丢失、快速迁移博客，都需要备份我们的 blog。</p>
<ol type="1">
<li><p>博客根目录，执行 <code>git init</code> 创建 git 仓库。</p></li>
<li><p>在 github 创建仓库并和本地仓库建立联系。</p></li>
<li><p>在<code>~/.bashrc</code> 文件中添加以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> hs=<span class="string">&#x27;hexo clean &amp;&amp; hexo g &amp;&amp; hexo s&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> hd=<span class="string">&#x27;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; git add . &amp;&amp; git commit -m &quot;update&quot; &amp;&amp; git push -f&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>这样，执行<code>hs</code>即可启动本地服务；执行 <code>hd</code>
进行部署博客时，就一同将博客进行备份了。</p>
<h1 id="把文件藏到图片里">把文件藏到图片里</h1>
<p>很多的时候，我们需要把某些文件藏到一张图片的里面，这样方便传播而且一般人根本不知道其中有文件。我们把图片放在网上，别人把原图下载下来然后用解压软件打开，就可以看到里面的文件了。示例图片：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/yz-hs/PicGo/%E4%B8%80%E4%B8%AA%E6%9E%81%E5%85%B6%E6%AD%A3%E5%B8%B8%E7%9A%84%E5%9B%BE%E7%89%87.jpg" /></p>
<h2 id="准备文件及图片">准备文件及图片</h2>
<p>你需准备一个文件，一个图片（<code>Normal-picture.jpg</code>）。</p>
<p>将文件压缩为<code>.rar</code>或<code>.zip</code>格式的图片（<code>demo.rar</code>）。</p>
<h2 id="运行命令">运行命令</h2>
<p>在当前目录下打开<code>cmd.exe</code>，运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">copy/b Normal-picture.jpg+demo.rar A-Normal-picture.jpg</span><br></pre></td></tr></table></figure>
<h2 id="得到图片">得到图片</h2>
<p>这时我们可以看到在当前目录下面生成了一张名为<code>A-Normal-picture.jpg</code>的图片，这就说明我们的文件就已经藏到里面去了。</p>
<h2 id="恢复文件">恢复文件</h2>
<p>将<code>A-Normal-picture.jpg</code>的后缀改为 <code>.rar</code>
，即得到一个名为<code>A-Normal-picture.rar</code>的压缩包。解压即可。你可以从示例图片中得到“扫雷.exe”。</p>
<h1 id="判断-.jpg-图片类型">判断 <code>.jpg</code> 图片类型</h1>
<p>文件中前 8 个字节是 <code>FF D8 FF E1</code> 的为 CMYK 模式，而
<code>FF D8 FF E0</code> 的为 RGB 模式。</p>
<h1 id="凹凸">凹凸</h1>
<p>凹和凸都是 <span class="math inline">\(5\)</span> 划的汉字。
遵循汉字的书写方式：从上到下；从左到右；先中间外边（半包围结构）；先外面后里面，最后封口（全包围结构）。</p>
<h2 id="凹">凹</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 （竖）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">|</span><br><span class="line">|</span><br><span class="line">|</span><br><span class="line"></span><br><span class="line">2 （横折折）</span><br><span class="line"></span><br><span class="line"> __</span><br><span class="line">|  |</span><br><span class="line">|  |__</span><br><span class="line">|</span><br><span class="line"></span><br><span class="line">3 （竖）</span><br><span class="line"></span><br><span class="line"> __   </span><br><span class="line">|  |  |</span><br><span class="line">|  |__|</span><br><span class="line">|</span><br><span class="line"></span><br><span class="line">4 （横折）</span><br><span class="line"></span><br><span class="line"> __    __</span><br><span class="line">|  |  |  |</span><br><span class="line">|  |__|  |</span><br><span class="line">|        |</span><br><span class="line"></span><br><span class="line">5 （横）</span><br><span class="line"></span><br><span class="line"> __    __</span><br><span class="line">|  |  |  |</span><br><span class="line">|  |__|  |</span><br><span class="line">|________|</span><br></pre></td></tr></table></figure>
<h2 id="凸">凸</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 （竖）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   |</span><br><span class="line">   | </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2 （横）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   |</span><br><span class="line"> __|</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3 （竖）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   |</span><br><span class="line"> __|</span><br><span class="line">| </span><br><span class="line"></span><br><span class="line">4 （横折折竖）</span><br><span class="line"></span><br><span class="line">    __</span><br><span class="line">   |  |</span><br><span class="line"> __|  |__</span><br><span class="line">|        |</span><br><span class="line"></span><br><span class="line">5 （横）</span><br><span class="line"></span><br><span class="line">    __</span><br><span class="line">   |  |</span><br><span class="line"> __|  |__</span><br><span class="line">|________|</span><br></pre></td></tr></table></figure>
<p>你，学会了吗（）</p>
<h1 id="扫雷作弊码">扫雷作弊码</h1>
<p>在扫雷界面依次按键盘键：<code>X</code>，<code>Y</code>，<code>Z</code>，<code>Z</code>，<code>Y</code>，<code>shift</code>。</p>
<p>这样，会在扫雷界面或屏幕界面左上角出现一个像素的点，当鼠标在雷上时，点为黑色；否则为白色。建议换黑色壁纸，这样看得出来。</p>
<h1 id="愚人节反转效果">愚人节反转效果</h1>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span> (!<span class="title class_">Readdata</span>(<span class="string">&quot;fool&quot;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;reverse-coloregg&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Savedata</span>(<span class="string">&quot;fool&quot;</span>, <span class="string">&quot;fool&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">swal</span>(<span class="string">&quot;你可以正常访问 Blog 啦！你还可以通过删除 Cookie 再体验一次！呵呵^_^&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;reverse-coloregg&#x27;</span>);  </span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">10000</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;  </span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">Savedata</span>(<span class="params">key, data</span>) &#123;  </span></span><br><span class="line"><span class="language-javascript">    key = <span class="string">&#x27;yz_&#x27;</span> + key;  </span></span><br><span class="line"><span class="language-javascript">    data = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);  </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">localStorage</span>) &#123;  </span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(key, data);  </span></span><br><span class="line"><span class="language-javascript">    &#125;  </span></span><br><span class="line"><span class="language-javascript">&#125;  </span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">Readdata</span>(<span class="params">key</span>) &#123;  </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (!<span class="variable language_">window</span>.<span class="property">localStorage</span>) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;  </span></span><br><span class="line"><span class="language-javascript">    key = <span class="string">&#x27;yz_&#x27;</span> + key;  </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(key));  </span></span><br><span class="line"><span class="language-javascript">&#125;  </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css">  </span></span><br><span class="line"><span class="language-css"><span class="selector-class">.reverse-coloregg</span> &#123;  </span></span><br><span class="line"><span class="language-css">    -webkit-<span class="attribute">transform</span>: <span class="built_in">matrix</span>(-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);  </span></span><br><span class="line"><span class="language-css">    -moz-<span class="attribute">transform</span>: <span class="built_in">matrix</span>(-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);  </span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">matrix</span>(-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);  </span></span><br><span class="line"><span class="language-css">    -o-<span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">0deg</span>, <span class="number">180deg</span>) <span class="built_in">scale</span>(-<span class="number">1</span>, <span class="number">1</span>);  </span></span><br><span class="line"><span class="language-css">    <span class="attribute">filter</span>:progid: DXImageTransform.Microsoft.<span class="built_in">BasicImage</span>(mirror=<span class="number">1</span>); </span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/*本部分代码来自 https://mkblog.cn/1469/*/</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>  </span><br></pre></td></tr></table></figure>
<p>在 Blog 的合适地方插入以上代码即可。只会首次反转（利用了
Cookie）。</p>
<h1 id="判断元素是否在可视区域内">判断元素是否在可视区域内</h1>
<p>下面是<a href="/51eaeba01a9b/">[Works]
Shelter(adapted)</a>里出现的代码。</p>
<p>离开这个界面后，为了清除掉效果，刷新即可。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">isContain</span>(<span class="params">dom</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> totalHeight = <span class="variable language_">window</span>.<span class="property">innerHeight</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> totalWidth = <span class="variable language_">window</span>.<span class="property">innerWidth</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; top, right, bottom, left &#125; = dom.<span class="title function_">getBoundingClientRect</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(top, right, bottom, left)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> (top &gt;= <span class="number">0</span> &amp;&amp; left &gt;= <span class="number">0</span> &amp;&amp; right &lt;= totalWidth &amp;&amp; bottom &lt;= totalHeight);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">changeit</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> falling = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;falling&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onscroll</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="title function_">isContain</span>(falling)) &#123;</span></span><br><span class="line"><span class="language-javascript">        	<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">backgroundImage</span> = <span class="string">&quot;url(&#x27;https://cdn.jsdelivr.net/gh/yz-hs/PicGo/code.png&#x27;)&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&quot;0.3&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      	&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        	<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">backgroundImage</span> = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&quot;0.9&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      	&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">$(<span class="variable language_">document</span>).<span class="title function_">on</span>(<span class="string">&#x27;pjax:complete&#x27;</span>,<span class="title function_">changeit</span>());</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="文字输入特效">文字输入特效</h1>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> <span class="title function_">webpackUniversalModuleDefinition</span>(<span class="params">root, factory</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">exports</span> === <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> <span class="variable language_">module</span> === <span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">		<span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">factory</span>();</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> define === <span class="string">&#x27;function&#x27;</span> &amp;&amp; define.<span class="property">amd</span>)</span><br><span class="line">		<span class="title function_">define</span>([], factory);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">exports</span> === <span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">		<span class="built_in">exports</span>[<span class="string">&quot;POWERMODE&quot;</span>] = <span class="title function_">factory</span>();</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		root[<span class="string">&quot;POWERMODE&quot;</span>] = <span class="title function_">factory</span>();</span><br><span class="line">&#125;)(<span class="variable language_">this</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="comment">/******/</span> (<span class="keyword">function</span>(<span class="params">modules</span>) &#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">// The module cache</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="keyword">var</span> installedModules = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">// The require function</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="keyword">function</span> <span class="title function_">__webpack_require__</span>(<span class="params">moduleId</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// Check if module is in cache</span></span><br><span class="line"><span class="comment">/******/</span> 		<span class="keyword">if</span>(installedModules[moduleId])</span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">return</span> installedModules[moduleId].<span class="property">exports</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line"><span class="comment">/******/</span> 		<span class="keyword">var</span> <span class="variable language_">module</span> = installedModules[moduleId] = &#123;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="attr">exports</span>: &#123;&#125;,</span><br><span class="line"><span class="comment">/******/</span> 			<span class="attr">id</span>: moduleId,</span><br><span class="line"><span class="comment">/******/</span> 			<span class="attr">loaded</span>: <span class="literal">false</span></span><br><span class="line"><span class="comment">/******/</span> 		&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// Execute the module function</span></span><br><span class="line"><span class="comment">/******/</span> 		modules[moduleId].<span class="title function_">call</span>(<span class="variable language_">module</span>.<span class="property">exports</span>, <span class="variable language_">module</span>, <span class="variable language_">module</span>.<span class="property">exports</span>, __webpack_require__);</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// Flag the module as loaded</span></span><br><span class="line"><span class="comment">/******/</span> 		<span class="variable language_">module</span>.<span class="property">loaded</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// Return the exports of the module</span></span><br><span class="line"><span class="comment">/******/</span> 		<span class="keyword">return</span> <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br><span class="line"><span class="comment">/******/</span> 	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">// expose the modules object (__webpack_modules__)</span></span><br><span class="line"><span class="comment">/******/</span> 	__webpack_require__.<span class="property">m</span> = modules;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">// expose the module cache</span></span><br><span class="line"><span class="comment">/******/</span> 	__webpack_require__.<span class="property">c</span> = installedModules;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">// __webpack_public_path__</span></span><br><span class="line"><span class="comment">/******/</span> 	__webpack_require__.<span class="property">p</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">// Load entry module and return exports</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="keyword">return</span> <span class="title function_">__webpack_require__</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">/******/</span> &#125;)</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span> ([</span><br><span class="line"><span class="comment">/* 0 */</span></span><br><span class="line"><span class="comment">/***/</span> <span class="keyword">function</span>(<span class="params"><span class="variable language_">module</span>, <span class="built_in">exports</span>, __webpack_require__</span>) &#123;</span><br><span class="line"></span><br><span class="line">	<span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">	canvas.<span class="property">width</span> = <span class="variable language_">window</span>.<span class="property">innerWidth</span>;</span><br><span class="line">	canvas.<span class="property">height</span> = <span class="variable language_">window</span>.<span class="property">innerHeight</span>;</span><br><span class="line">	canvas.<span class="property">style</span>.<span class="property">cssText</span> = <span class="string">&#x27;position:fixed;top:0;left:0;pointer-events:none;z-index:999999&#x27;</span>;</span><br><span class="line">	<span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">	    canvas.<span class="property">width</span> = <span class="variable language_">window</span>.<span class="property">innerWidth</span>;</span><br><span class="line">	    canvas.<span class="property">height</span> = <span class="variable language_">window</span>.<span class="property">innerHeight</span>;</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(canvas);</span><br><span class="line">	<span class="keyword">var</span> context = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">	<span class="keyword">var</span> particles = [];</span><br><span class="line">	<span class="keyword">var</span> particlePointer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="variable constant_">POWERMODE</span>.<span class="property">shake</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">getRandom</span>(<span class="params">min, max</span>) &#123;</span><br><span class="line">	    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min) + min;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">getColor</span>(<span class="params">el</span>) &#123;</span><br><span class="line">	    <span class="keyword">if</span> (<span class="variable constant_">POWERMODE</span>.<span class="property">colorful</span>) &#123;</span><br><span class="line">	        <span class="keyword">var</span> u = <span class="title function_">getRandom</span>(<span class="number">0</span>, <span class="number">360</span>);</span><br><span class="line">	        <span class="keyword">return</span> <span class="string">&#x27;hsla(&#x27;</span> + <span class="title function_">getRandom</span>(u - <span class="number">10</span>, u + <span class="number">10</span>) + <span class="string">&#x27;, 100%, &#x27;</span> + <span class="title function_">getRandom</span>(<span class="number">50</span>, <span class="number">80</span>) + <span class="string">&#x27;%, &#x27;</span> + <span class="number">1</span> + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">	    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	        <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(el).<span class="property">color</span>;</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">getCaret</span>(<span class="params"></span>) &#123;</span><br><span class="line">	    <span class="keyword">var</span> el = <span class="variable language_">document</span>.<span class="property">activeElement</span>;</span><br><span class="line">	    <span class="keyword">var</span> bcr;</span><br><span class="line">	    <span class="keyword">if</span> (el.<span class="property">tagName</span> === <span class="string">&#x27;TEXTAREA&#x27;</span> ||</span><br><span class="line">	        (el.<span class="property">tagName</span> === <span class="string">&#x27;INPUT&#x27;</span> &amp;&amp; el.<span class="title function_">getAttribute</span>(<span class="string">&#x27;type&#x27;</span>) === <span class="string">&#x27;text&#x27;</span>)) &#123;</span><br><span class="line">	        <span class="keyword">var</span> offset = <span class="title function_">__webpack_require__</span>(<span class="number">1</span>)(el, el.<span class="property">selectionStart</span>);</span><br><span class="line">	        bcr = el.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line">	        <span class="keyword">return</span> &#123;</span><br><span class="line">	            <span class="attr">x</span>: offset.<span class="property">left</span> + bcr.<span class="property">left</span>,</span><br><span class="line">	            <span class="attr">y</span>: offset.<span class="property">top</span> + bcr.<span class="property">top</span>,</span><br><span class="line">	            <span class="attr">color</span>: <span class="title function_">getColor</span>(el)</span><br><span class="line">	        &#125;;</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="keyword">var</span> selection = <span class="variable language_">window</span>.<span class="title function_">getSelection</span>();</span><br><span class="line">	    <span class="keyword">if</span> (selection.<span class="property">rangeCount</span>) &#123;</span><br><span class="line">	        <span class="keyword">var</span> range = selection.<span class="title function_">getRangeAt</span>(<span class="number">0</span>);</span><br><span class="line">	        <span class="keyword">var</span> startNode = range.<span class="property">startContainer</span>;</span><br><span class="line">	        <span class="keyword">if</span> (startNode.<span class="property">nodeType</span> === <span class="variable language_">document</span>.<span class="property">TEXT_NODE</span>) &#123;</span><br><span class="line">	            startNode = startNode.<span class="property">parentNode</span>;</span><br><span class="line">	        &#125;</span><br><span class="line">	        bcr = range.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line">	        <span class="keyword">return</span> &#123;</span><br><span class="line">	            <span class="attr">x</span>: bcr.<span class="property">left</span>,</span><br><span class="line">	            <span class="attr">y</span>: bcr.<span class="property">top</span>,</span><br><span class="line">	            <span class="attr">color</span>: <span class="title function_">getColor</span>(startNode)</span><br><span class="line">	        &#125;;</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>, <span class="attr">color</span>: <span class="string">&#x27;transparent&#x27;</span> &#125;;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">createParticle</span>(<span class="params">x, y, color</span>) &#123;</span><br><span class="line">	    <span class="keyword">return</span> &#123;</span><br><span class="line">	        <span class="attr">x</span>: x,</span><br><span class="line">	        <span class="attr">y</span>: y,</span><br><span class="line">	        <span class="attr">alpha</span>: <span class="number">1</span>,</span><br><span class="line">	        <span class="attr">color</span>: color,</span><br><span class="line">	        <span class="attr">velocity</span>: &#123;</span><br><span class="line">	            <span class="attr">x</span>: -<span class="number">1</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">2</span>,</span><br><span class="line">	            <span class="attr">y</span>: -<span class="number">3.5</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">2</span></span><br><span class="line">	        &#125;</span><br><span class="line">	    &#125;;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">POWERMODE</span>(<span class="params"></span>) &#123;</span><br><span class="line">	    &#123; <span class="comment">// spawn particles</span></span><br><span class="line">	        <span class="keyword">var</span> caret = <span class="title function_">getCaret</span>();</span><br><span class="line">	        <span class="keyword">var</span> numParticles = <span class="number">5</span> + <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span>);</span><br><span class="line">	        <span class="keyword">while</span> (numParticles--) &#123;</span><br><span class="line">	            particles[particlePointer] = <span class="title function_">createParticle</span>(caret.<span class="property">x</span>, caret.<span class="property">y</span>, caret.<span class="property">color</span>);</span><br><span class="line">	            particlePointer = (particlePointer + <span class="number">1</span>) % <span class="number">500</span>;</span><br><span class="line">	        &#125;</span><br><span class="line">	    &#125;</span><br><span class="line">	    &#123; <span class="comment">// shake screen</span></span><br><span class="line">	        <span class="keyword">if</span> (<span class="variable constant_">POWERMODE</span>.<span class="property">shake</span>) &#123;</span><br><span class="line">	            <span class="keyword">var</span> intensity = <span class="number">1</span> + <span class="number">2</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line">	            <span class="keyword">var</span> x = intensity * (<span class="title class_">Math</span>.<span class="title function_">random</span>() &gt; <span class="number">0.5</span> ? -<span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">	            <span class="keyword">var</span> y = intensity * (<span class="title class_">Math</span>.<span class="title function_">random</span>() &gt; <span class="number">0.5</span> ? -<span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">	            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">marginLeft</span> = x + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">	            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">marginTop</span> = y + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">	            <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">	                <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">marginLeft</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">	                <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">marginTop</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">	            &#125;, <span class="number">75</span>);</span><br><span class="line">	        &#125;</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="variable constant_">POWERMODE</span>.<span class="property">colorful</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params"></span>) &#123;</span><br><span class="line">	    <span class="title function_">requestAnimationFrame</span>(loop);</span><br><span class="line">	    context.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, canvas.<span class="property">width</span>, canvas.<span class="property">height</span>);</span><br><span class="line">	    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; particles.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">	        <span class="keyword">var</span> particle = particles[i];</span><br><span class="line">	        <span class="keyword">if</span> (particle.<span class="property">alpha</span> &lt;= <span class="number">0.1</span>) <span class="keyword">continue</span>;</span><br><span class="line">	        particle.<span class="property">velocity</span>.<span class="property">y</span> += <span class="number">0.075</span>;</span><br><span class="line">	        particle.<span class="property">x</span> += particle.<span class="property">velocity</span>.<span class="property">x</span>;</span><br><span class="line">	        particle.<span class="property">y</span> += particle.<span class="property">velocity</span>.<span class="property">y</span>;</span><br><span class="line">	        particle.<span class="property">alpha</span> *= <span class="number">0.96</span>;</span><br><span class="line">	        context.<span class="property">globalAlpha</span> = particle.<span class="property">alpha</span>;</span><br><span class="line">	        context.<span class="property">fillStyle</span> = particle.<span class="property">color</span>;</span><br><span class="line">	        context.<span class="title function_">fillRect</span>(</span><br><span class="line">	            <span class="title class_">Math</span>.<span class="title function_">round</span>(particle.<span class="property">x</span> - <span class="number">1.5</span>),</span><br><span class="line">	            <span class="title class_">Math</span>.<span class="title function_">round</span>(particle.<span class="property">y</span> - <span class="number">1.5</span>),</span><br><span class="line">	            <span class="number">3</span>, <span class="number">3</span></span><br><span class="line">	        );</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="title function_">requestAnimationFrame</span>(loop);</span><br><span class="line"></span><br><span class="line">	<span class="variable language_">module</span>.<span class="property">exports</span> = <span class="variable constant_">POWERMODE</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;,</span><br><span class="line"><span class="comment">/* 1 */</span></span><br><span class="line"><span class="comment">/***/</span> <span class="keyword">function</span>(<span class="params"><span class="variable language_">module</span>, <span class="built_in">exports</span></span>) &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* jshint browser: true */</span></span><br><span class="line"></span><br><span class="line">	(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// The properties that we copy into a mirrored div.</span></span><br><span class="line">	<span class="comment">// Note that some browsers, such as Firefox,</span></span><br><span class="line">	<span class="comment">// do not concatenate properties, i.e. padding-top, bottom etc. -&gt; padding,</span></span><br><span class="line">	<span class="comment">// so we have to do every single property specifically.</span></span><br><span class="line">	<span class="keyword">var</span> properties = [</span><br><span class="line">	  <span class="string">&#x27;direction&#x27;</span>,  <span class="comment">// RTL support</span></span><br><span class="line">	  <span class="string">&#x27;boxSizing&#x27;</span>,</span><br><span class="line">	  <span class="string">&#x27;width&#x27;</span>,  <span class="comment">// on Chrome and IE, exclude the scrollbar, so the mirror div wraps exactly as the textarea does</span></span><br><span class="line">	  <span class="string">&#x27;height&#x27;</span>,</span><br><span class="line">	  <span class="string">&#x27;overflowX&#x27;</span>,</span><br><span class="line">	  <span class="string">&#x27;overflowY&#x27;</span>,  <span class="comment">// copy the scrollbar for IE</span></span><br><span class="line"></span><br><span class="line">	  <span class="string">&#x27;borderTopWidth&#x27;</span>,</span><br><span class="line">	  <span class="string">&#x27;borderRightWidth&#x27;</span>,</span><br><span class="line">	  <span class="string">&#x27;borderBottomWidth&#x27;</span>,</span><br><span class="line">	  <span class="string">&#x27;borderLeftWidth&#x27;</span>,</span><br><span class="line">	  <span class="string">&#x27;borderStyle&#x27;</span>,</span><br><span class="line"></span><br><span class="line">	  <span class="string">&#x27;paddingTop&#x27;</span>,</span><br><span class="line">	  <span class="string">&#x27;paddingRight&#x27;</span>,</span><br><span class="line">	  <span class="string">&#x27;paddingBottom&#x27;</span>,</span><br><span class="line">	  <span class="string">&#x27;paddingLeft&#x27;</span>,</span><br><span class="line"></span><br><span class="line">	  <span class="comment">// https://developer.mozilla.org/en-US/docs/Web/CSS/font</span></span><br><span class="line">	  <span class="string">&#x27;fontStyle&#x27;</span>,</span><br><span class="line">	  <span class="string">&#x27;fontVariant&#x27;</span>,</span><br><span class="line">	  <span class="string">&#x27;fontWeight&#x27;</span>,</span><br><span class="line">	  <span class="string">&#x27;fontStretch&#x27;</span>,</span><br><span class="line">	  <span class="string">&#x27;fontSize&#x27;</span>,</span><br><span class="line">	  <span class="string">&#x27;fontSizeAdjust&#x27;</span>,</span><br><span class="line">	  <span class="string">&#x27;lineHeight&#x27;</span>,</span><br><span class="line">	  <span class="string">&#x27;fontFamily&#x27;</span>,</span><br><span class="line"></span><br><span class="line">	  <span class="string">&#x27;textAlign&#x27;</span>,</span><br><span class="line">	  <span class="string">&#x27;textTransform&#x27;</span>,</span><br><span class="line">	  <span class="string">&#x27;textIndent&#x27;</span>,</span><br><span class="line">	  <span class="string">&#x27;textDecoration&#x27;</span>,  <span class="comment">// might not make a difference, but better be safe</span></span><br><span class="line"></span><br><span class="line">	  <span class="string">&#x27;letterSpacing&#x27;</span>,</span><br><span class="line">	  <span class="string">&#x27;wordSpacing&#x27;</span>,</span><br><span class="line"></span><br><span class="line">	  <span class="string">&#x27;tabSize&#x27;</span>,</span><br><span class="line">	  <span class="string">&#x27;MozTabSize&#x27;</span></span><br><span class="line"></span><br><span class="line">	];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> isFirefox = <span class="variable language_">window</span>.<span class="property">mozInnerScreenX</span> != <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">getCaretCoordinates</span>(<span class="params">element, position, options</span>) &#123;</span><br><span class="line"></span><br><span class="line">	  <span class="keyword">var</span> debug = options &amp;&amp; options.<span class="property">debug</span> || <span class="literal">false</span>;</span><br><span class="line">	  <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">	    <span class="keyword">var</span> el = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#input-textarea-caret-position-mirror-div&#x27;</span>);</span><br><span class="line">	    <span class="keyword">if</span> ( el ) &#123; el.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(el); &#125;</span><br><span class="line">	  &#125;</span><br><span class="line"></span><br><span class="line">	  <span class="comment">// mirrored div</span></span><br><span class="line">	  <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">	  div.<span class="property">id</span> = <span class="string">&#x27;input-textarea-caret-position-mirror-div&#x27;</span>;</span><br><span class="line">	  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(div);</span><br><span class="line"></span><br><span class="line">	  <span class="keyword">var</span> style = div.<span class="property">style</span>;</span><br><span class="line">	  <span class="keyword">var</span> computed = <span class="variable language_">window</span>.<span class="property">getComputedStyle</span>? <span class="title function_">getComputedStyle</span>(element) : element.<span class="property">currentStyle</span>;  <span class="comment">// currentStyle for IE &lt; 9</span></span><br><span class="line"></span><br><span class="line">	  <span class="comment">// default textarea styles</span></span><br><span class="line">	  style.<span class="property">whiteSpace</span> = <span class="string">&#x27;pre-wrap&#x27;</span>;</span><br><span class="line">	  <span class="keyword">if</span> (element.<span class="property">nodeName</span> !== <span class="string">&#x27;INPUT&#x27;</span>)</span><br><span class="line">	    style.<span class="property">wordWrap</span> = <span class="string">&#x27;break-word&#x27;</span>;  <span class="comment">// only for textarea-s</span></span><br><span class="line"></span><br><span class="line">	  <span class="comment">// position off-screen</span></span><br><span class="line">	  style.<span class="property">position</span> = <span class="string">&#x27;absolute&#x27;</span>;  <span class="comment">// required to return coordinates properly</span></span><br><span class="line">	  <span class="keyword">if</span> (!debug)</span><br><span class="line">	    style.<span class="property">visibility</span> = <span class="string">&#x27;hidden&#x27;</span>;  <span class="comment">// not &#x27;display: none&#x27; because we want rendering</span></span><br><span class="line"></span><br><span class="line">	  <span class="comment">// transfer the element&#x27;s properties to the div</span></span><br><span class="line">	  properties.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">prop</span>) &#123;</span><br><span class="line">	    style[prop] = computed[prop];</span><br><span class="line">	  &#125;);</span><br><span class="line"></span><br><span class="line">	  <span class="keyword">if</span> (isFirefox) &#123;</span><br><span class="line">	    <span class="comment">// Firefox lies about the overflow property for textareas: https://bugzilla.mozilla.org/show_bug.cgi?id=984275</span></span><br><span class="line">	    <span class="keyword">if</span> (element.<span class="property">scrollHeight</span> &gt; <span class="built_in">parseInt</span>(computed.<span class="property">height</span>))</span><br><span class="line">	      style.<span class="property">overflowY</span> = <span class="string">&#x27;scroll&#x27;</span>;</span><br><span class="line">	  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	    style.<span class="property">overflow</span> = <span class="string">&#x27;hidden&#x27;</span>;  <span class="comment">// for Chrome to not render a scrollbar; IE keeps overflowY = &#x27;scroll&#x27;</span></span><br><span class="line">	  &#125;</span><br><span class="line"></span><br><span class="line">	  div.<span class="property">textContent</span> = element.<span class="property">value</span>.<span class="title function_">substring</span>(<span class="number">0</span>, position);</span><br><span class="line">	  <span class="comment">// the second special handling for input type=&quot;text&quot; vs textarea: spaces need to be replaced with non-breaking spaces - http://stackoverflow.com/a/13402035/1269037</span></span><br><span class="line">	  <span class="keyword">if</span> (element.<span class="property">nodeName</span> === <span class="string">&#x27;INPUT&#x27;</span>)</span><br><span class="line">	    div.<span class="property">textContent</span> = div.<span class="property">textContent</span>.<span class="title function_">replace</span>(<span class="regexp">/\s/g</span>, <span class="string">&quot;\u00a0&quot;</span>);</span><br><span class="line"></span><br><span class="line">	  <span class="keyword">var</span> span = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">	  <span class="comment">// Wrapping must be replicated *exactly*, including when a long word gets</span></span><br><span class="line">	  <span class="comment">// onto the next line, with whitespace at the end of the line before (#7).</span></span><br><span class="line">	  <span class="comment">// The  *only* reliable way to do that is to copy the *entire* rest of the</span></span><br><span class="line">	  <span class="comment">// textarea&#x27;s content into the &lt;span&gt; created at the caret position.</span></span><br><span class="line">	  <span class="comment">// for inputs, just &#x27;.&#x27; would be enough, but why bother?</span></span><br><span class="line">	  span.<span class="property">textContent</span> = element.<span class="property">value</span>.<span class="title function_">substring</span>(position) || <span class="string">&#x27;.&#x27;</span>;  <span class="comment">// || because a completely empty faux span doesn&#x27;t render at all</span></span><br><span class="line">	  div.<span class="title function_">appendChild</span>(span);</span><br><span class="line"></span><br><span class="line">	  <span class="keyword">var</span> coordinates = &#123;</span><br><span class="line">	    <span class="attr">top</span>: span.<span class="property">offsetTop</span> + <span class="built_in">parseInt</span>(computed[<span class="string">&#x27;borderTopWidth&#x27;</span>]),</span><br><span class="line">	    <span class="attr">left</span>: span.<span class="property">offsetLeft</span> + <span class="built_in">parseInt</span>(computed[<span class="string">&#x27;borderLeftWidth&#x27;</span>])</span><br><span class="line">	  &#125;;</span><br><span class="line"></span><br><span class="line">	  <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">	    span.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;#aaa&#x27;</span>;</span><br><span class="line">	  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(div);</span><br><span class="line">	  &#125;</span><br><span class="line"></span><br><span class="line">	  <span class="keyword">return</span> coordinates;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">module</span> != <span class="string">&quot;undefined&quot;</span> &amp;&amp; <span class="keyword">typeof</span> <span class="variable language_">module</span>.<span class="property">exports</span> != <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">	  <span class="variable language_">module</span>.<span class="property">exports</span> = getCaretCoordinates;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	  <span class="variable language_">window</span>.<span class="property">getCaretCoordinates</span> = getCaretCoordinates;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> ])</span><br><span class="line">&#125;);</span><br><span class="line">;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/activate-power-mode.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="variable constant_">POWERMODE</span>.<span class="property">colorful</span> = <span class="literal">true</span>; <span class="comment">// 控制开启/开启礼花特效  </span></span></span><br><span class="line"><span class="language-javascript"> <span class="variable constant_">POWERMODE</span>.<span class="property">shake</span> = <span class="literal">true</span>; <span class="comment">// 控制开启/关闭屏幕震动特效  </span></span></span><br><span class="line"><span class="language-javascript"> <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="variable constant_">POWERMODE</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="平滑滚动">平滑滚动</h1>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">C</span>(<span class="params"></span>)&#123;<span class="keyword">if</span>(<span class="variable language_">document</span>.<span class="property">body</span>)&#123;<span class="keyword">var</span> a=<span class="variable language_">document</span>.<span class="property">body</span>,b=<span class="variable language_">document</span>.<span class="property">documentElement</span>,d=<span class="variable language_">window</span>.<span class="property">innerHeight</span>,e=a.<span class="property">scrollHeight</span>;n=<span class="number">0</span>&lt;=<span class="variable language_">document</span>.<span class="property">compatMode</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;CSS&quot;</span>)?<span class="attr">b</span>:a;u=a;f.<span class="property">keyboardSupport</span>&amp;&amp;<span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;keydown&quot;</span>,K,!<span class="number">1</span>);D=!<span class="number">0</span>;<span class="keyword">if</span>(top!=self)E=!<span class="number">0</span>;<span class="keyword">else</span> <span class="keyword">if</span>(e&gt;d&amp;&amp;(a.<span class="property">offsetHeight</span>&lt;=d||b.<span class="property">offsetHeight</span>&lt;=d))&#123;<span class="keyword">var</span> c=!<span class="number">1</span>;<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;c||b.<span class="property">scrollHeight</span>==<span class="variable language_">document</span>.<span class="property">height</span>||(c=!<span class="number">0</span>,<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;b.<span class="property">style</span>.<span class="property">height</span>=<span class="variable language_">document</span>.<span class="property">height</span>+<span class="string">&quot;px&quot;</span>;c=!<span class="number">1</span>&#125;,<span class="number">500</span>))&#125;,<span class="number">10</span>);n.<span class="property">offsetHeight</span>&lt;=d&amp;&amp;(d=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>),d.<span class="property">style</span>.<span class="property">clear</span>=<span class="string">&quot;both&quot;</span>,a.<span class="title function_">appendChild</span>(d))&#125;f.<span class="property">fixedBackground</span>||(a.<span class="property">style</span>.<span class="property">backgroundAttachment</span>=<span class="string">&quot;scroll&quot;</span>,b.<span class="property">style</span>.<span class="property">backgroundAttachment</span>=<span class="string">&quot;scroll&quot;</span>)&#125;&#125;<span class="keyword">function</span> <span class="title function_">F</span>(<span class="params">a,b,d,e</span>)&#123;e||(e=<span class="number">1E3</span>);<span class="title function_">L</span>(b,d);<span class="keyword">if</span>(<span class="number">1</span>!=f.<span class="property">accelerationMax</span>)&#123;<span class="keyword">var</span> c=+<span class="keyword">new</span> <span class="title class_">Date</span>-x;c&lt;f.<span class="property">accelerationDelta</span>&amp;&amp;(c=(<span class="number">1</span>+<span class="number">30</span>/c)/<span class="number">2</span>,<span class="number">1</span>&lt;c&amp;&amp;(c=<span class="title class_">Math</span>.<span class="title function_">min</span>(c,f.<span class="property">accelerationMax</span>),b*=c,d*=c));x=+<span class="keyword">new</span> <span class="title class_">Date</span>&#125;p.<span class="title function_">push</span>(&#123;<span class="attr">x</span>:b,<span class="attr">y</span>:d,<span class="attr">lastX</span>:<span class="number">0</span>&gt;b?<span class="number">.99</span>:-<span class="number">.99</span>,<span class="attr">lastY</span>:<span class="number">0</span>&gt;d?<span class="number">.99</span>:-<span class="number">.99</span>,<span class="attr">start</span>:+<span class="keyword">new</span> <span class="title class_">Date</span>&#125;);<span class="keyword">if</span>(!y)&#123;<span class="keyword">var</span> g=a===<span class="variable language_">document</span>.<span class="property">body</span>,h=<span class="keyword">function</span>(<span class="params">c</span>)&#123;c=+<span class="keyword">new</span> <span class="title class_">Date</span>;<span class="keyword">for</span>(<span class="keyword">var</span> q=<span class="number">0</span>,r=<span class="number">0</span>,t=<span class="number">0</span>;t&lt;p.<span class="property">length</span>;t++)&#123;<span class="keyword">var</span> k=p[t],l=c-k.<span class="property">start</span>,n=l&gt;=f.<span class="property">animationTime</span>,m=n?<span class="number">1</span>:l/f.<span class="property">animationTime</span>;f.<span class="property">pulseAlgorithm</span>&amp;&amp;(l=m,<span class="number">1</span>&lt;=l?m=<span class="number">1</span>:<span class="number">0</span>&gt;=l?m=<span class="number">0</span>:(<span class="number">1</span>==f.<span class="property">pulseNormalize</span>&amp;&amp;(f.<span class="property">pulseNormalize</span>/=<span class="title function_">G</span>(<span class="number">1</span>)),m=<span class="title function_">G</span>(l)));l=k.<span class="property">x</span>*m-k.<span class="property">lastX</span>&gt;&gt;<span class="number">0</span>;m=k.<span class="property">y</span>*m-k.<span class="property">lastY</span>&gt;&gt;<span class="number">0</span>;q+=l;r+=m;k.<span class="property">lastX</span>+=l;k.<span class="property">lastY</span>+=m;n&amp;&amp;(p.<span class="title function_">splice</span>(t,<span class="number">1</span>),t--)&#125;g?<span class="variable language_">window</span>.<span class="title function_">scrollBy</span>(q,r):(q&amp;&amp;(a.<span class="property">scrollLeft</span>+=q),r&amp;&amp;(a.<span class="property">scrollTop</span>+=r));b||d||(p=[]);p.<span class="property">length</span>?<span class="title function_">H</span>(h,a,e/f.<span class="property">frameRate</span>+<span class="number">1</span>):y=!<span class="number">1</span>&#125;;<span class="title function_">H</span>(h,a,<span class="number">0</span>);y=!<span class="number">0</span>&#125;&#125;<span class="keyword">function</span> <span class="title function_">M</span>(<span class="params">a</span>)&#123;D||<span class="title function_">C</span>();<span class="keyword">var</span> b=a.<span class="property">target</span>,d=<span class="title function_">I</span>(b);<span class="keyword">if</span>(!d||a.<span class="property">defaultPrevented</span>||<span class="string">&quot;embed&quot;</span>===(u.<span class="property">nodeName</span>||<span class="string">&quot;&quot;</span>).<span class="title function_">toLowerCase</span>()||<span class="string">&quot;embed&quot;</span>===(b.<span class="property">nodeName</span>||<span class="string">&quot;&quot;</span>).<span class="title function_">toLowerCase</span>()&amp;&amp;<span class="regexp">/\.pdf/i</span>.<span class="title function_">test</span>(b.<span class="property">src</span>))<span class="keyword">return</span>!<span class="number">0</span>;<span class="keyword">var</span> b=a.<span class="property">wheelDeltaX</span>||<span class="number">0</span>,e=a.<span class="property">wheelDeltaY</span>||<span class="number">0</span>;b||e||(e=a.<span class="property">wheelDelta</span>||<span class="number">0</span>);<span class="keyword">var</span> c;<span class="keyword">if</span>(c=!f.<span class="property">touchpadSupport</span>)<span class="keyword">if</span>(c=e)&#123;c=<span class="title class_">Math</span>.<span class="title function_">abs</span>(c);h.<span class="title function_">push</span>(c);h.<span class="title function_">shift</span>();<span class="built_in">clearTimeout</span>(N);c=h[<span class="number">0</span>]==h[<span class="number">1</span>]&amp;&amp;h[<span class="number">1</span>]==h[<span class="number">2</span>];<span class="keyword">var</span> g=<span class="title function_">z</span>(h[<span class="number">0</span>],<span class="number">120</span>)&amp;&amp;<span class="title function_">z</span>(h[<span class="number">1</span>],<span class="number">120</span>)&amp;&amp;<span class="title function_">z</span>(h[<span class="number">2</span>],<span class="number">120</span>);c=!(c||g)&#125;<span class="keyword">else</span> c=<span class="keyword">void</span> <span class="number">0</span>;<span class="keyword">if</span>(c)<span class="keyword">return</span>!<span class="number">0</span>;<span class="number">1.2</span>&lt;<span class="title class_">Math</span>.<span class="title function_">abs</span>(b)&amp;&amp;(b*=f.<span class="property">stepSize</span>/<span class="number">120</span>);<span class="number">1.2</span>&lt;<span class="title class_">Math</span>.<span class="title function_">abs</span>(e)&amp;&amp;(e*=f.<span class="property">stepSize</span>/<span class="number">120</span>);<span class="title function_">F</span>(d,-b,-e);a.<span class="title function_">preventDefault</span>()&#125;<span class="keyword">function</span> <span class="title function_">K</span>(<span class="params">a</span>)&#123;<span class="keyword">var</span> b=a.<span class="property">target</span>,d=a.<span class="property">ctrlKey</span>||a.<span class="property">altKey</span>||a.<span class="property">metaKey</span>||a.<span class="property">shiftKey</span>&amp;&amp;a.<span class="property">keyCode</span>!==g.<span class="property">spacebar</span>;<span class="keyword">if</span>(<span class="regexp">/input|textarea|select|embed/i</span>.<span class="title function_">test</span>(b.<span class="property">nodeName</span>)||b.<span class="property">isContentEditable</span>||a.<span class="property">defaultPrevented</span>||d||<span class="string">&quot;button&quot;</span>===(b.<span class="property">nodeName</span>||<span class="string">&quot;&quot;</span>).<span class="title function_">toLowerCase</span>()&amp;&amp;a.<span class="property">keyCode</span>===g.<span class="property">spacebar</span>)<span class="keyword">return</span>!<span class="number">0</span>;<span class="keyword">var</span> e;e=b=<span class="number">0</span>;<span class="keyword">var</span> d=<span class="title function_">I</span>(u),c=d.<span class="property">clientHeight</span>;d==<span class="variable language_">document</span>.<span class="property">body</span>&amp;&amp;(c=<span class="variable language_">window</span>.<span class="property">innerHeight</span>);<span class="keyword">switch</span>(a.<span class="property">keyCode</span>)&#123;<span class="keyword">case</span> g.<span class="property">up</span>:e=-f.<span class="property">arrowScroll</span>;<span class="keyword">break</span>;<span class="keyword">case</span> g.<span class="property">down</span>:e=f.<span class="property">arrowScroll</span>;<span class="keyword">break</span>;<span class="keyword">case</span> g.<span class="property">spacebar</span>:e=a.<span class="property">shiftKey</span>?<span class="number">1</span>:-<span class="number">1</span>;e=-e*c*<span class="number">.9</span>;<span class="keyword">break</span>;<span class="keyword">case</span> g.<span class="property">pageup</span>:e=<span class="number">.9</span>*-c;<span class="keyword">break</span>;<span class="keyword">case</span> g.<span class="property">pagedown</span>:e=<span class="number">.9</span>*c;<span class="keyword">break</span>;<span class="keyword">case</span> g.<span class="property">home</span>:e=-d.<span class="property">scrollTop</span>;<span class="keyword">break</span>;<span class="keyword">case</span> g.<span class="property">end</span>:c=d.<span class="property">scrollHeight</span>-d.<span class="property">scrollTop</span>-c;e=<span class="number">0</span>&lt;c?c+<span class="number">10</span>:<span class="number">0</span>;<span class="keyword">break</span>;<span class="keyword">case</span> g.<span class="property">left</span>:b=-f.<span class="property">arrowScroll</span>;<span class="keyword">break</span>;<span class="keyword">case</span> g.<span class="property">right</span>:b=f.<span class="property">arrowScroll</span>;<span class="keyword">break</span>;<span class="attr">default</span>:<span class="keyword">return</span>!<span class="number">0</span>&#125;<span class="title function_">F</span>(d,b,e);a.<span class="title function_">preventDefault</span>()&#125;<span class="keyword">function</span> <span class="title function_">O</span>(<span class="params">a</span>)&#123;u=a.<span class="property">target</span>&#125;<span class="keyword">function</span> <span class="title function_">A</span>(<span class="params">a,b</span>)&#123;<span class="keyword">for</span>(<span class="keyword">var</span> d=a.<span class="property">length</span>;d--;)B[<span class="title function_">J</span>(a[d])]=b;<span class="keyword">return</span> b&#125;<span class="keyword">function</span> <span class="title function_">I</span>(<span class="params">a</span>)&#123;<span class="keyword">var</span> b=[],d=n.<span class="property">scrollHeight</span>;<span class="keyword">do</span>&#123;<span class="keyword">var</span> e=B[<span class="title function_">J</span>(a)];<span class="keyword">if</span>(e)<span class="keyword">return</span> <span class="title function_">A</span>(b,e);b.<span class="title function_">push</span>(a);<span class="keyword">if</span>(d===a.<span class="property">scrollHeight</span>)&#123;<span class="keyword">if</span>(!E||n.<span class="property">clientHeight</span>+<span class="number">10</span>&lt;d)<span class="keyword">return</span> <span class="title function_">A</span>(b,<span class="variable language_">document</span>.<span class="property">body</span>)&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a.<span class="property">clientHeight</span>+<span class="number">10</span>&lt;a.<span class="property">scrollHeight</span>&amp;&amp;(overflow=<span class="title function_">getComputedStyle</span>(a,<span class="string">&quot;&quot;</span>).<span class="title function_">getPropertyValue</span>(<span class="string">&quot;overflow-y&quot;</span>),<span class="string">&quot;scroll&quot;</span>===overflow||<span class="string">&quot;auto&quot;</span>===overflow))<span class="keyword">return</span> <span class="title function_">A</span>(b,a)&#125;<span class="keyword">while</span>(a=a.<span class="property">parentNode</span>)&#125;<span class="keyword">function</span> <span class="title function_">L</span>(<span class="params">a,b</span>)&#123;a=<span class="number">0</span>&lt;a?<span class="number">1</span>:-<span class="number">1</span>;b=<span class="number">0</span>&lt;b?<span class="number">1</span>:-<span class="number">1</span>;<span class="keyword">if</span>(v.<span class="property">x</span>!==a||v.<span class="property">y</span>!==b)v.<span class="property">x</span>=a,v.<span class="property">y</span>=b,p=[],x=<span class="number">0</span>&#125;<span class="keyword">function</span> <span class="title function_">z</span>(<span class="params">a,b</span>)&#123;<span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(a/b)==a/b&#125;<span class="keyword">function</span> <span class="title function_">G</span>(<span class="params">a</span>)&#123;<span class="keyword">var</span> b;a*=f.<span class="property">pulseScale</span>;<span class="number">1</span>&gt;a?b=a-(<span class="number">1</span>-<span class="title class_">Math</span>.<span class="title function_">exp</span>(-a)):(b=<span class="title class_">Math</span>.<span class="title function_">exp</span>(-<span class="number">1</span>),--a,a=<span class="number">1</span>-<span class="title class_">Math</span>.<span class="title function_">exp</span>(-a),b+=a*(<span class="number">1</span>-b));<span class="keyword">return</span> b*f.<span class="property">pulseNormalize</span>&#125;<span class="keyword">var</span> w=&#123;<span class="attr">frameRate</span>:<span class="number">150</span>,<span class="attr">animationTime</span>:<span class="number">600</span>,<span class="attr">stepSize</span>:<span class="number">120</span>,<span class="attr">pulseAlgorithm</span>:!<span class="number">0</span>,<span class="attr">pulseScale</span>:<span class="number">6</span>,<span class="attr">pulseNormalize</span>:<span class="number">1</span>,<span class="attr">accelerationDelta</span>:<span class="number">50</span>,<span class="attr">accelerationMax</span>:<span class="number">1</span>,<span class="attr">keyboardSupport</span>:!<span class="number">0</span>,<span class="attr">arrowScroll</span>:<span class="number">120</span>,<span class="attr">touchpadSupport</span>:!<span class="number">0</span>,<span class="attr">fixedBackground</span>:!<span class="number">0</span>,<span class="attr">excluded</span>:<span class="string">&quot;&quot;</span>&#125;,f=w,E=!<span class="number">1</span>,v=&#123;<span class="attr">x</span>:<span class="number">0</span>,<span class="attr">y</span>:<span class="number">0</span>&#125;,D=!<span class="number">1</span>,n=<span class="variable language_">document</span>.<span class="property">documentElement</span>,u,h=[<span class="number">120</span>,<span class="number">120</span>,<span class="number">120</span>],g=&#123;<span class="attr">left</span>:<span class="number">37</span>,<span class="attr">up</span>:<span class="number">38</span>,<span class="attr">right</span>:<span class="number">39</span>,<span class="attr">down</span>:<span class="number">40</span>,<span class="attr">spacebar</span>:<span class="number">32</span>,<span class="attr">pageup</span>:<span class="number">33</span>,<span class="attr">pagedown</span>:<span class="number">34</span>,<span class="attr">end</span>:<span class="number">35</span>,<span class="attr">home</span>:<span class="number">36</span>&#125;,f=w,p=[],y=!<span class="number">1</span>,x=+<span class="keyword">new</span> <span class="title class_">Date</span>,B=&#123;&#125;;<span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;B=&#123;&#125;&#125;,<span class="number">1E4</span>);<span class="keyword">var</span> J=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">var</span> a=<span class="number">0</span>;<span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">b</span>)&#123;<span class="keyword">return</span> b.<span class="property">uniqueID</span>||(b.<span class="property">uniqueID</span>=a++)&#125;&#125;(),N,H=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">requestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">webkitRequestAnimationFrame</span>||<span class="keyword">function</span>(<span class="params">a,b,d</span>)&#123;<span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(a,d||<span class="number">1E3</span>/<span class="number">60</span>)&#125;&#125;(),w=<span class="regexp">/chrome/i</span>.<span class="title function_">test</span>(<span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="property">userAgent</span>);<span class="string">&quot;onmousewheel&quot;</span><span class="keyword">in</span> <span class="variable language_">document</span>&amp;&amp;w&amp;&amp;(<span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;mousedown&quot;</span>,O,!<span class="number">1</span>),<span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;mousewheel&quot;</span>,M,&#123;<span class="attr">passive</span>:<span class="literal">false</span>&#125;),<span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>,C,!<span class="number">1</span>));</span><br><span class="line"><span class="title function_">C</span>();</span><br></pre></td></tr></table></figure>
<h1 id="缤纷文字">缤纷文字</h1>
<p>使用标签 <code>#binft</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> binft = <span class="keyword">function</span> (<span class="params">r</span>) &#123;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">t</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> b[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * b.<span class="property">length</span>)]</span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">e</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">94</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>() + <span class="number">33</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">n</span>(<span class="params">r</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>(), i = <span class="number">0</span>; r &gt; i; i++) &#123;</span><br><span class="line">          <span class="keyword">var</span> l = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>);</span><br><span class="line">          l.<span class="property">textContent</span> = <span class="title function_">e</span>(), l.<span class="property">style</span>.<span class="property">color</span> = <span class="title function_">t</span>(), n.<span class="title function_">appendChild</span>(l)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">i</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> t = o[c.<span class="property">skillI</span>];</span><br><span class="line">        c.<span class="property">step</span> ? c.<span class="property">step</span>-- : (c.<span class="property">step</span> = g, c.<span class="property">prefixP</span> &lt; l.<span class="property">length</span> ? (c.<span class="property">prefixP</span> &gt;= <span class="number">0</span> &amp;&amp; (c.<span class="property">text</span> += l[c.<span class="property">prefixP</span>]), c.<span class="property">prefixP</span>++) : <span class="string">&quot;forward&quot;</span> === c.<span class="property">direction</span> ? c.<span class="property">skillP</span> &lt; t.<span class="property">length</span> ? (c.<span class="property">text</span> += t[c.<span class="property">skillP</span>], c.<span class="property">skillP</span>++) : c.<span class="property">delay</span> ? c.<span class="property">delay</span>-- : (c.<span class="property">direction</span> = <span class="string">&quot;backward&quot;</span>, c.<span class="property">delay</span> = a) : c.<span class="property">skillP</span> &gt; <span class="number">0</span> ? (c.<span class="property">text</span> = c.<span class="property">text</span>.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>), c.<span class="property">skillP</span>--) : (c.<span class="property">skillI</span> = (c.<span class="property">skillI</span> + <span class="number">1</span>) % o.<span class="property">length</span>, c.<span class="property">direction</span> = <span class="string">&quot;forward&quot;</span>)), r.<span class="property">textContent</span> = c.<span class="property">text</span>, r.<span class="title function_">appendChild</span>(<span class="title function_">n</span>(c.<span class="property">prefixP</span> &lt; l.<span class="property">length</span> ? <span class="title class_">Math</span>.<span class="title function_">min</span>(s, s + c.<span class="property">prefixP</span>) : <span class="title class_">Math</span>.<span class="title function_">min</span>(s, t.<span class="property">length</span> - c.<span class="property">skillP</span>))), <span class="built_in">setTimeout</span>(i, d)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> l = <span class="string">&quot;&quot;</span>,</span><br><span class="line"></span><br><span class="line">      o = [<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;binft&#x27;</span>).<span class="property">innerText</span>].<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">r</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> r + <span class="string">&quot;&quot;</span></span><br><span class="line">      &#125;),</span><br><span class="line">      a = <span class="number">2</span>,</span><br><span class="line">      g = <span class="number">1</span>,</span><br><span class="line">      s = <span class="number">5</span>,</span><br><span class="line">      d = <span class="number">100</span>,</span><br><span class="line">      b = [<span class="string">&quot;rgb(110,64,170)&quot;</span>, <span class="string">&quot;rgb(150,61,179)&quot;</span>, <span class="string">&quot;rgb(191,60,175)&quot;</span>, <span class="string">&quot;rgb(228,65,157)&quot;</span>, <span class="string">&quot;rgb(254,75,131)&quot;</span>, <span class="string">&quot;rgb(255,94,99)&quot;</span>, <span class="string">&quot;rgb(255,120,71)&quot;</span>, <span class="string">&quot;rgb(251,150,51)&quot;</span>, <span class="string">&quot;rgb(226,183,47)&quot;</span>, <span class="string">&quot;rgb(198,214,60)&quot;</span>, <span class="string">&quot;rgb(175,240,91)&quot;</span>, <span class="string">&quot;rgb(127,246,88)&quot;</span>, <span class="string">&quot;rgb(82,246,103)&quot;</span>, <span class="string">&quot;rgb(48,239,130)&quot;</span>, <span class="string">&quot;rgb(29,223,163)&quot;</span>, <span class="string">&quot;rgb(26,199,194)&quot;</span>, <span class="string">&quot;rgb(35,171,216)&quot;</span>, <span class="string">&quot;rgb(54,140,225)&quot;</span>, <span class="string">&quot;rgb(76,110,219)&quot;</span>, <span class="string">&quot;rgb(96,84,200)&quot;</span>],</span><br><span class="line">      c = &#123;</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">prefixP</span>: -s,</span><br><span class="line">        <span class="attr">skillI</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">skillP</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">direction</span>: <span class="string">&quot;forward&quot;</span>,</span><br><span class="line">        <span class="attr">delay</span>: a,</span><br><span class="line">        <span class="attr">step</span>: g</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="title function_">i</span>()</span><br><span class="line">      &#125;;</span><br></pre></td></tr></table></figure>
<h1 id="控制台输出彩色文字">控制台输出彩色文字</h1>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> css = <span class="string">&quot;text-shadow: -1px -1px hsl(0,100%,50%), 1px 1px hsl(5.4, 100%, 50%), 3px 2px hsl(10.8, 100%, 50%), 5px 3px hsl(16.2, 100%, 50%), 7px 4px hsl(21.6, 100%, 50%), 9px 5px hsl(27, 100%, 50%), 11px 6px hsl(32.4, 100%, 50%), 13px 7px hsl(37.8, 100%, 50%), 14px 8px hsl(43.2, 100%, 50%), 16px 9px hsl(48.6, 100%, 50%), 18px 10px hsl(54, 100%, 50%), 20px 11px hsl(59.4, 100%, 50%), 22px 12px hsl(64.8, 100%, 50%), 23px 13px hsl(70.2, 100%, 50%), 25px 14px hsl(75.6, 100%, 50%), 27px 15px hsl(81, 100%, 50%), 28px 16px hsl(86.4, 100%, 50%), 30px 17px hsl(91.8, 100%, 50%), 32px 18px hsl(97.2, 100%, 50%), 33px 19px hsl(102.6, 100%, 50%), 35px 20px hsl(108, 100%, 50%), 36px 21px hsl(113.4, 100%, 50%), 38px 22px hsl(118.8, 100%, 50%), 39px 23px hsl(124.2, 100%, 50%), 41px 24px hsl(129.6, 100%, 50%), 42px 25px hsl(135, 100%, 50%), 43px 26px hsl(140.4, 100%, 50%), 45px 27px hsl(145.8, 100%, 50%), 46px 28px hsl(151.2, 100%, 50%), 47px 29px hsl(156.6, 100%, 50%), 48px 30px hsl(162, 100%, 50%), 49px 31px hsl(167.4, 100%, 50%), 50px 32px hsl(172.8, 100%, 50%), 51px 33px hsl(178.2, 100%, 50%), 52px 34px hsl(183.6, 100%, 50%), 53px 35px hsl(189, 100%, 50%), 54px 36px hsl(194.4, 100%, 50%), 55px 37px hsl(199.8, 100%, 50%), 55px 38px hsl(205.2, 100%, 50%), 56px 39px hsl(210.6, 100%, 50%), 57px 40px hsl(216, 100%, 50%), 57px 41px hsl(221.4, 100%, 50%), 58px 42px hsl(226.8, 100%, 50%), 58px 43px hsl(232.2, 100%, 50%), 58px 44px hsl(237.6, 100%, 50%), 59px 45px hsl(243, 100%, 50%), 59px 46px hsl(248.4, 100%, 50%), 59px 47px hsl(253.8, 100%, 50%), 59px 48px hsl(259.2, 100%, 50%), 59px 49px hsl(264.6, 100%, 50%), 60px 50px hsl(270, 100%, 50%), 59px 51px hsl(275.4, 100%, 50%), 59px 52px hsl(280.8, 100%, 50%), 59px 53px hsl(286.2, 100%, 50%), 59px 54px hsl(291.6, 100%, 50%), 59px 55px hsl(297, 100%, 50%), 58px 56px hsl(302.4, 100%, 50%), 58px 57px hsl(307.8, 100%, 50%), 58px 58px hsl(313.2, 100%, 50%), 57px 59px hsl(318.6, 100%, 50%), 57px 60px hsl(324, 100%, 50%), 56px 61px hsl(329.4, 100%, 50%), 55px 62px hsl(334.8, 100%, 50%), 55px 63px hsl(340.2, 100%, 50%), 54px 64px hsl(345.6, 100%, 50%), 53px 65px hsl(351, 100%, 50%), 52px 66px hsl(356.4, 100%, 50%), 51px 67px hsl(361.8, 100%, 50%), 50px 68px hsl(367.2, 100%, 50%), 49px 69px hsl(372.6, 100%, 50%), 48px 70px hsl(378, 100%, 50%), 47px 71px hsl(383.4, 100%, 50%), 46px 72px hsl(388.8, 100%, 50%), 45px 73px hsl(394.2, 100%, 50%), 43px 74px hsl(399.6, 100%, 50%), 42px 75px hsl(405, 100%, 50%), 41px 76px hsl(410.4, 100%, 50%), 39px 77px hsl(415.8, 100%, 50%), 38px 78px hsl(421.2, 100%, 50%), 36px 79px hsl(426.6, 100%, 50%), 35px 80px hsl(432, 100%, 50%), 33px 81px hsl(437.4, 100%, 50%), 32px 82px hsl(442.8, 100%, 50%), 30px 83px hsl(448.2, 100%, 50%), 28px 84px hsl(453.6, 100%, 50%), 27px 85px hsl(459, 100%, 50%), 25px 86px hsl(464.4, 100%, 50%), 23px 87px hsl(469.8, 100%, 50%), 22px 88px hsl(475.2, 100%, 50%), 20px 89px hsl(480.6, 100%, 50%), 18px 90px hsl(486, 100%, 50%), 16px 91px hsl(491.4, 100%, 50%), 14px 92px hsl(496.8, 100%, 50%), 13px 93px hsl(502.2, 100%, 50%), 11px 94px hsl(507.6, 100%, 50%), 9px 95px hsl(513, 100%, 50%), 7px 96px hsl(518.4, 100%, 50%), 5px 97px hsl(523.8, 100%, 50%), 3px 98px hsl(529.2, 100%, 50%), 1px 99px hsl(534.6, 100%, 50%), 7px 100px hsl(540, 100%, 50%), -1px 101px hsl(545.4, 100%, 50%), -3px 102px hsl(550.8, 100%, 50%), -5px 103px hsl(556.2, 100%, 50%), -7px 104px hsl(561.6, 100%, 50%), -9px 105px hsl(567, 100%, 50%), -11px 106px hsl(572.4, 100%, 50%), -13px 107px hsl(577.8, 100%, 50%), -14px 108px hsl(583.2, 100%, 50%), -16px 109px hsl(588.6, 100%, 50%), -18px 110px hsl(594, 100%, 50%), -20px 111px hsl(599.4, 100%, 50%), -22px 112px hsl(604.8, 100%, 50%), -23px 113px hsl(610.2, 100%, 50%), -25px 114px hsl(615.6, 100%, 50%), -27px 115px hsl(621, 100%, 50%), -28px 116px hsl(626.4, 100%, 50%), -30px 117px hsl(631.8, 100%, 50%), -32px 118px hsl(637.2, 100%, 50%), -33px 119px hsl(642.6, 100%, 50%), -35px 120px hsl(648, 100%, 50%), -36px 121px hsl(653.4, 100%, 50%), -38px 122px hsl(658.8, 100%, 50%), -39px 123px hsl(664.2, 100%, 50%), -41px 124px hsl(669.6, 100%, 50%), -42px 125px hsl(675, 100%, 50%), -43px 126px hsl(680.4, 100%, 50%), -45px 127px hsl(685.8, 100%, 50%), -46px 128px hsl(691.2, 100%, 50%), -47px 129px hsl(696.6, 100%, 50%), -48px 130px hsl(702, 100%, 50%), -49px 131px hsl(707.4, 100%, 50%), -50px 132px hsl(712.8, 100%, 50%), -51px 133px hsl(718.2, 100%, 50%), -52px 134px hsl(723.6, 100%, 50%), -53px 135px hsl(729, 100%, 50%), -54px 136px hsl(734.4, 100%, 50%), -55px 137px hsl(739.8, 100%, 50%), -55px 138px hsl(745.2, 100%, 50%), -56px 139px hsl(750.6, 100%, 50%), -57px 140px hsl(756, 100%, 50%), -57px 141px hsl(761.4, 100%, 50%), -58px 142px hsl(766.8, 100%, 50%), -58px 143px hsl(772.2, 100%, 50%), -58px 144px hsl(777.6, 100%, 50%), -59px 145px hsl(783, 100%, 50%), -59px 146px hsl(788.4, 100%, 50%), -59px 147px hsl(793.8, 100%, 50%), -59px 148px hsl(799.2, 100%, 50%), -59px 149px hsl(804.6, 100%, 50%), -60px 150px hsl(810, 100%, 50%), -59px 151px hsl(815.4, 100%, 50%), -59px 152px hsl(820.8, 100%, 50%), -59px 153px hsl(826.2, 100%, 50%), -59px 154px hsl(831.6, 100%, 50%), -59px 155px hsl(837, 100%, 50%), -58px 156px hsl(842.4, 100%, 50%), -58px 157px hsl(847.8, 100%, 50%), -58px 158px hsl(853.2, 100%, 50%), -57px 159px hsl(858.6, 100%, 50%), -57px 160px hsl(864, 100%, 50%), -56px 161px hsl(869.4, 100%, 50%), -55px 162px hsl(874.8, 100%, 50%), -55px 163px hsl(880.2, 100%, 50%), -54px 164px hsl(885.6, 100%, 50%), -53px 165px hsl(891, 100%, 50%), -52px 166px hsl(896.4, 100%, 50%), -51px 167px hsl(901.8, 100%, 50%), -50px 168px hsl(907.2, 100%, 50%), -49px 169px hsl(912.6, 100%, 50%), -48px 170px hsl(918, 100%, 50%), -47px 171px hsl(923.4, 100%, 50%), -46px 172px hsl(928.8, 100%, 50%), -45px 173px hsl(934.2, 100%, 50%), -43px 174px hsl(939.6, 100%, 50%), -42px 175px hsl(945, 100%, 50%), -41px 176px hsl(950.4, 100%, 50%), -39px 177px hsl(955.8, 100%, 50%), -38px 178px hsl(961.2, 100%, 50%), -36px 179px hsl(966.6, 100%, 50%), -35px 180px hsl(972, 100%, 50%), -33px 181px hsl(977.4, 100%, 50%), -32px 182px hsl(982.8, 100%, 50%), -30px 183px hsl(988.2, 100%, 50%), -28px 184px hsl(993.6, 100%, 50%), -27px 185px hsl(999, 100%, 50%), -25px 186px hsl(1004.4, 100%, 50%), -23px 187px hsl(1009.8, 100%, 50%), -22px 188px hsl(1015.2, 100%, 50%), -20px 189px hsl(1020.6, 100%, 50%), -18px 190px hsl(1026, 100%, 50%), -16px 191px hsl(1031.4, 100%, 50%), -14px 192px hsl(1036.8, 100%, 50%), -13px 193px hsl(1042.2, 100%, 50%), -11px 194px hsl(1047.6, 100%, 50%), -9px 195px hsl(1053, 100%, 50%), -7px 196px hsl(1058.4, 100%, 50%), -5px 197px hsl(1063.8, 100%, 50%), -3px 198px hsl(1069.2, 100%, 50%), -1px 199px hsl(1074.6, 100%, 50%), -1px 200px hsl(1080, 100%, 50%), 1px 201px hsl(1085.4, 100%, 50%), 3px 202px hsl(1090.8, 100%, 50%), 5px 203px hsl(1096.2, 100%, 50%), 7px 204px hsl(1101.6, 100%, 50%), 9px 205px hsl(1107, 100%, 50%), 11px 206px hsl(1112.4, 100%, 50%), 13px 207px hsl(1117.8, 100%, 50%), 14px 208px hsl(1123.2, 100%, 50%), 16px 209px hsl(1128.6, 100%, 50%), 18px 210px hsl(1134, 100%, 50%), 20px 211px hsl(1139.4, 100%, 50%), 22px 212px hsl(1144.8, 100%, 50%), 23px 213px hsl(1150.2, 100%, 50%), 25px 214px hsl(1155.6, 100%, 50%), 27px 215px hsl(1161, 100%, 50%), 28px 216px hsl(1166.4, 100%, 50%), 30px 217px hsl(1171.8, 100%, 50%), 32px 218px hsl(1177.2, 100%, 50%), 33px 219px hsl(1182.6, 100%, 50%), 35px 220px hsl(1188, 100%, 50%), 36px 221px hsl(1193.4, 100%, 50%), 38px 222px hsl(1198.8, 100%, 50%), 39px 223px hsl(1204.2, 100%, 50%), 41px 224px hsl(1209.6, 100%, 50%), 42px 225px hsl(1215, 100%, 50%), 43px 226px hsl(1220.4, 100%, 50%), 45px 227px hsl(1225.8, 100%, 50%), 46px 228px hsl(1231.2, 100%, 50%), 47px 229px hsl(1236.6, 100%, 50%), 48px 230px hsl(1242, 100%, 50%), 49px 231px hsl(1247.4, 100%, 50%), 50px 232px hsl(1252.8, 100%, 50%), 51px 233px hsl(1258.2, 100%, 50%), 52px 234px hsl(1263.6, 100%, 50%), 53px 235px hsl(1269, 100%, 50%), 54px 236px hsl(1274.4, 100%, 50%), 55px 237px hsl(1279.8, 100%, 50%), 55px 238px hsl(1285.2, 100%, 50%), 56px 239px hsl(1290.6, 100%, 50%), 57px 240px hsl(1296, 100%, 50%), 57px 241px hsl(1301.4, 100%, 50%), 58px 242px hsl(1306.8, 100%, 50%), 58px 243px hsl(1312.2, 100%, 50%), 58px 244px hsl(1317.6, 100%, 50%), 59px 245px hsl(1323, 100%, 50%), 59px 246px hsl(1328.4, 100%, 50%), 59px 247px hsl(1333.8, 100%, 50%), 59px 248px hsl(1339.2, 100%, 50%), 59px 249px hsl(1344.6, 100%, 50%), 60px 250px hsl(1350, 100%, 50%), 59px 251px hsl(1355.4, 100%, 50%), 59px 252px hsl(1360.8, 100%, 50%), 59px 253px hsl(1366.2, 100%, 50%), 59px 254px hsl(1371.6, 100%, 50%), 59px 255px hsl(1377, 100%, 50%), 58px 256px hsl(1382.4, 100%, 50%), 58px 257px hsl(1387.8, 100%, 50%), 58px 258px hsl(1393.2, 100%, 50%), 57px 259px hsl(1398.6, 100%, 50%), 57px 260px hsl(1404, 100%, 50%), 56px 261px hsl(1409.4, 100%, 50%), 55px 262px hsl(1414.8, 100%, 50%), 55px 263px hsl(1420.2, 100%, 50%), 54px 264px hsl(1425.6, 100%, 50%), 53px 265px hsl(1431, 100%, 50%), 52px 266px hsl(1436.4, 100%, 50%), 51px 267px hsl(1441.8, 100%, 50%), 50px 268px hsl(1447.2, 100%, 50%), 49px 269px hsl(1452.6, 100%, 50%), 48px 270px hsl(1458, 100%, 50%), 47px 271px hsl(1463.4, 100%, 50%), 46px 272px hsl(1468.8, 100%, 50%), 45px 273px hsl(1474.2, 100%, 50%), 43px 274px hsl(1479.6, 100%, 50%), 42px 275px hsl(1485, 100%, 50%), 41px 276px hsl(1490.4, 100%, 50%), 39px 277px hsl(1495.8, 100%, 50%), 38px 278px hsl(1501.2, 100%, 50%), 36px 279px hsl(1506.6, 100%, 50%), 35px 280px hsl(1512, 100%, 50%), 33px 281px hsl(1517.4, 100%, 50%), 32px 282px hsl(1522.8, 100%, 50%), 30px 283px hsl(1528.2, 100%, 50%), 28px 284px hsl(1533.6, 100%, 50%), 27px 285px hsl(1539, 100%, 50%), 25px 286px hsl(1544.4, 100%, 50%), 23px 287px hsl(1549.8, 100%, 50%), 22px 288px hsl(1555.2, 100%, 50%), 20px 289px hsl(1560.6, 100%, 50%), 18px 290px hsl(1566, 100%, 50%), 16px 291px hsl(1571.4, 100%, 50%), 14px 292px hsl(1576.8, 100%, 50%), 13px 293px hsl(1582.2, 100%, 50%), 11px 294px hsl(1587.6, 100%, 50%), 9px 295px hsl(1593, 100%, 50%), 7px 296px hsl(1598.4, 100%, 50%), 5px 297px hsl(1603.8, 100%, 50%), 3px 298px hsl(1609.2, 100%, 50%), 1px 299px hsl(1614.6, 100%, 50%), 2px 300px hsl(1620, 100%, 50%), -1px 301px hsl(1625.4, 100%, 50%), -3px 302px hsl(1630.8, 100%, 50%), -5px 303px hsl(1636.2, 100%, 50%), -7px 304px hsl(1641.6, 100%, 50%), -9px 305px hsl(1647, 100%, 50%), -11px 306px hsl(1652.4, 100%, 50%), -13px 307px hsl(1657.8, 100%, 50%), -14px 308px hsl(1663.2, 100%, 50%), -16px 309px hsl(1668.6, 100%, 50%), -18px 310px hsl(1674, 100%, 50%), -20px 311px hsl(1679.4, 100%, 50%), -22px 312px hsl(1684.8, 100%, 50%), -23px 313px hsl(1690.2, 100%, 50%), -25px 314px hsl(1695.6, 100%, 50%), -27px 315px hsl(1701, 100%, 50%), -28px 316px hsl(1706.4, 100%, 50%), -30px 317px hsl(1711.8, 100%, 50%), -32px 318px hsl(1717.2, 100%, 50%), -33px 319px hsl(1722.6, 100%, 50%), -35px 320px hsl(1728, 100%, 50%), -36px 321px hsl(1733.4, 100%, 50%), -38px 322px hsl(1738.8, 100%, 50%), -39px 323px hsl(1744.2, 100%, 50%), -41px 324px hsl(1749.6, 100%, 50%), -42px 325px hsl(1755, 100%, 50%), -43px 326px hsl(1760.4, 100%, 50%), -45px 327px hsl(1765.8, 100%, 50%), -46px 328px hsl(1771.2, 100%, 50%), -47px 329px hsl(1776.6, 100%, 50%), -48px 330px hsl(1782, 100%, 50%), -49px 331px hsl(1787.4, 100%, 50%), -50px 332px hsl(1792.8, 100%, 50%), -51px 333px hsl(1798.2, 100%, 50%), -52px 334px hsl(1803.6, 100%, 50%), -53px 335px hsl(1809, 100%, 50%), -54px 336px hsl(1814.4, 100%, 50%), -55px 337px hsl(1819.8, 100%, 50%), -55px 338px hsl(1825.2, 100%, 50%), -56px 339px hsl(1830.6, 100%, 50%), -57px 340px hsl(1836, 100%, 50%), -57px 341px hsl(1841.4, 100%, 50%), -58px 342px hsl(1846.8, 100%, 50%), -58px 343px hsl(1852.2, 100%, 50%), -58px 344px hsl(1857.6, 100%, 50%), -59px 345px hsl(1863, 100%, 50%), -59px 346px hsl(1868.4, 100%, 50%), -59px 347px hsl(1873.8, 100%, 50%), -59px 348px hsl(1879.2, 100%, 50%), -59px 349px hsl(1884.6, 100%, 50%), -60px 350px hsl(1890, 100%, 50%), -59px 351px hsl(1895.4, 100%, 50%), -59px 352px hsl(1900.8, 100%, 50%), -59px 353px hsl(1906.2, 100%, 50%), -59px 354px hsl(1911.6, 100%, 50%), -59px 355px hsl(1917, 100%, 50%), -58px 356px hsl(1922.4, 100%, 50%), -58px 357px hsl(1927.8, 100%, 50%), -58px 358px hsl(1933.2, 100%, 50%), -57px 359px hsl(1938.6, 100%, 50%), -57px 360px hsl(1944, 100%, 50%), -56px 361px hsl(1949.4, 100%, 50%), -55px 362px hsl(1954.8, 100%, 50%), -55px 363px hsl(1960.2, 100%, 50%), -54px 364px hsl(1965.6, 100%, 50%), -53px 365px hsl(1971, 100%, 50%), -52px 366px hsl(1976.4, 100%, 50%), -51px 367px hsl(1981.8, 100%, 50%), -50px 368px hsl(1987.2, 100%, 50%), -49px 369px hsl(1992.6, 100%, 50%), -48px 370px hsl(1998, 100%, 50%), -47px 371px hsl(2003.4, 100%, 50%), -46px 372px hsl(2008.8, 100%, 50%), -45px 373px hsl(2014.2, 100%, 50%), -43px 374px hsl(2019.6, 100%, 50%), -42px 375px hsl(2025, 100%, 50%), -41px 376px hsl(2030.4, 100%, 50%), -39px 377px hsl(2035.8, 100%, 50%), -38px 378px hsl(2041.2, 100%, 50%), -36px 379px hsl(2046.6, 100%, 50%), -35px 380px hsl(2052, 100%, 50%), -33px 381px hsl(2057.4, 100%, 50%), -32px 382px hsl(2062.8, 100%, 50%), -30px 383px hsl(2068.2, 100%, 50%), -28px 384px hsl(2073.6, 100%, 50%), -27px 385px hsl(2079, 100%, 50%), -25px 386px hsl(2084.4, 100%, 50%), -23px 387px hsl(2089.8, 100%, 50%), -22px 388px hsl(2095.2, 100%, 50%), -20px 389px hsl(2100.6, 100%, 50%), -18px 390px hsl(2106, 100%, 50%), -16px 391px hsl(2111.4, 100%, 50%), -14px 392px hsl(2116.8, 100%, 50%), -13px 393px hsl(2122.2, 100%, 50%), -11px 394px hsl(2127.6, 100%, 50%), -9px 395px hsl(2133, 100%, 50%), -7px 396px hsl(2138.4, 100%, 50%), -5px 397px hsl(2143.8, 100%, 50%), -3px 398px hsl(2149.2, 100%, 50%), -1px 399px hsl(2154.6, 100%, 50%); font-size: 40px;&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;%cYurchiu is very cute!&quot;</span>,css);</span><br></pre></td></tr></table></figure>
<h1 id="github-边角链接">GitHub 边角链接</h1>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/yz-hs&quot;</span> <span class="attr">class</span>=<span class="string">&quot;github-corner&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;80&quot;</span> <span class="attr">height</span>=<span class="string">&quot;80&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 250 250&quot;</span> <span class="attr">style</span>=<span class="string">&quot;fill:#ffb6c1; color:#fff; position: absolute; top: 0; border: 0; right: 0;&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">style</span>=<span class="string">&quot;transform-origin: 130px 106px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-arm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-body&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> </span></span><br><span class="line"><span class="language-css"><span class="selector-class">.octo-arm</span> &#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@keyframes</span> octocat-wave&#123;<span class="number">0%</span>,<span class="number">100%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">0</span>)&#125;<span class="number">20%</span>,<span class="number">60%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">25deg</span>)&#125;<span class="number">40%</span>,<span class="number">80%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">10deg</span>)&#125;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@media</span> (<span class="attribute">max-width</span>:<span class="number">500px</span>)&#123;<span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:none&#125;<span class="selector-class">.github-corner</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="显示时间特效">显示时间特效</h1>
<p>html：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;showTime&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/showtime.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>js：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showTime</span>(<span class="params"></span>)&#123;</span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">$(<span class="string">&#x27;#showTime&#x27;</span>).<span class="title function_">html</span>(<span class="string">&#x27;&lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt;&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">WINDOW_WIDTH</span> = <span class="number">920</span>;</span><br><span class="line">		<span class="keyword">var</span> <span class="variable constant_">WINDOW_HEIGHT</span> = <span class="number">400</span>;</span><br><span class="line">		<span class="keyword">var</span> <span class="variable constant_">RADIUS</span> = <span class="number">7</span>; <span class="comment">//球半径</span></span><br><span class="line">		<span class="keyword">var</span> <span class="variable constant_">NUMBER_GAP</span> = <span class="number">10</span>; <span class="comment">//数字之间的间隙</span></span><br><span class="line">		<span class="keyword">var</span> u=<span class="number">0.65</span>; <span class="comment">//碰撞能量损耗系数</span></span><br><span class="line">		<span class="keyword">var</span> context; <span class="comment">//Canvas绘制上下文</span></span><br><span class="line">		<span class="keyword">var</span> balls = []; <span class="comment">//存储彩色的小球</span></span><br><span class="line">		<span class="keyword">const</span> colors = [<span class="string">&quot;#33B5E5&quot;</span>,<span class="string">&quot;#0099CC&quot;</span>,<span class="string">&quot;#AA66CC&quot;</span>,<span class="string">&quot;#9933CC&quot;</span>,<span class="string">&quot;#99CC00&quot;</span>,<span class="string">&quot;#669900&quot;</span>,<span class="string">&quot;#FFBB33&quot;</span>,<span class="string">&quot;#FF8800&quot;</span>,<span class="string">&quot;#FF4444&quot;</span>,<span class="string">&quot;#CC0000&quot;</span>]; <span class="comment">//彩色小球的颜色</span></span><br><span class="line">		<span class="keyword">var</span> currentNums = []; <span class="comment">//屏幕显示的8个字符</span></span><br><span class="line">		<span class="keyword">var</span> digit =</span><br><span class="line">                [</span><br><span class="line">                    [</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">                    ],<span class="comment">//0</span></span><br><span class="line">                    [</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">                    ],<span class="comment">//1</span></span><br><span class="line">                    [</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">                    ],<span class="comment">//2</span></span><br><span class="line">                    [</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">                    ],<span class="comment">//3</span></span><br><span class="line">                    [</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">                    ],<span class="comment">//4</span></span><br><span class="line">                    [</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">                    ],<span class="comment">//5</span></span><br><span class="line">                    [</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">                    ],<span class="comment">//6</span></span><br><span class="line">                    [</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">                    ],<span class="comment">//7</span></span><br><span class="line">                    [</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">                    ],<span class="comment">//8</span></span><br><span class="line">                    [</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">                    ],<span class="comment">//9</span></span><br><span class="line">                    [</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">                    ]<span class="comment">//:</span></span><br><span class="line">                ];</span><br><span class="line"></span><br><span class="line">		<span class="keyword">function</span> <span class="title function_">drawDatetime</span>(<span class="params">cxt</span>)&#123;</span><br><span class="line">			<span class="keyword">var</span> nums = [];</span><br><span class="line"></span><br><span class="line">			context.<span class="property">fillStyle</span>=<span class="string">&quot;#005eac&quot;</span></span><br><span class="line">			<span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">			<span class="keyword">var</span> offsetX = <span class="number">70</span>, offsetY = <span class="number">30</span>;</span><br><span class="line">			<span class="keyword">var</span> hours = date.<span class="title function_">getHours</span>();</span><br><span class="line">			<span class="keyword">var</span> num1 = <span class="title class_">Math</span>.<span class="title function_">floor</span>(hours/<span class="number">10</span>);</span><br><span class="line">			<span class="keyword">var</span> num2 = hours%<span class="number">10</span>;</span><br><span class="line">			nums.<span class="title function_">push</span>(&#123;<span class="attr">num</span>: num1&#125;);</span><br><span class="line">			nums.<span class="title function_">push</span>(&#123;<span class="attr">num</span>: num2&#125;);</span><br><span class="line">			nums.<span class="title function_">push</span>(&#123;<span class="attr">num</span>: <span class="number">10</span>&#125;); <span class="comment">//冒号</span></span><br><span class="line">			<span class="keyword">var</span> minutes = date.<span class="title function_">getMinutes</span>();</span><br><span class="line">			<span class="keyword">var</span> num1 = <span class="title class_">Math</span>.<span class="title function_">floor</span>(minutes/<span class="number">10</span>);</span><br><span class="line">			<span class="keyword">var</span> num2 = minutes%<span class="number">10</span>;</span><br><span class="line">			nums.<span class="title function_">push</span>(&#123;<span class="attr">num</span>: num1&#125;);</span><br><span class="line">			nums.<span class="title function_">push</span>(&#123;<span class="attr">num</span>: num2&#125;);</span><br><span class="line">			nums.<span class="title function_">push</span>(&#123;<span class="attr">num</span>: <span class="number">10</span>&#125;); <span class="comment">//冒号</span></span><br><span class="line">			<span class="keyword">var</span> seconds = date.<span class="title function_">getSeconds</span>();</span><br><span class="line">			<span class="keyword">var</span> num1 = <span class="title class_">Math</span>.<span class="title function_">floor</span>(seconds/<span class="number">10</span>);</span><br><span class="line">			<span class="keyword">var</span> num2 = seconds%<span class="number">10</span>;</span><br><span class="line">			nums.<span class="title function_">push</span>(&#123;<span class="attr">num</span>: num1&#125;);</span><br><span class="line">			nums.<span class="title function_">push</span>(&#123;<span class="attr">num</span>: num2&#125;);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">0</span>;x&lt;nums.<span class="property">length</span>;x++)&#123;</span><br><span class="line">				nums[x].<span class="property">offsetX</span> = offsetX;</span><br><span class="line">				offsetX = <span class="title function_">drawSingleNumber</span>(offsetX,offsetY, nums[x].<span class="property">num</span>,cxt);</span><br><span class="line">				<span class="comment">//两个数字连一块，应该间隔一些距离</span></span><br><span class="line">				<span class="keyword">if</span>(x&lt;nums.<span class="property">length</span>-<span class="number">1</span>)&#123;</span><br><span class="line">					<span class="keyword">if</span>((nums[x].<span class="property">num</span>!=<span class="number">10</span>) &amp;&amp;(nums[x+<span class="number">1</span>].<span class="property">num</span>!=<span class="number">10</span>))&#123;</span><br><span class="line">						offsetX+=<span class="variable constant_">NUMBER_GAP</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//说明这是初始化</span></span><br><span class="line">			<span class="keyword">if</span>(currentNums.<span class="property">length</span> ==<span class="number">0</span>)&#123;</span><br><span class="line">				currentNums = nums;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="comment">//进行比较</span></span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">var</span> index = <span class="number">0</span>;index&lt;currentNums.<span class="property">length</span>;index++)&#123;</span><br><span class="line">					<span class="keyword">if</span>(currentNums[index].<span class="property">num</span>!=nums[index].<span class="property">num</span>)&#123;</span><br><span class="line">						<span class="comment">//不一样时，添加彩色小球</span></span><br><span class="line">						<span class="title function_">addBalls</span>(nums[index]);</span><br><span class="line">						currentNums[index].<span class="property">num</span>=nums[index].<span class="property">num</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="title function_">renderBalls</span>(cxt);</span><br><span class="line">			<span class="title function_">updateBalls</span>();</span><br><span class="line"></span><br><span class="line">			<span class="keyword">return</span> date;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">function</span> <span class="title function_">addBalls</span> (<span class="params">item</span>) &#123;</span><br><span class="line">			<span class="keyword">var</span> num = item.<span class="property">num</span>;</span><br><span class="line">			<span class="keyword">var</span> numMatrix = digit[num];</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> y = <span class="number">0</span>;y&lt;numMatrix.<span class="property">length</span>;y++)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">0</span>;x&lt;numMatrix[y].<span class="property">length</span>;x++)&#123;</span><br><span class="line">					<span class="keyword">if</span>(numMatrix[y][x]==<span class="number">1</span>)&#123;</span><br><span class="line">						<span class="keyword">var</span> ball=&#123;</span><br><span class="line">							<span class="attr">offsetX</span>:item.<span class="property">offsetX</span>+<span class="variable constant_">RADIUS</span>+<span class="variable constant_">RADIUS</span>*<span class="number">2</span>*x,</span><br><span class="line">							<span class="attr">offsetY</span>:<span class="number">30</span>+<span class="variable constant_">RADIUS</span>+<span class="variable constant_">RADIUS</span>*<span class="number">2</span>*y,</span><br><span class="line">							<span class="attr">color</span>:colors[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*colors.<span class="property">length</span>)],</span><br><span class="line">							<span class="attr">g</span>:<span class="number">1.5</span>+<span class="title class_">Math</span>.<span class="title function_">random</span>(),</span><br><span class="line">							<span class="attr">vx</span>:<span class="title class_">Math</span>.<span class="title function_">pow</span>(-<span class="number">1</span>, <span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">10</span>))*<span class="number">4</span>+<span class="title class_">Math</span>.<span class="title function_">random</span>(),</span><br><span class="line">							<span class="attr">vy</span>:-<span class="number">5</span></span><br><span class="line">						&#125;</span><br><span class="line">						balls.<span class="title function_">push</span>(ball);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">function</span> <span class="title function_">renderBalls</span>(<span class="params">cxt</span>)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> index = <span class="number">0</span>;index&lt;balls.<span class="property">length</span>;index++)&#123;</span><br><span class="line">				cxt.<span class="title function_">beginPath</span>();</span><br><span class="line">				cxt.<span class="property">fillStyle</span>=balls[index].<span class="property">color</span>;</span><br><span class="line">				cxt.<span class="title function_">arc</span>(balls[index].<span class="property">offsetX</span>, balls[index].<span class="property">offsetY</span>, <span class="variable constant_">RADIUS</span>, <span class="number">0</span>, <span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>);</span><br><span class="line">				cxt.<span class="title function_">fill</span>();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">function</span> <span class="title function_">updateBalls</span> (<span class="params"></span>) &#123;</span><br><span class="line">			<span class="keyword">var</span> i =<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> index = <span class="number">0</span>;index&lt;balls.<span class="property">length</span>;index++)&#123;</span><br><span class="line">				<span class="keyword">var</span> ball = balls[index];</span><br><span class="line">				ball.<span class="property">offsetX</span> += ball.<span class="property">vx</span>;</span><br><span class="line">				ball.<span class="property">offsetY</span> += ball.<span class="property">vy</span>;</span><br><span class="line">				ball.<span class="property">vy</span>+=ball.<span class="property">g</span>;</span><br><span class="line">				<span class="keyword">if</span>(ball.<span class="property">offsetY</span> &gt; (<span class="variable constant_">WINDOW_HEIGHT</span>-<span class="variable constant_">RADIUS</span>))&#123;</span><br><span class="line">					ball.<span class="property">offsetY</span>= <span class="variable constant_">WINDOW_HEIGHT</span>-<span class="variable constant_">RADIUS</span>;</span><br><span class="line">					ball.<span class="property">vy</span>=-ball.<span class="property">vy</span>*u;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(ball.<span class="property">offsetX</span>&gt;<span class="variable constant_">RADIUS</span>&amp;&amp;ball.<span class="property">offsetX</span>&lt;(<span class="variable constant_">WINDOW_WIDTH</span>-<span class="variable constant_">RADIUS</span>))&#123;</span><br><span class="line"></span><br><span class="line">					balls[i]=balls[index];</span><br><span class="line">					i++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//去除出边界的球</span></span><br><span class="line">			<span class="keyword">for</span>(;i&lt;balls.<span class="property">length</span>;i++)&#123;</span><br><span class="line">				balls.<span class="title function_">pop</span>();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">function</span> <span class="title function_">drawSingleNumber</span>(<span class="params">offsetX, offsetY, num, cxt</span>)&#123;</span><br><span class="line">			<span class="keyword">var</span> numMatrix = digit[num];</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> y = <span class="number">0</span>;y&lt;numMatrix.<span class="property">length</span>;y++)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">0</span>;x&lt;numMatrix[y].<span class="property">length</span>;x++)&#123;</span><br><span class="line">					<span class="keyword">if</span>(numMatrix[y][x]==<span class="number">1</span>)&#123;</span><br><span class="line">						cxt.<span class="title function_">beginPath</span>();</span><br><span class="line">						cxt.<span class="title function_">arc</span>(offsetX+<span class="variable constant_">RADIUS</span>+<span class="variable constant_">RADIUS</span>*<span class="number">2</span>*x,offsetY+<span class="variable constant_">RADIUS</span>+<span class="variable constant_">RADIUS</span>*<span class="number">2</span>*y,<span class="variable constant_">RADIUS</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>);</span><br><span class="line">						cxt.<span class="title function_">fill</span>();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			cxt.<span class="title function_">beginPath</span>();</span><br><span class="line">			offsetX += numMatrix[<span class="number">0</span>].<span class="property">length</span>*<span class="variable constant_">RADIUS</span>*<span class="number">2</span>;</span><br><span class="line">			<span class="keyword">return</span> offsetX;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">		canvas.<span class="property">width</span>=<span class="variable constant_">WINDOW_WIDTH</span>;</span><br><span class="line">		canvas.<span class="property">height</span>=<span class="variable constant_">WINDOW_HEIGHT</span>;</span><br><span class="line">		context = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//记录当前绘制的时刻</span></span><br><span class="line">		<span class="keyword">var</span> currentDate = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line">		<span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">			<span class="comment">//清空整个Canvas，重新绘制内容</span></span><br><span class="line">			context.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, context.<span class="property">canvas</span>.<span class="property">width</span>, context.<span class="property">canvas</span>.<span class="property">height</span>);</span><br><span class="line">			<span class="title function_">drawDatetime</span>(context);</span><br><span class="line">		&#125;, <span class="number">50</span>)</span><br><span class="line">&#125;);&#125;</span><br></pre></td></tr></table></figure>
<h1 id="敬请期待">敬请期待</h1>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Shortcut</tag>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 博客搭建</title>
    <url>/2019/10/03/Hexo%20%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="安装-git-node.js">1. 安装 git &amp; Node.js</h1>
<p>请自行下载。</p>
<p><a href="https://gitforwindows.org/"
class="uri">https://gitforwindows.org/</a></p>
<p><a href="https://nodejs.org/en/download/"
class="uri">https://nodejs.org/en/download/</a></p>
<span id="more"></span>
<h1 id="安装-hexo">2. 安装 Hexo</h1>
<p>先创建一个文件夹 blog，在这个文件夹下右键打开 git bash。如果 npm
不好用，使用 yarn。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>初始化 Hexo。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>打开 Hexo 的服务，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p>在浏览器输入 <code>localhost:4000</code>
就可以看到你生成的博客了。</p>
<p>Ctrl+C 关闭。</p>
<h1 id="github-创建个人仓库">3. GitHub 创建个人仓库</h1>
<p>你先要有一个 GitHub 账户，去<a
href="https://github.com/">注册一个吧</a>。</p>
<p>创建一个和你用户名相同的仓库，<strong>后面加
<code>.github.io</code></strong></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/yz-hs/PicGo/%E6%90%ADhexo%20(1).png" /></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/yz-hs/PicGo/%E6%90%ADhexo%20(2).png" /></p>
<p>点击 create repository。</p>
<h1 id="生成-ssh-添加到-github">4. 生成 SSH 添加到 GitHub</h1>
<p>回到 git bash 中，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;yourname&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure>
<p>这里的 yourname 输入你的 GitHub 用户名，youremail 输入你 GitHub
的邮箱。</p>
<p>可以用以下两条，检查一下你有没有输对。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure>
<p>然后创建 SSH,一路回车。 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure></p>
<p>这个时候它会告诉你已经生成了 .ssh
的文件夹。在你的电脑中找到这个文件夹。</p>
<p>ssh，简单来讲，就是一个秘钥，其中，id_rsa
是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub
是公共秘钥，可以随便给别人看。把这个公钥放在 GitHub 上，这样当你链接
GitHub
自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过
git 上传你的文件到 GitHub 上。</p>
<p>而后在 GitHub 的 setting 中，找到 SSH keys 的设置选项，点击 New SSH
key 把你的 id_rsa.pub 里面的信息复制进去。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>如果出现让你写 yes 或 no,写 yes。</p>
<h1 id="将-hexo-部署到-github">5. 将 Hexo 部署到 GitHub</h1>
<p>这一步，我们就可以将 Hexo 和 GitHub 关联起来，也就是将 Hexo
生成的文章部署到 GitHub 上，打开站点配置文件
<code>_config.yml</code>，翻到最后，修改为 YourName 就是你的 GitHub
账户</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:YourName/YourName.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>安装 deploy-git，也就是部署的命令,这样你才能用命令部署到 GitHub。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>然后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<p>其中 hexo clean 清除了你之前生成的东西，也可以不加。 hexo generate
顾名思义，生成静态文章，可以用 hexo g 缩写；hexo deploy 部署文章，可以用
hexo d 缩写</p>
<p>出现 <code>INFO  Deploy done: git</code>
就说明部署成功了，过一会儿就可以在
<code>http://yourname.github.io</code> 这个网站看到你的博客了。</p>
<h1 id="博客备份">6. 博客备份</h1>
<p>为了保证我们写的文章不丢失、快速迁移博客，都需要备份我们的 blog。</p>
<ol type="1">
<li><p>博客根目录，执行 <code>git init</code> 创建 git 仓库。</p></li>
<li><p>在 github 创建仓库并和本地仓库建立联系。</p></li>
<li><p>在<code>~/.bashrc</code> 文件中添加以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias hs=&#x27;hexo clean &amp;&amp; hexo g &amp;&amp; hexo s&#x27;</span><br><span class="line">alias hd=&#x27;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; git add . &amp;&amp; git commit -m &quot;update&quot; &amp;&amp; git push -f&#x27;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>这样，执行<code>hs</code>即可启动本地服务；执行 <code>hd</code>
进行部署博客时，就一同将博客进行备份了。</p>
<h1 id="参考">7. 参考</h1>
<p>https://zhuanlan.zhihu.com/p/44213627</p>
<p>接下来就要你自己配置了。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
